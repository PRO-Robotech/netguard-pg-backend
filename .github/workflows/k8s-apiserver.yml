name: K8s API Server CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cmd/k8s-apiserver/**'
      - 'internal/k8s/**'
      - 'config/k8s/**'
      - 'config/docker/Dockerfile.k8s-apiserver'
      - 'hack/k8s/**'
      - '.github/workflows/k8s-apiserver.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'cmd/k8s-apiserver/**'
      - 'internal/k8s/**'
      - 'config/k8s/**'
      - 'config/docker/Dockerfile.k8s-apiserver'
      - 'hack/k8s/**'
      - '.github/workflows/k8s-apiserver.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: netguard/k8s-apiserver

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Generate K8s code
      run: make generate-k8s
      
    - name: Run unit tests
      run: make test-k8s-unit
      
    - name: Run integration tests
      run: make test-k8s-integration
      if: always()
      
    - name: Build binary
      run: make build-k8s-apiserver
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m ./internal/k8s/... ./cmd/k8s-apiserver/...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./config/docker/Dockerfile.k8s-apiserver
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Update image tag
      run: |
        cd config/k8s
        kustomize edit set image netguard/k8s-apiserver=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -k config/k8s/
        kubectl rollout status deployment/netguard-apiserver -n netguard-system --timeout=300s

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Update image tag
      run: |
        cd config/k8s
        kustomize edit set image netguard/k8s-apiserver=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -k config/k8s/
        kubectl rollout status deployment/netguard-apiserver -n netguard-system --timeout=300s

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=available --timeout=300s deployment/netguard-apiserver -n netguard-system
        
    - name: Run E2E tests
      run: |
        export KUBECONFIG=kubeconfig
        make test-k8s-e2e
      env:
        E2E_CLUSTER_URL: ${{ secrets.STAGING_CLUSTER_URL }}
        E2E_NAMESPACE: netguard-system 