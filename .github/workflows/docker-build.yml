name: docker-build-and-push
on:
  push:
    branches:
      - "*"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

jobs:
  docker-multiarch-build:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 8

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CUSTOM_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CUSTOM_DOCKERHUB_TOKEN }}

      # Устанавливаем buildx + общий builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Кэшируем слои для повторных сборок
      - name: Configure Buildx cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create sanitized branch name
        id: sanitize
        run: echo "branch=$(echo ${GITHUB_REF_NAME} | sed 's/\//-/g')" >> $GITHUB_OUTPUT

      # Устанавливаем QEMU для эмуляции amd64/arm64
      - name: Enable QEMU emulation
        run: docker run --rm --privileged tonistiigi/binfmt --install all

      # --- BUILD AND PUSH ---

      - name: Build and push goose
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.goose
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.CUSTOM_DOCKERHUB_USERNAME }}/sgroups.k8s.netguard-goose:${{ steps.sanitize.outputs.branch }}-${{ steps.short-sha.outputs.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build and push apiserver
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.apiserver
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.CUSTOM_DOCKERHUB_USERNAME }}/sgroups.k8s.netguard-apiserver:${{ steps.sanitize.outputs.branch }}-${{ steps.short-sha.outputs.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.CUSTOM_DOCKERHUB_USERNAME }}/sgroups.k8s.netguard-backend:${{ steps.sanitize.outputs.branch }}-${{ steps.short-sha.outputs.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build and push webhook
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.webhook
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.CUSTOM_DOCKERHUB_USERNAME }}/sgroups.k8s.netguard-webhook:${{ steps.sanitize.outputs.branch }}-${{ steps.short-sha.outputs.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Обновляем кэш после сборок
      - name: Move new cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
