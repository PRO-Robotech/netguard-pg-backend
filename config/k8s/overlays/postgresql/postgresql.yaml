apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: netguard-system
data:
  init.sql: |
    -- Create netguard database if it doesn't exist
    SELECT 'CREATE DATABASE netguard'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'netguard')\gexec
    
    -- Connect to netguard database
    \c netguard;
    
    -- Create netguard user if it doesn't exist
    DO $$ 
    BEGIN
        CREATE ROLE netguard WITH LOGIN PASSWORD 'netguard';
        GRANT ALL PRIVILEGES ON DATABASE netguard TO netguard;
        -- Grant schema permissions for table creation (sgroups pattern)
        GRANT ALL ON SCHEMA public TO netguard;
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO netguard;
        GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO netguard;
        -- Grant default privileges for future objects
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO netguard;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO netguard;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO netguard;
    EXCEPTION 
        WHEN DUPLICATE_OBJECT THEN 
        RAISE NOTICE 'User netguard already exists';
        -- Still grant schema permissions
        GRANT ALL ON SCHEMA public TO netguard;
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO netguard;
        GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO netguard;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO netguard;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO netguard;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO netguard;
    END $$;

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: netguard-system
  labels:
    app: postgresql
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:15
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: postgres
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh  
            - -c
            - pg_isready -U postgres
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: postgres-init
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: netguard-system
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql