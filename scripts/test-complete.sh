#!/bin/bash

# Complete testing script for Netguard Platform
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ netguard –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
NAMESPACE="${NAMESPACE:-netguard-system}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Test counters
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

run_test() {
    local test_name="$1"
    local test_command="$2"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    log_info "üß™ –¢–µ—Å—Ç: $test_name"
    
    if eval "$test_command"; then
        log_success "‚úÖ PASSED: $test_name"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        log_error "‚ùå FAILED: $test_name"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

# Test 1: Check namespace exists
test_namespace() {
    kubectl get namespace "$NAMESPACE" &>/dev/null
}

# Test 2: Check deployments are ready
test_deployments() {
    local ready_deployments=0
    local total_deployments=0
    
    # Count deployments
    total_deployments=$(kubectl get deployments -n "$NAMESPACE" --no-headers | wc -l)
    
    if [ "$total_deployments" -eq 0 ]; then
        log_error "–ù–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π –≤ namespace $NAMESPACE"
        return 1
    fi
    
    # Check each deployment
    while IFS= read -r line; do
        local name=$(echo "$line" | awk '{print $1}')
        local ready=$(echo "$line" | awk '{print $2}' | cut -d'/' -f1)
        local desired=$(echo "$line" | awk '{print $2}' | cut -d'/' -f2)
        
        if [ "$ready" -eq "$desired" ] && [ "$desired" -gt 0 ]; then
            ready_deployments=$((ready_deployments + 1))
            log_info "  ‚úì $name: $ready/$desired –≥–æ—Ç–æ–≤"
        else
            log_warning "  ‚ö† $name: $ready/$desired –Ω–µ –≥–æ—Ç–æ–≤"
        fi
    done < <(kubectl get deployments -n "$NAMESPACE" --no-headers)
    
    [ "$ready_deployments" -eq "$total_deployments" ]
}

# Test 3: Check all pods are running
test_pods() {
    local running_pods=0
    local total_pods=0
    
    # Get pod statuses
    while IFS= read -r line; do
        local name=$(echo "$line" | awk '{print $1}')
        local status=$(echo "$line" | awk '{print $3}')
        
        total_pods=$((total_pods + 1))
        
        if [ "$status" = "Running" ]; then
            running_pods=$((running_pods + 1))
            log_info "  ‚úì $name: $status"
        else
            log_warning "  ‚ö† $name: $status"
        fi
    done < <(kubectl get pods -n "$NAMESPACE" --no-headers)
    
    if [ "$total_pods" -eq 0 ]; then
        log_error "–ù–µ—Ç –ø–æ–¥–æ–≤ –≤ namespace $NAMESPACE"
        return 1
    fi
    
    [ "$running_pods" -eq "$total_pods" ]
}

# Test 4: Check services are accessible
test_services() {
    local services_ok=0
    local total_services=0
    
    while IFS= read -r line; do
        local name=$(echo "$line" | awk '{print $1}')
        local type=$(echo "$line" | awk '{print $2}')
        local cluster_ip=$(echo "$line" | awk '{print $3}')
        
        total_services=$((total_services + 1))
        
        if [ "$cluster_ip" != "<none>" ] && [ "$cluster_ip" != "None" ]; then
            services_ok=$((services_ok + 1))
            log_info "  ‚úì $name ($type): $cluster_ip"
        else
            log_warning "  ‚ö† $name ($type): No ClusterIP"
        fi
    done < <(kubectl get services -n "$NAMESPACE" --no-headers)
    
    if [ "$total_services" -eq 0 ]; then
        log_error "–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ namespace $NAMESPACE"
        return 1
    fi
    
    [ "$services_ok" -eq "$total_services" ]
}

# Test 5: Check APIService registration (Aggregation Layer v1beta1)
test_apiservice() {
    local apiservice_status
    apiservice_status=$(kubectl get apiservice v1beta1.netguard.sgroups.io -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "NotFound")
    
    if [ "$apiservice_status" = "True" ]; then
        log_info "  ‚úì v1beta1.netguard.sgroups.io (Aggregation Layer) –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        log_warning "  ‚ö† v1beta1.netguard.sgroups.io —Å—Ç–∞—Ç—É—Å: $apiservice_status"
        
        # Check if CRD version exists instead
        if kubectl get crd | grep -q netguard; then
            log_info "  ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–∞ CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1alpha1), –Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Aggregation Layer (v1beta1)"
        fi
        return 1
    fi
}

# Test 6: Check API resources are discoverable (focus on v1beta1)
test_api_discovery() {
    if kubectl api-resources --api-group=netguard.sgroups.io &>/dev/null; then
        local total_resources
        local v1beta1_resources
        local v1alpha1_resources
        
        total_resources=$(kubectl api-resources --api-group=netguard.sgroups.io --no-headers | wc -l)
        v1beta1_resources=$(kubectl api-resources --api-group=netguard.sgroups.io --no-headers | grep -c "v1beta1" || echo "0")
        v1alpha1_resources=$(kubectl api-resources --api-group=netguard.sgroups.io --no-headers | grep -c "v1alpha1" || echo "0")
        
        log_info "  ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $total_resources API —Ä–µ—Å—É—Ä—Å–æ–≤ (v1beta1: $v1beta1_resources, v1alpha1: $v1alpha1_resources)"
        
        if [ "$v1beta1_resources" -gt 0 ]; then
            log_info "  ‚úì v1beta1 —Ä–µ—Å—É—Ä—Å—ã (Aggregation Layer) –¥–æ—Å—Ç—É–ø–Ω—ã"
            return 0
        else
            log_warning "  ‚ö† v1beta1 —Ä–µ—Å—É—Ä—Å—ã (Aggregation Layer) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            if [ "$v1alpha1_resources" -gt 0 ]; then
                log_info "  ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ v1alpha1 —Ä–µ—Å—É—Ä—Å—ã (CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"
            fi
            return 1
        fi
    else
        log_warning "  ‚ö† API –≥—Ä—É–ø–ø–∞ netguard.sgroups.io –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi
}

# Test 7: Test CRUD operations
test_crud_operations() {
    local test_resource_name="test-crud-service-$(date +%s)"
    
    # Create (using v1beta1 for Aggregation Layer)
    log_info "  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞: $test_resource_name (v1beta1 - Aggregation Layer)"
    if ! cat <<EOF | kubectl apply -f - &>/dev/null
apiVersion: netguard.sgroups.io/v1beta1
kind: Service
metadata:
  name: $test_resource_name
  namespace: $NAMESPACE
spec:
  description: "CRUD test service for Aggregation Layer testing"
  ingressPorts:
  - protocol: TCP
    port: "80"
    description: "HTTP port for testing"
  - protocol: TCP
    port: "443"
    description: "HTTPS port for testing"
EOF
    then
        log_error "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å"
        return 1
    fi
    
    # Read (using explicit v1beta1 version)
    log_info "  –ß—Ç–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (v1beta1)"
    if ! kubectl get services.v1beta1.netguard.sgroups.io "$test_resource_name" -n "$NAMESPACE" &>/dev/null; then
        log_error "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
        return 1
    fi
    
    # Update (patch) - using v1beta1
    log_info "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (v1beta1)"
    if ! kubectl patch services.v1beta1.netguard.sgroups.io "$test_resource_name" -n "$NAMESPACE" --type=merge -p '{"spec":{"description":"Updated CRUD test service for Aggregation Layer"}}' &>/dev/null; then
        log_error "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
        return 1
    fi
    
    # Verify update
    local updated_desc
    updated_desc=$(kubectl get services.v1beta1.netguard.sgroups.io "$test_resource_name" -n "$NAMESPACE" -o jsonpath='{.spec.description}' 2>/dev/null || echo "")
    if [ "$updated_desc" != "Updated CRUD test service for Aggregation Layer" ]; then
        log_error "    ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å"
        return 1
    fi
    
    # Delete (using v1beta1)
    log_info "  –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (v1beta1)"
    if ! kubectl delete services.v1beta1.netguard.sgroups.io "$test_resource_name" -n "$NAMESPACE" &>/dev/null; then
        log_error "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
        return 1
    fi
    
    # Verify deletion
    if kubectl get services.v1beta1.netguard.sgroups.io "$test_resource_name" -n "$NAMESPACE" &>/dev/null; then
        log_error "    ‚ùå v1beta1 —Ä–µ—Å—É—Ä—Å –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω"
        return 1
    fi
    
    log_info "  ‚úì –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    return 0
}

# Test 8: Check backend connectivity
test_backend_connectivity() {
    local backend_pod
    backend_pod=$(kubectl get pods -n "$NAMESPACE" -l app=netguard-backend --no-headers | head -1 | awk '{print $1}')
    
    if [ -z "$backend_pod" ]; then
        log_error "  ‚ùå Backend –ø–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # Test gRPC port
    if kubectl exec -n "$NAMESPACE" "$backend_pod" -- nc -z localhost 9090 &>/dev/null; then
        log_info "  ‚úì Backend gRPC –ø–æ—Ä—Ç (9090) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "  ‚ö† Backend gRPC –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # Test HTTP port
    if kubectl exec -n "$NAMESPACE" "$backend_pod" -- nc -z localhost 8080 &>/dev/null; then
        log_info "  ‚úì Backend HTTP –ø–æ—Ä—Ç (8080) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "  ‚ö† Backend HTTP –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    return 0
}

# Test 9: Check API server health endpoints
test_apiserver_health() {
    local apiserver_pod
    apiserver_pod=$(kubectl get pods -n "$NAMESPACE" -l app=netguard-apiserver --no-headers | head -1 | awk '{print $1}')
    
    if [ -z "$apiserver_pod" ]; then
        log_error "  ‚ùå API Server –ø–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # Test health endpoints
    if kubectl exec -n "$NAMESPACE" "$apiserver_pod" -- wget -q -O- http://localhost:8080/healthz &>/dev/null; then
        log_info "  ‚úì Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "  ‚ö† Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    if kubectl exec -n "$NAMESPACE" "$apiserver_pod" -- wget -q -O- http://localhost:8080/readyz &>/dev/null; then
        log_info "  ‚úì Readiness endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "  ‚ö† Readiness endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    return 0
}

# Test 10: Check logs for errors
test_logs_for_errors() {
    local error_count=0
    
    # Check API server logs
    local apiserver_errors
    apiserver_errors=$(kubectl logs -n "$NAMESPACE" deployment/netguard-apiserver --tail=100 | grep -i error | wc -l)
    
    if [ "$apiserver_errors" -gt 0 ]; then
        log_warning "  ‚ö† –ù–∞–π–¥–µ–Ω–æ $apiserver_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö API Server"
        error_count=$((error_count + apiserver_errors))
    else
        log_info "  ‚úì –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö API Server"
    fi
    
    # Check backend logs
    local backend_errors
    backend_errors=$(kubectl logs -n "$NAMESPACE" deployment/netguard-backend --tail=100 | grep -i error | wc -l)
    
    if [ "$backend_errors" -gt 0 ]; then
        log_warning "  ‚ö† –ù–∞–π–¥–µ–Ω–æ $backend_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö Backend"
        error_count=$((error_count + backend_errors))
    else
        log_info "  ‚úì –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö Backend"
    fi
    
    # Allow some errors but not too many
    [ "$error_count" -lt 5 ]
}

# Show detailed status
show_detailed_status() {
    echo -e "\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
    echo "============================"
    
    echo -e "\nüèóÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    kubectl get deployments -n "$NAMESPACE" -o wide
    
    echo -e "\nüü¢ –ü–æ–¥—ã:"
    kubectl get pods -n "$NAMESPACE" -o wide
    
    echo -e "\nüîå –°–µ—Ä–≤–∏—Å—ã:"
    kubectl get services -n "$NAMESPACE" -o wide
    
    echo -e "\nüîó APIService:"
    kubectl get apiservice v1beta1.netguard.sgroups.io -o wide
    
    echo -e "\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ API —Ä–µ—Å—É—Ä—Å—ã:"
    kubectl api-resources --api-group=netguard.sgroups.io 2>/dev/null || echo "API –≥—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    echo -e "\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    kubectl top pods -n "$NAMESPACE" 2>/dev/null || echo "Metrics –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
}

# Show recent logs
show_recent_logs() {
    echo -e "\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
    echo "=================="
    
    echo -e "\nüî∏ API Server (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
    kubectl logs -n "$NAMESPACE" deployment/netguard-apiserver --tail=10 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    echo -e "\nüî∏ Backend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
    kubectl logs -n "$NAMESPACE" deployment/netguard-backend --tail=10 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
}

# Main testing function
run_all_tests() {
    echo "üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Netguard Platform"
    echo "============================================="
    echo "Namespace: $NAMESPACE"
    echo ""
    
    # Basic infrastructure tests
    run_test "Namespace —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "test_namespace"
    run_test "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã" "test_deployments"
    run_test "–ü–æ–¥—ã –∑–∞–ø—É—â–µ–Ω—ã" "test_pods"
    run_test "–°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã" "test_services"
    
    # API tests
    run_test "APIService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" "test_apiservice"
    run_test "API —Ä–µ—Å—É—Ä—Å—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è" "test_api_discovery"
    run_test "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç" "test_crud_operations"
    
    # Connectivity tests
    run_test "Backend –¥–æ—Å—Ç—É–ø–µ–Ω" "test_backend_connectivity"
    run_test "API Server health endpoints" "test_apiserver_health"
    
    # Quality tests
    run_test "–õ–æ–≥–∏ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫" "test_logs_for_errors"
    
    echo ""
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "=========================="
    echo "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: $TESTS_TOTAL"
    echo "–ü—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: $TESTS_PASSED"
    echo "–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: $TESTS_FAILED"
    
    if [ "$TESTS_FAILED" -eq 0 ]; then
        log_success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        echo ""
        echo "‚úÖ Netguard Platform –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        return 0
    else
        log_warning "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å ($TESTS_FAILED –∏–∑ $TESTS_TOTAL)"
        echo ""
        echo "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        return 1
    fi
}

# Performance test
run_performance_test() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞..."
    
    local start_time=$(date +%s)
    local operations=10
    local successful_ops=0
    
    for i in $(seq 1 $operations); do
        local resource_name="perf-test-$i"
        
        if cat <<EOF | kubectl apply -f - &>/dev/null
apiVersion: netguard.sgroups.io/v1beta1
kind: Service
metadata:
  name: $resource_name
  namespace: $NAMESPACE
spec:
  description: "Performance test service $i (Aggregation Layer v1beta1)"
  ingressPorts:
  - protocol: TCP
    port: "$(($i + 8000))"
    description: "Test port $i"
EOF
        then
            if kubectl delete services.v1beta1.netguard.sgroups.io "$resource_name" -n "$NAMESPACE" &>/dev/null; then
                successful_ops=$((successful_ops + 1))
            fi
        fi
    done
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    echo "  –û–ø–µ—Ä–∞—Ü–∏–π: $operations"
    echo "  –£—Å–ø–µ—à–Ω—ã—Ö: $successful_ops"
    echo "  –í—Ä–µ–º—è: ${duration}s"
    echo "  –°–∫–æ—Ä–æ—Å—Ç—å: $(echo "scale=2; $successful_ops / $duration" | bc) ops/sec"
}

# Main script logic
case "${1:-all}" in
    all)
        run_all_tests
        echo ""
        show_detailed_status
        ;;
    quick)
        run_test "Namespace —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "test_namespace"
        run_test "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã" "test_deployments"
        run_test "–ü–æ–¥—ã –∑–∞–ø—É—â–µ–Ω—ã" "test_pods"
        run_test "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç" "test_crud_operations"
        ;;
    performance|perf)
        run_performance_test
        ;;
    status)
        show_detailed_status
        ;;
    logs)
        show_recent_logs
        ;;
    help|*)
        echo "Usage: $0 [all|quick|performance|status|logs|help]"
        echo ""
        echo "Commands:"
        echo "  all         - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  quick       - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        echo "  performance - –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        echo "  status      - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        echo "  logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
        echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
esac 