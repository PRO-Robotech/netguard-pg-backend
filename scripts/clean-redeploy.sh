#!/bin/bash

# Complete clean redeploy script for Netguard Platform
# –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ netguard –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ namespace'–∞–º–∏

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "\n${CYAN}=== $1 ===${NC}"
}

main() {
    echo "üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Netguard Platform"
    echo "========================================="
    echo "–ü–µ—Ä–µ—Ö–æ–¥ —Å default namespace –Ω–∞ netguard-system"
    echo "–í—Ä–µ–º—è: $(date)"
    echo ""
    
    log_warning "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–∑ default namespace!"
    echo ""
    echo "–ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:"
    echo "1. üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–∑ default namespace"
    echo "2. üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ namespace'–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "3. üîê –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
    echo "4. üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ netguard-system namespace"
    echo "5. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v1beta1 (Aggregation Layer)"
    echo ""
    
    if [[ "$NON_INTERACTIVE" != "true" ]]; then
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            exit 0
        fi
    else
        log_info "–ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
    fi
    
    cd "$SCRIPT_DIR"
    
    # Step 1: Cleanup old deployment
    log_step "–®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    if [ -f "./cleanup-old-deployment.sh" ]; then
        # Run cleanup in non-interactive mode
        echo "y" | ./cleanup-old-deployment.sh
    else
        log_error "–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # Step 2: Fix namespaces
    log_step "–®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ namespace'–æ–≤"
    if [ -f "./fix-namespaces.sh" ]; then
        ./fix-namespaces.sh
    else
        log_error "–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è namespace'–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # Step 3: Regenerate certificates
    log_step "–®–∞–≥ 3: –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
    cd "$PROJECT_ROOT"
    if [ -f "./scripts/generate-certs.sh" ]; then
        ./scripts/generate-certs.sh
        log_success "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è netguard-system namespace"
    else
        log_error "–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # Step 4: Deploy
    log_step "–®–∞–≥ 4: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ netguard-system"
    cd "$SCRIPT_DIR"
    if [ -f "./deploy-complete.sh" ]; then
        ./deploy-complete.sh
    else
        log_error "–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # Step 5: Test
    log_step "–®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Aggregation Layer (v1beta1)"
    if [ -f "./test-complete.sh" ]; then
        ./test-complete.sh quick
    else
        log_warning "–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
    fi
    
    # Final status
    log_step "–ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"
    
    echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    kubectl get all -n netguard-system | head -10
    
    echo -e "\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ APIService:"
    kubectl get apiservice v1beta1.netguard.sgroups.io
    
    echo -e "\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ API —Ä–µ—Å—É—Ä—Å—ã:"
    kubectl api-resources --api-group=netguard.sgroups.io | head -5
    
    log_success "üéâ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  kubectl get all -n netguard-system"
    echo "  kubectl logs -f deployment/netguard-apiserver -n netguard-system"
    echo "  ./test-complete.sh  # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  ./compare-implementations.sh  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π"
}

# Parse arguments
NON_INTERACTIVE=false
while [[ $# -gt 0 ]]; do
    case $1 in
        -y|--yes)
            NON_INTERACTIVE=true
            shift
            ;;
        run|help)
            COMMAND=$1
            shift
            ;;
        *)
            shift
            ;;
    esac
done

# Handle script arguments
case "${COMMAND:-run}" in
    run)
        main
        ;;
    help|*)
        echo "Usage: $0 [run|help] [-y|--yes]"
        echo ""
        echo "–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ Netguard Platform:"
        echo "- –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–∑ default namespace"
        echo "- –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç namespace'—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"  
        echo "- –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
        echo "- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –≤ netguard-system namespace"
        echo "- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç Aggregation Layer (v1beta1)"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  run   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  help  - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  -y, --yes  - –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å yes)"
        ;;
esac 