#!/bin/bash

# Script to analyze current netguard state in minikube
# –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è netguard –≤ minikube

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_section() {
    echo -e "\n${CYAN}=== $1 ===${NC}"
}

# Check if connected to minikube
check_minikube() {
    log_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ minikube"
    
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v minikube &> /dev/null; then
        log_warning "minikube –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Check current context
    CURRENT_CONTEXT=$(kubectl config current-context 2>/dev/null || echo "none")
    if [ "$CURRENT_CONTEXT" = "none" ]; then
        log_error "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Kubernetes –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        exit 1
    fi
    
    log_info "–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: $CURRENT_CONTEXT"
    
    if echo "$CURRENT_CONTEXT" | grep -q "minikube"; then
        log_success "‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ minikube"
        
        # Check minikube status
        if command -v minikube &> /dev/null; then
            MINIKUBE_STATUS=$(minikube status -f '{{.Host}}' 2>/dev/null || echo "Unknown")
            log_info "–°—Ç–∞—Ç—É—Å minikube: $MINIKUBE_STATUS"
        fi
    else
        log_warning "‚ö† –ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–µ –∫ minikube –∫–ª–∞—Å—Ç–µ—Ä—É"
    fi
    
    # Show cluster info
    log_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–µ:"
    kubectl cluster-info | head -3
}

# Analyze namespaces
analyze_namespaces() {
    log_section "–ê–Ω–∞–ª–∏–∑ namespace'–æ–≤"
    
    echo "üìÅ –í—Å–µ namespace'—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ:"
    kubectl get namespaces -o wide
    
    # Check for netguard-related namespaces
    NETGUARD_NAMESPACES=$(kubectl get namespaces -o name | grep -i netguard || echo "")
    
    if [ -n "$NETGUARD_NAMESPACES" ]; then
        echo -e "\nüéØ –ù–∞–π–¥–µ–Ω—ã netguard namespace'—ã:"
        for ns in $NETGUARD_NAMESPACES; do
            NS_NAME=$(echo "$ns" | cut -d'/' -f2)
            echo "  - $NS_NAME"
            
            # Show namespace details
            kubectl describe namespace "$NS_NAME" | grep -E "(Labels|Annotations)" || true
        done
    else
        log_warning "‚ùå Netguard namespace'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # Check default namespace for netguard resources
    DEFAULT_NETGUARD=$(kubectl get all -n default | grep -i netguard || echo "")
    if [ -n "$DEFAULT_NETGUARD" ]; then
        log_warning "‚ö† –ù–∞–π–¥–µ–Ω—ã netguard —Ä–µ—Å—É—Ä—Å—ã –≤ default namespace:"
        kubectl get all -n default | grep -i netguard
    fi
}

# Analyze deployments and pods
analyze_workloads() {
    log_section "–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫"
    
    echo "üöÄ –í—Å–µ deployments –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ:"
    kubectl get deployments -A | head -1  # Header
    kubectl get deployments -A | grep -i netguard || echo "  Netguard deployments –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    echo -e "\nüü¢ –í—Å–µ –ø–æ–¥—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ:"
    kubectl get pods -A | head -1  # Header
    kubectl get pods -A | grep -i netguard || echo "  Netguard –ø–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # Check pod status details
    NETGUARD_PODS=$(kubectl get pods -A -o name | grep -i netguard || echo "")
    if [ -n "$NETGUARD_PODS" ]; then
        echo -e "\nüìä –î–µ—Ç–∞–ª–∏ netguard –ø–æ–¥–æ–≤:"
        for pod in $NETGUARD_PODS; do
            POD_NAME=$(echo "$pod" | cut -d'/' -f2)
            POD_NAMESPACE=$(kubectl get "$pod" -o jsonpath='{.metadata.namespace}' 2>/dev/null || echo "unknown")
            POD_STATUS=$(kubectl get "$pod" -o jsonpath='{.status.phase}' 2>/dev/null || echo "unknown")
            
            echo "  - $POD_NAME (namespace: $POD_NAMESPACE, status: $POD_STATUS)"
            
            # Show recent events for problematic pods
            if [ "$POD_STATUS" != "Running" ]; then
                echo "    –°–æ–±—ã—Ç–∏—è:"
                kubectl get events -n "$POD_NAMESPACE" --field-selector involvedObject.name="$POD_NAME" --sort-by='.lastTimestamp' | tail -3
            fi
        done
    fi
}

# Analyze services
analyze_services() {
    log_section "–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    echo "üîå –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ:"
    kubectl get services -A | head -1  # Header
    kubectl get services -A | grep -i netguard || echo "  Netguard —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # Check ClusterIP availability
    NETGUARD_SERVICES=$(kubectl get services -A -o name | grep -i netguard || echo "")
    if [ -n "$NETGUARD_SERVICES" ]; then
        echo -e "\nüîó –î–µ—Ç–∞–ª–∏ netguard —Å–µ—Ä–≤–∏—Å–æ–≤:"
        for svc in $NETGUARD_SERVICES; do
            SVC_NAME=$(echo "$svc" | cut -d'/' -f2)
            SVC_NAMESPACE=$(kubectl get "$svc" -o jsonpath='{.metadata.namespace}' 2>/dev/null || echo "unknown")
            SVC_TYPE=$(kubectl get "$svc" -o jsonpath='{.spec.type}' 2>/dev/null || echo "unknown")
            SVC_CLUSTER_IP=$(kubectl get "$svc" -o jsonpath='{.spec.clusterIP}' 2>/dev/null || echo "unknown")
            
            echo "  - $SVC_NAME (namespace: $SVC_NAMESPACE, type: $SVC_TYPE, ClusterIP: $SVC_CLUSTER_IP)"
        done
    fi
}

# Analyze API resources
analyze_api_resources() {
    log_section "–ê–Ω–∞–ª–∏–∑ API —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    # Check APIServices (Aggregation Layer)
    echo "üîó APIServices (Aggregation Layer):"
    kubectl get apiservices | head -1  # Header
    NETGUARD_APISERVICES=$(kubectl get apiservices | grep -i netguard || echo "")
    if [ -n "$NETGUARD_APISERVICES" ]; then
        echo "$NETGUARD_APISERVICES"
        
        # Check v1beta1 specifically (Aggregation Layer)
        echo -e "\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ v1beta1.netguard.sgroups.io (Aggregation Layer):"
        V1BETA1_STATUS=$(kubectl get apiservice v1beta1.netguard.sgroups.io -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "NotFound")
        if [ "$V1BETA1_STATUS" = "True" ]; then
            log_success "‚úÖ v1beta1.netguard.sgroups.io (Aggregation Layer) –¥–æ—Å—Ç—É–ø–µ–Ω"
        elif [ "$V1BETA1_STATUS" = "NotFound" ]; then
            log_warning "‚ùå v1beta1.netguard.sgroups.io (Aggregation Layer) –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else
            log_warning "‚ö† v1beta1.netguard.sgroups.io —Å—Ç–∞—Ç—É—Å: $V1BETA1_STATUS"
        fi
    else
        echo "  Netguard APIServices –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # Check CRDs (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    echo -e "\nüìã Custom Resource Definitions (CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è):"
    kubectl get crd | head -1  # Header
    NETGUARD_CRDS=$(kubectl get crd | grep -i netguard || echo "")
    if [ -n "$NETGUARD_CRDS" ]; then
        echo "$NETGUARD_CRDS"
        
        # Check v1alpha1 specifically (CRD implementation)
        echo -e "\nüîç –ù–∞–π–¥–µ–Ω—ã CRD (v1alpha1 - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è):"
        kubectl get crd | grep netguard | while read -r line; do
            CRD_NAME=$(echo "$line" | awk '{print $1}')
            echo "  - $CRD_NAME"
        done
    else
        echo "  Netguard CRDs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # Determine which implementation is active
    echo -e "\nüî¨ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:"
    HAS_AGGREGATION=$(kubectl get apiservice v1beta1.netguard.sgroups.io 2>/dev/null && echo "true" || echo "false")
    HAS_CRD=$(kubectl get crd | grep -q netguard && echo "true" || echo "false")
    
    if [ "$HAS_AGGREGATION" = "true" ] && [ "$HAS_CRD" = "true" ]; then
        log_warning "‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –û–ë–ï —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (Aggregation Layer + CRD)"
        echo "  - v1beta1 (Aggregation Layer): $([ "$V1BETA1_STATUS" = "True" ] && echo "–ê–∫—Ç–∏–≤–µ–Ω" || echo "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω")"
        echo "  - v1alpha1 (CRD): –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        log_info "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"
    elif [ "$HAS_AGGREGATION" = "true" ]; then
        log_success "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ Aggregation Layer —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1beta1)"
    elif [ "$HAS_CRD" = "true" ]; then
        log_info "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∞ CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1alpha1)"
        log_warning "‚ö† –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Aggregation Layer –Ω—É–∂–Ω–∞ v1beta1"
    else
        log_warning "‚ùå Netguard —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # Try to discover netguard API resources
    echo -e "\nüéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ netguard API —Ä–µ—Å—É—Ä—Å–æ–≤:"
    if kubectl api-resources --api-group=netguard.sgroups.io &>/dev/null; then
        log_success "‚úì API –≥—Ä—É–ø–ø–∞ netguard.sgroups.io –¥–æ—Å—Ç—É–ø–Ω–∞:"
        kubectl api-resources --api-group=netguard.sgroups.io
        
        # Try to list some resources with version detection
        echo -e "\nüì¶ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ netguard —Ä–µ—Å—É—Ä—Å—ã:"
        
        # Check v1beta1 resources (Aggregation Layer)
        echo "  üî∏ v1beta1 —Ä–µ—Å—É—Ä—Å—ã (Aggregation Layer):"
        if kubectl api-resources --api-group=netguard.sgroups.io | grep -q v1beta1; then
            kubectl get services.v1beta1.netguard.sgroups.io -A 2>/dev/null | head -5 || echo "    –ù–µ—Ç services.v1beta1.netguard.sgroups.io"
            kubectl get addressgroups.v1beta1.netguard.sgroups.io -A 2>/dev/null | head -3 || echo "    –ù–µ—Ç addressgroups.v1beta1.netguard.sgroups.io"
        else
            echo "    v1beta1 —Ä–µ—Å—É—Ä—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
        
        # Check v1alpha1 resources (CRD)
        echo "  üî∏ v1alpha1 —Ä–µ—Å—É—Ä—Å—ã (CRD):"
        if kubectl api-resources --api-group=netguard.sgroups.io | grep -q v1alpha1; then
            kubectl get services.v1alpha1.netguard.sgroups.io -A 2>/dev/null | head -3 || echo "    –ù–µ—Ç services.v1alpha1.netguard.sgroups.io"
        else
            echo "    v1alpha1 —Ä–µ—Å—É—Ä—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    else
        log_warning "‚ùå API –≥—Ä—É–ø–ø–∞ netguard.sgroups.io –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# Analyze configuration issues
analyze_config_issues() {
    log_section "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    
    local issues_found=0
    
    # Check for namespace inconsistencies
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π namespace'–æ–≤:"
    
    # Check if resources are in different namespaces
    NETGUARD_NAMESPACES_LIST=$(kubectl get all -A | grep -i netguard | awk '{print $1}' | sort | uniq || echo "")
    
    if [ -n "$NETGUARD_NAMESPACES_LIST" ]; then
        NAMESPACE_COUNT=$(echo "$NETGUARD_NAMESPACES_LIST" | wc -l)
        if [ "$NAMESPACE_COUNT" -gt 1 ]; then
            log_warning "‚ö† Netguard —Ä–µ—Å—É—Ä—Å—ã —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ $NAMESPACE_COUNT namespace'–∞–º:"
            echo "$NETGUARD_NAMESPACES_LIST"
            issues_found=$((issues_found + 1))
        else
            log_success "‚úì –í—Å–µ netguard —Ä–µ—Å—É—Ä—Å—ã –≤ –æ–¥–Ω–æ–º namespace: $NETGUARD_NAMESPACES_LIST"
        fi
    fi
    
    # Check for pods in Error/CrashLoopBackOff states
    echo -e "\nüö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–¥–æ–≤:"
    PROBLEM_PODS=$(kubectl get pods -A | grep -i netguard | grep -E "(Error|CrashLoopBackOff|Pending|ImagePullBackOff)" || echo "")
    
    if [ -n "$PROBLEM_PODS" ]; then
        log_warning "‚ö† –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ netguard –ø–æ–¥—ã:"
        echo "$PROBLEM_PODS"
        issues_found=$((issues_found + 1))
    else
        log_success "‚úì –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö netguard –ø–æ–¥–æ–≤"
    fi
    
    # Check APIService availability
    echo -e "\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ APIService:"
    APISERVICE_STATUS=$(kubectl get apiservice v1beta1.netguard.sgroups.io -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "NotFound")
    
    if [ "$APISERVICE_STATUS" = "True" ]; then
        log_success "‚úì APIService –¥–æ—Å—Ç—É–ø–µ–Ω"
    elif [ "$APISERVICE_STATUS" = "NotFound" ]; then
        log_warning "‚ö† APIService –Ω–µ –Ω–∞–π–¥–µ–Ω"
        issues_found=$((issues_found + 1))
    else
        log_warning "‚ö† APIService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: $APISERVICE_STATUS)"
        issues_found=$((issues_found + 1))
    fi
    
    echo -e "\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $issues_found"
    
    if [ "$issues_found" -eq 0 ]; then
        log_success "üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π!"
    else
        log_warning "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
    fi
}

# Show resource usage
show_resource_usage() {
    log_section "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    echo "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞:"
    kubectl top nodes 2>/dev/null || echo "  Metrics —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    echo -e "\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–¥–∞–º–∏ netguard:"
    kubectl top pods -A 2>/dev/null | grep -i netguard || echo "  Metrics –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ netguard –ø–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
}

# Generate recommendations
generate_recommendations() {
    log_section "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞:"
    
    # Check if any netguard resources exist
    NETGUARD_RESOURCES=$(kubectl get all -A | grep -i netguard || echo "")
    
    if [ -z "$NETGUARD_RESOURCES" ]; then
        echo "1. üöÄ Netguard –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:"
        echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç—å: ./scripts/fix-namespaces.sh"
        echo "   - –ó–∞—Ç–µ–º: ./scripts/deploy-complete.sh"
    else
        # Check namespace consistency
        NAMESPACE_COUNT=$(kubectl get all -A | grep -i netguard | awk '{print $1}' | sort | uniq | wc -l)
        if [ "$NAMESPACE_COUNT" -gt 1 ]; then
            echo "1. üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑–±—Ä–æ—Å –ø–æ namespace'–∞–º:"
            echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç—å: ./scripts/fix-namespaces.sh"
            echo "   - –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å: ./scripts/deploy-complete.sh"
        fi
        
        # Check if APIService is working
        if ! kubectl api-resources --api-group=netguard.sgroups.io &>/dev/null; then
            echo "2. ‚ö° API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:"
            echo "   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: kubectl logs -n netguard-system deployment/netguard-apiserver"
            echo "   - –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å: ./scripts/deploy-complete.sh"
        fi
        
        # General testing recommendation
        echo "3. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
        echo "   - ./scripts/test-complete.sh"
    fi
    
    echo -e "\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   kubectl get all -A | grep netguard"
    echo "   kubectl describe apiservice v1beta1.netguard.sgroups.io"
    echo "   kubectl logs -n netguard-system deployment/netguard-apiserver"
    echo "   kubectl logs -n netguard-system deployment/netguard-backend"
}

# Main function
main() {
    echo "üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Netguard –≤ Kubernetes"
    echo "=================================================="
    echo "–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: $(date)"
    echo ""
    
    check_minikube
    analyze_namespaces
    analyze_workloads
    analyze_services
    analyze_api_resources
    analyze_config_issues
    show_resource_usage
    generate_recommendations
    
    echo -e "\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# Handle script arguments
case "${1:-analyze}" in
    analyze)
        main
        ;;
    namespaces)
        analyze_namespaces
        ;;
    workloads)
        analyze_workloads
        ;;
    services)
        analyze_services
        ;;
    api)
        analyze_api_resources
        ;;
    config)
        analyze_config_issues
        ;;
    recommendations)
        generate_recommendations
        ;;
    help|*)
        echo "Usage: $0 [analyze|namespaces|workloads|services|api|config|recommendations|help]"
        echo ""
        echo "Commands:"
        echo "  analyze        - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  namespaces     - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ namespace'–æ–≤"
        echo "  workloads      - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ deployments –∏ –ø–æ–¥–æ–≤"
        echo "  services       - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  api            - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ API —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  config         - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        echo "  recommendations - –¢–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        echo "  help           - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
esac 