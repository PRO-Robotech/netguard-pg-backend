#!/bin/bash

# Script to compare CRD (v1alpha1) and Aggregation Layer (v1beta1) implementations
# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ CRD (v1alpha1) –∏ Aggregation Layer (v1beta1) —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_section() {
    echo -e "\n${CYAN}=== $1 ===${NC}"
}

log_implementation() {
    echo -e "${MAGENTA}$1${NC}"
}

# Check implementation availability
check_implementations() {
    log_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π"
    
    # Check Aggregation Layer (v1beta1)
    log_implementation "üî∏ Aggregation Layer (v1beta1):"
    V1BETA1_APISERVICE=$(kubectl get apiservice v1beta1.netguard.sgroups.io 2>/dev/null || echo "")
    if [ -n "$V1BETA1_APISERVICE" ]; then
        V1BETA1_STATUS=$(kubectl get apiservice v1beta1.netguard.sgroups.io -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "Unknown")
        if [ "$V1BETA1_STATUS" = "True" ]; then
            log_success "‚úÖ APIService v1beta1.netguard.sgroups.io –¥–æ—Å—Ç—É–ø–µ–Ω"
            AGGREGATION_AVAILABLE=true
        else
            log_warning "‚ö† APIService v1beta1.netguard.sgroups.io –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: $V1BETA1_STATUS)"
            AGGREGATION_AVAILABLE=false
        fi
    else
        log_warning "‚ùå APIService v1beta1.netguard.sgroups.io –Ω–µ –Ω–∞–π–¥–µ–Ω"
        AGGREGATION_AVAILABLE=false
    fi
    
    # Check CRD implementation (v1alpha1)
    log_implementation "üî∏ CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1alpha1):"
    CRD_COUNT=$(kubectl get crd | grep -c netguard || echo "0")
    if [ "$CRD_COUNT" -gt 0 ]; then
        log_success "‚úÖ –ù–∞–π–¥–µ–Ω–æ $CRD_COUNT netguard CRD"
        CRD_AVAILABLE=true
        
        echo "  –ù–∞–π–¥–µ–Ω–Ω—ã–µ CRD:"
        kubectl get crd | grep netguard | while read -r line; do
            CRD_NAME=$(echo "$line" | awk '{print $1}')
            echo "    - $CRD_NAME"
        done
    else
        log_warning "‚ùå Netguard CRD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        CRD_AVAILABLE=false
    fi
}

# Compare API resources
compare_api_resources() {
    log_section "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ API —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    if kubectl api-resources --api-group=netguard.sgroups.io &>/dev/null; then
        echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ API —Ä–µ—Å—É—Ä—Å—ã –≤ –≥—Ä—É–ø–ø–µ netguard.sgroups.io:"
        kubectl api-resources --api-group=netguard.sgroups.io
        
        # Count resources by version
        V1ALPHA1_COUNT=$(kubectl api-resources --api-group=netguard.sgroups.io --no-headers | grep -c "v1alpha1" || echo "0")
        V1BETA1_COUNT=$(kubectl api-resources --api-group=netguard.sgroups.io --no-headers | grep -c "v1beta1" || echo "0")
        
        echo -e "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä—Å–∏—è–º:"
        echo "  - v1alpha1 (CRD): $V1ALPHA1_COUNT —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  - v1beta1 (Aggregation): $V1BETA1_COUNT —Ä–µ—Å—É—Ä—Å–æ–≤"
        
        # List resources by version
        if [ "$V1BETA1_COUNT" -gt 0 ]; then
            echo -e "\nüî∏ v1beta1 —Ä–µ—Å—É—Ä—Å—ã (Aggregation Layer):"
            kubectl api-resources --api-group=netguard.sgroups.io --no-headers | grep "v1beta1" | while read -r line; do
                RESOURCE_NAME=$(echo "$line" | awk '{print $1}')
                echo "    - $RESOURCE_NAME"
            done
        fi
        
        if [ "$V1ALPHA1_COUNT" -gt 0 ]; then
            echo -e "\nüî∏ v1alpha1 —Ä–µ—Å—É—Ä—Å—ã (CRD):"
            kubectl api-resources --api-group=netguard.sgroups.io --no-headers | grep "v1alpha1" | while read -r line; do
                RESOURCE_NAME=$(echo "$line" | awk '{print $1}')
                echo "    - $RESOURCE_NAME"
            done
        fi
    else
        log_warning "‚ùå API –≥—Ä—É–ø–ø–∞ netguard.sgroups.io –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# Test CRUD operations for both versions
test_crud_comparison() {
    log_section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"
    
    local test_timestamp=$(date +%s)
    local namespace="netguard-system"
    
    # Test v1beta1 (Aggregation Layer)
    if [ "$AGGREGATION_AVAILABLE" = true ]; then
        log_implementation "üî∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v1beta1 (Aggregation Layer):"
        test_v1beta1_crud "$test_timestamp" "$namespace"
    else
        log_warning "‚ö† v1beta1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    fi
    
    # Test v1alpha1 (CRD)
    if [ "$CRD_AVAILABLE" = true ]; then
        log_implementation "üî∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v1alpha1 (CRD):"
        test_v1alpha1_crud "$test_timestamp" "$namespace"
    else
        log_warning "‚ö† v1alpha1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    fi
}

# Test v1beta1 CRUD
test_v1beta1_crud() {
    local timestamp="$1"
    local namespace="$2"
    local resource_name="test-v1beta1-$timestamp"
    
    # Create
    if cat <<EOF | kubectl apply -f - &>/dev/null
apiVersion: netguard.sgroups.io/v1beta1
kind: Service
metadata:
  name: $resource_name
  namespace: $namespace
spec:
  description: "Test service for v1beta1 (Aggregation Layer)"
  ingressPorts:
  - protocol: TCP
    port: "8080"
    description: "Test port"
EOF
    then
        log_success "  ‚úÖ CREATE: v1beta1 —Ä–µ—Å—É—Ä—Å —Å–æ–∑–¥–∞–Ω"
        
        # Read
        if kubectl get services.v1beta1.netguard.sgroups.io "$resource_name" -n "$namespace" &>/dev/null; then
            log_success "  ‚úÖ READ: v1beta1 —Ä–µ—Å—É—Ä—Å –ø—Ä–æ—á–∏—Ç–∞–Ω"
            
            # Update
            if kubectl patch services.v1beta1.netguard.sgroups.io "$resource_name" -n "$namespace" --type=merge -p '{"spec":{"description":"Updated v1beta1 service"}}' &>/dev/null; then
                log_success "  ‚úÖ UPDATE: v1beta1 —Ä–µ—Å—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
                
                # Delete
                if kubectl delete services.v1beta1.netguard.sgroups.io "$resource_name" -n "$namespace" &>/dev/null; then
                    log_success "  ‚úÖ DELETE: v1beta1 —Ä–µ—Å—É—Ä—Å —É–¥–∞–ª–µ–Ω"
                else
                    log_error "  ‚ùå DELETE: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
                fi
            else
                log_error "  ‚ùå UPDATE: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
            fi
        else
            log_error "  ‚ùå READ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
        fi
    else
        log_error "  ‚ùå CREATE: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å v1beta1 —Ä–µ—Å—É—Ä—Å"
    fi
}

# Test v1alpha1 CRUD
test_v1alpha1_crud() {
    local timestamp="$1"
    local namespace="$2"
    local resource_name="test-v1alpha1-$timestamp"
    
    # Create
    if cat <<EOF | kubectl apply -f - &>/dev/null
apiVersion: netguard.sgroups.io/v1alpha1
kind: Service
metadata:
  name: $resource_name
  namespace: $namespace
spec:
  description: "Test service for v1alpha1 (CRD)"
  ingressPorts:
  - protocol: TCP
    port: "8080"
    description: "Test port"
EOF
    then
        log_success "  ‚úÖ CREATE: v1alpha1 —Ä–µ—Å—É—Ä—Å —Å–æ–∑–¥–∞–Ω"
        
        # Read
        if kubectl get services.v1alpha1.netguard.sgroups.io "$resource_name" -n "$namespace" &>/dev/null; then
            log_success "  ‚úÖ READ: v1alpha1 —Ä–µ—Å—É—Ä—Å –ø—Ä–æ—á–∏—Ç–∞–Ω"
            
            # Update
            if kubectl patch services.v1alpha1.netguard.sgroups.io "$resource_name" -n "$namespace" --type=merge -p '{"spec":{"description":"Updated v1alpha1 service"}}' &>/dev/null; then
                log_success "  ‚úÖ UPDATE: v1alpha1 —Ä–µ—Å—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
                
                # Delete
                if kubectl delete services.v1alpha1.netguard.sgroups.io "$resource_name" -n "$namespace" &>/dev/null; then
                    log_success "  ‚úÖ DELETE: v1alpha1 —Ä–µ—Å—É—Ä—Å —É–¥–∞–ª–µ–Ω"
                else
                    log_error "  ‚ùå DELETE: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å v1alpha1 —Ä–µ—Å—É—Ä—Å"
                fi
            else
                log_error "  ‚ùå UPDATE: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å v1alpha1 —Ä–µ—Å—É—Ä—Å"
            fi
        else
            log_error "  ‚ùå READ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å v1alpha1 —Ä–µ—Å—É—Ä—Å"
        fi
    else
        log_error "  ‚ùå CREATE: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å v1alpha1 —Ä–µ—Å—É—Ä—Å"
    fi
}

# Show existing resources for both versions
show_existing_resources() {
    log_section "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã"
    
    # v1beta1 resources
    if [ "$AGGREGATION_AVAILABLE" = true ]; then
        log_implementation "üî∏ v1beta1 —Ä–µ—Å—É—Ä—Å—ã (Aggregation Layer):"
        
        local v1beta1_services=$(kubectl get services.v1beta1.netguard.sgroups.io -A 2>/dev/null | tail -n +2 | wc -l || echo "0")
        if [ "$v1beta1_services" -gt 0 ]; then
            echo "  üì¶ Services ($v1beta1_services):"
            kubectl get services.v1beta1.netguard.sgroups.io -A | head -6
        else
            echo "  üì¶ Services: –Ω–µ—Ç"
        fi
        
        local v1beta1_addressgroups=$(kubectl get addressgroups.v1beta1.netguard.sgroups.io -A 2>/dev/null | tail -n +2 | wc -l || echo "0")
        if [ "$v1beta1_addressgroups" -gt 0 ]; then
            echo "  üì¶ AddressGroups ($v1beta1_addressgroups):"
            kubectl get addressgroups.v1beta1.netguard.sgroups.io -A | head -4
        else
            echo "  üì¶ AddressGroups: –Ω–µ—Ç"
        fi
    fi
    
    # v1alpha1 resources
    if [ "$CRD_AVAILABLE" = true ]; then
        log_implementation "üî∏ v1alpha1 —Ä–µ—Å—É—Ä—Å—ã (CRD):"
        
        local v1alpha1_services=$(kubectl get services.v1alpha1.netguard.sgroups.io -A 2>/dev/null | tail -n +2 | wc -l || echo "0")
        if [ "$v1alpha1_services" -gt 0 ]; then
            echo "  üì¶ Services ($v1alpha1_services):"
            kubectl get services.v1alpha1.netguard.sgroups.io -A | head -6
        else
            echo "  üì¶ Services: –Ω–µ—Ç"
        fi
        
        local v1alpha1_addressgroups=$(kubectl get addressgroups.v1alpha1.netguard.sgroups.io -A 2>/dev/null | tail -n +2 | wc -l || echo "0")
        if [ "$v1alpha1_addressgroups" -gt 0 ]; then
            echo "  üì¶ AddressGroups ($v1alpha1_addressgroups):"
            kubectl get addressgroups.v1alpha1.netguard.sgroups.io -A | head -4
        else
            echo "  üì¶ AddressGroups: –Ω–µ—Ç"
        fi
    fi
}

# Performance comparison
performance_comparison() {
    log_section "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    if [ "$AGGREGATION_AVAILABLE" = true ] && [ "$CRD_AVAILABLE" = true ]; then
        log_info "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
        
        # Test v1beta1 performance
        log_implementation "üî∏ v1beta1 (Aggregation Layer):"
        test_performance_v1beta1
        
        # Test v1alpha1 performance
        log_implementation "üî∏ v1alpha1 (CRD):"
        test_performance_v1alpha1
    else
        log_warning "‚ö† –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –æ–±–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
    fi
}

test_performance_v1beta1() {
    local start_time=$(date +%s%N)
    local operations=5
    local successful=0
    
    for i in $(seq 1 $operations); do
        if cat <<EOF | kubectl apply -f - &>/dev/null
apiVersion: netguard.sgroups.io/v1beta1
kind: Service
metadata:
  name: perf-v1beta1-$i
  namespace: netguard-system
spec:
  description: "Performance test v1beta1 $i"
  ingressPorts:
  - protocol: TCP
    port: "$((8000 + i))"
EOF
        then
            if kubectl delete services.v1beta1.netguard.sgroups.io "perf-v1beta1-$i" -n netguard-system &>/dev/null; then
                successful=$((successful + 1))
            fi
        fi
    done
    
    local end_time=$(date +%s%N)
    local duration_ms=$(( (end_time - start_time) / 1000000 ))
    
    echo "  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: $successful/$operations –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${duration_ms}ms"
}

test_performance_v1alpha1() {
    local start_time=$(date +%s%N)
    local operations=5
    local successful=0
    
    for i in $(seq 1 $operations); do
        if cat <<EOF | kubectl apply -f - &>/dev/null
apiVersion: netguard.sgroups.io/v1alpha1
kind: Service
metadata:
  name: perf-v1alpha1-$i
  namespace: netguard-system
spec:
  description: "Performance test v1alpha1 $i"
  ingressPorts:
  - protocol: TCP
    port: "$((8000 + i))"
EOF
        then
            if kubectl delete services.v1alpha1.netguard.sgroups.io "perf-v1alpha1-$i" -n netguard-system &>/dev/null; then
                successful=$((successful + 1))
            fi
        fi
    done
    
    local end_time=$(date +%s%N)
    local duration_ms=$(( (end_time - start_time) / 1000000 ))
    
    echo "  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: $successful/$operations –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${duration_ms}ms"
}

# Generate recommendations
generate_recommendations() {
    log_section "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞:"
    
    if [ "$AGGREGATION_AVAILABLE" = true ] && [ "$CRD_AVAILABLE" = true ]; then
        log_warning "‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –û–ë–ï —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        echo "1. üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"
        echo "2. üéØ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Aggregation Layer —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ v1beta1"
        echo "3. üßπ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
        echo ""
        echo "üìö –†–∞–∑–ª–∏—á–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π:"
        echo "  - v1alpha1 (CRD): –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è K8s —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ CustomResourceDefinitions"
        echo "  - v1beta1 (Aggregation): –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ API Server —á–µ—Ä–µ–∑ Aggregation Layer"
        echo ""
        echo "üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:"
        echo "  # –£–¥–∞–ª–∏—Ç—å CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é:"
        echo "  kubectl delete crd \$(kubectl get crd | grep netguard | awk '{print \$1}')"
        echo "  # –£–¥–∞–ª–∏—Ç—å Aggregation Layer:"
        echo "  kubectl delete apiservice v1beta1.netguard.sgroups.io"
        
    elif [ "$AGGREGATION_AVAILABLE" = true ]; then
        log_success "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ Aggregation Layer —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1beta1)"
        echo "1. üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ v1beta1"
        echo "2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./test-complete.sh –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        
    elif [ "$CRD_AVAILABLE" = true ]; then
        log_info "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1alpha1)"
        echo "1. ‚ö° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Aggregation Layer —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ v1beta1"
        echo "2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy-complete.sh –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Aggregation Layer"
        
    else
        log_warning "‚ùå Netguard —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo "1. üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ Aggregation Layer: ./deploy-complete.sh"
        echo "2. üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ./analyze-current-state.sh"
    fi
    
    echo ""
    echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  ./analyze-current-state.sh     # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    echo "  ./deploy-complete.sh           # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Aggregation Layer"
    echo "  ./test-complete.sh             # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v1beta1"
    echo "  ./compare-implementations.sh   # –≠—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–ø–æ–≤—Ç–æ—Ä–Ω–æ)"
}

# Main function
main() {
    echo "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π Netguard"
    echo "================================"
    echo "v1alpha1 (CRD) vs v1beta1 (Aggregation Layer)"
    echo "–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: $(date)"
    echo ""
    
    check_implementations
    compare_api_resources
    show_existing_resources
    test_crud_comparison
    performance_comparison
    generate_recommendations
    
    echo -e "\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# Handle script arguments
case "${1:-compare}" in
    compare)
        main
        ;;
    check)
        check_implementations
        ;;
    api)
        compare_api_resources
        ;;
    resources)
        show_existing_resources
        ;;
    crud)
        check_implementations
        test_crud_comparison
        ;;
    performance)
        check_implementations
        performance_comparison
        ;;
    recommendations)
        check_implementations
        generate_recommendations
        ;;
    help|*)
        echo "Usage: $0 [compare|check|api|resources|crud|performance|recommendations|help]"
        echo ""
        echo "Commands:"
        echo "  compare        - –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  check          - –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π"
        echo "  api            - –¢–æ–ª—å–∫–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ API —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  resources      - –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  crud           - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"
        echo "  performance    - –¢–æ–ª—å–∫–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        echo "  recommendations - –¢–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        echo "  help           - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
esac 