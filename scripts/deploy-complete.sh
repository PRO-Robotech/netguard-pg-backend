#!/bin/bash

# Complete deployment script for Netguard Platform
# –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ netguard –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ Kubernetes

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
NAMESPACE="netguard-system"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prereqs() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        log_error "docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # Check if connected to kubernetes cluster
    if ! kubectl cluster-info &> /dev/null; then
        log_error "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É"
        exit 1
    fi
    
    CLUSTER_NAME=$(kubectl config current-context)
    log_info "–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–ª–∞—Å—Ç–µ—Ä—É: $CLUSTER_NAME"
    
    # Check if this is minikube
    if echo "$CLUSTER_NAME" | grep -q "minikube"; then
        MINIKUBE_DETECTED=true
        log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω minikube –∫–ª–∞—Å—Ç–µ—Ä"
    else
        MINIKUBE_DETECTED=false
        log_warning "–ù–µ minikube –∫–ª–∞—Å—Ç–µ—Ä - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã"
    fi
    
    log_success "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# Clean previous deployments
cleanup_previous() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π..."
    
    # Remove old deployments
    kubectl delete namespace "$NAMESPACE" --ignore-not-found=true --timeout=60s
    
    # Clean up APIService if exists
    kubectl delete apiservice v1beta1.netguard.sgroups.io --ignore-not-found=true
    
    # Clean up webhooks if exist
    kubectl delete validatingwebhookconfigurations netguard-validator --ignore-not-found=true
    kubectl delete mutatingwebhookconfigurations netguard-mutator --ignore-not-found=true
    
    # Remove any resources that might be stuck
    kubectl delete -k "$PROJECT_ROOT/config/k8s" --ignore-not-found=true --timeout=60s || true
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏..."
    sleep 15
    
    log_success "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã"
}

# Create namespace with proper labels
create_namespace() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ namespace: $NAMESPACE"
    
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: $NAMESPACE
  labels:
    app.kubernetes.io/name: netguard
    app.kubernetes.io/part-of: netguard-platform
    app.kubernetes.io/managed-by: netguard-deploy-script
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted  
    pod-security.kubernetes.io/warn: restricted
  annotations:
    netguard.sgroups.io/deployment-time: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    netguard.sgroups.io/deployed-by: "$(whoami)"
EOF
    
    log_success "Namespace $NAMESPACE —Å–æ–∑–¥–∞–Ω"
}

# Generate K8s code
generate_code() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Kubernetes –∫–æ–¥–∞..."
    cd "$PROJECT_ROOT"
    
    if make generate-k8s; then
        log_success "Kubernetes –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"
        exit 1
    fi
}

# Build images
build_images() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    cd "$PROJECT_ROOT"
    
    # Build API server image
    if make docker-build-k8s-apiserver; then
        log_success "API Server –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ API Server –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
    
    # Build backend image if Makefile target exists
    if make docker-build 2>/dev/null; then
        log_success "Backend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
    else
        log_warning "Backend –æ–±—Ä–∞–∑ –Ω–µ —Å–æ–±—Ä–∞–Ω (target –Ω–µ –Ω–∞–π–¥–µ–Ω)"
    fi
    
    # Load images to minikube if detected
    if [ "$MINIKUBE_DETECTED" = true ]; then
        log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ minikube..."
        
        # Load images into minikube
        if command -v minikube &> /dev/null; then
            minikube image load netguard/k8s-apiserver:latest 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å k8s-apiserver –æ–±—Ä–∞–∑"
            minikube image load netguard/pg-backend:latest 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å pg-backend –æ–±—Ä–∞–∑"
            log_success "–û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ minikube"
        fi
    fi
}

# Deploy to Kubernetes
deploy_k8s() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes..."
    cd "$PROJECT_ROOT"
    
    # Apply all configurations
    if kubectl apply -k config/k8s/; then
        log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
        exit 1
    fi
}

# Wait for deployments
wait_for_ready() {
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π..."
    
    # Wait for API server
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ netguard-apiserver..."
    if kubectl wait --for=condition=available --timeout=300s deployment/netguard-apiserver -n "$NAMESPACE"; then
        log_success "netguard-apiserver –≥–æ—Ç–æ–≤"
    else
        log_error "Timeout –æ–∂–∏–¥–∞–Ω–∏—è netguard-apiserver"
        kubectl describe deployment/netguard-apiserver -n "$NAMESPACE"
        exit 1
    fi
    
    # Wait for backend
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ netguard-backend..."
    if kubectl wait --for=condition=available --timeout=300s deployment/netguard-backend -n "$NAMESPACE"; then
        log_success "netguard-backend –≥–æ—Ç–æ–≤"
    else
        log_error "Timeout –æ–∂–∏–¥–∞–Ω–∏—è netguard-backend"
        kubectl describe deployment/netguard-backend -n "$NAMESPACE"
        exit 1
    fi
    
    # Additional wait for API registration
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API..."
    sleep 30
    
    # Check APIService status (v1beta1 for Aggregation Layer)
    if kubectl get apiservice v1beta1.netguard.sgroups.io -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' | grep -q "True"; then
        log_success "v1beta1.netguard.sgroups.io (Aggregation Layer) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "v1beta1.netguard.sgroups.io (Aggregation Layer) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤"
        kubectl describe apiservice v1beta1.netguard.sgroups.io
        
        # Check if CRD version exists
        if kubectl get crd | grep -q netguard; then
            log_info "‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CRD —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (v1alpha1), –Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º Aggregation Layer (v1beta1)"
        fi
    fi
}

# Show deployment status
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    echo "======================"
    
    echo -e "\nüì¶ –ü–æ–¥—ã –≤ namespace $NAMESPACE:"
    kubectl get pods -n "$NAMESPACE" -o wide
    
    echo -e "\nüîå –°–µ—Ä–≤–∏—Å—ã –≤ namespace $NAMESPACE:"
    kubectl get services -n "$NAMESPACE"
    
    echo -e "\nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ namespace $NAMESPACE:"
    kubectl get deployments -n "$NAMESPACE"
    
    echo -e "\nüîó APIService —Å—Ç–∞—Ç—É—Å:"
    kubectl get apiservice v1beta1.netguard.sgroups.io
    
    echo -e "\nüéØ API —Ä–µ—Å—É—Ä—Å—ã netguard:"
    kubectl api-resources --api-group=netguard.sgroups.io 2>/dev/null || log_warning "API –≥—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    echo -e "\nüìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  kubectl get all -n $NAMESPACE"
    echo "  kubectl logs -f deployment/netguard-apiserver -n $NAMESPACE"
    echo "  kubectl logs -f deployment/netguard-backend -n $NAMESPACE"
    echo "  kubectl port-forward service/netguard-apiserver 8443:443 -n $NAMESPACE"
}

# Create quick test resource
create_test_resource() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    
    sleep 10  # Wait a bit more for API to be fully ready
    
cat <<EOF | kubectl apply -f - || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å"
apiVersion: netguard.sgroups.io/v1beta1
kind: Service
metadata:
  name: deployment-test-service
  namespace: $NAMESPACE
spec:
  description: "Test service created during Aggregation Layer deployment (v1beta1)"
  ingressPorts:
  - protocol: TCP
    port: "80"
    description: "HTTP port"
EOF
    
    if kubectl get services.v1beta1.netguard.sgroups.io deployment-test-service -n "$NAMESPACE" &>/dev/null; then
        log_success "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å v1beta1 (Aggregation Layer) —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
        kubectl delete services.v1beta1.netguard.sgroups.io deployment-test-service -n "$NAMESPACE" &>/dev/null || true
        log_info "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å v1beta1 –æ—á–∏—â–µ–Ω"
    else
        log_warning "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å v1beta1 –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
    fi
}

# Main deployment function
main() {
    echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Netguard Platform"
    echo "=================================="
    echo "Namespace: $NAMESPACE"
    echo "Project: $PROJECT_ROOT"
    echo ""
    
    check_prereqs
    cleanup_previous
    create_namespace
    generate_code
    build_images
    deploy_k8s
    wait_for_ready
    create_test_resource
    
    log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    show_status
    echo ""
    echo "üß™ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "   ./scripts/test-complete.sh"
}

# Handle script arguments
case "${1:-deploy}" in
    deploy)
        main
        ;;
    cleanup)
        check_prereqs
        cleanup_previous
        log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        ;;
    status)
        show_status
        ;;
    help|*)
        echo "Usage: $0 [deploy|cleanup|status|help]"
        echo ""
        echo "Commands:"
        echo "  deploy  - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  cleanup - –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π"
        echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
        echo "  help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
esac 