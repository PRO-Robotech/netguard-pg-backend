#!/usr/bin/env bash

# Universal helper for Kubernetes code-generation (deepcopy, clientset, listers, informers, OpenAPI).
# ---------------------------------------------------------------------------
# This script is intended to work in *any* Go module that follows the usual
# controller-runtime / code-generator layout.  All project-specific values are
# supplied via environment variables or detected automatically; nothing is
# hard-coded to a particular repository structure.
#
# USAGE (minimal):
#   API_DIR=internal/apis ./hack/universal-codegen.sh
#
# Common environment variables / flags:
#   API_DIR          Directory that contains group/version API packages      (required)
#   OUTPUT_PKG       Go import path for the generated client code            (default: "${MODULE_PATH}/pkg/k8s")
#   OUTPUT_DIR       Filesystem path where generated code will be placed     (default: "$SCRIPT_ROOT/pkg/k8s")
#   MODULE_PATH      Go module path of the project                           (auto-detected via `go list -m`)
#   CODEGEN_VERSION  Version tag of k8s.io/code-generator module             (default: "v0.33.2")
#
# Example – generate code for APIs under internal/k8s/apis:
#   API_DIR=internal/k8s/apis OUTPUT_PKG=github.com/myorg/myrepo/pkg/k8s \
#   CODEGEN_VERSION=v0.33.2 ./hack/universal-codegen.sh
# ---------------------------------------------------------------------------

set -o errexit -o nounset -o pipefail

# Where this script lives → project root
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
SCRIPT_ROOT=$(cd "${SCRIPT_DIR}/.." && pwd)
cd "${SCRIPT_ROOT}"

# Detect module path if not provided
MODULE_PATH="${MODULE_PATH:-$(go list -m -f '{{.Path}}' 2>/dev/null)}"
if [[ -z "${MODULE_PATH}" ]]; then
  echo "MODULE_PATH could not be determined. Please set MODULE_PATH env var." >&2
  exit 1
fi

# Validate required parameter
if [[ -z "${API_DIR:-}" ]]; then
  echo "API_DIR env var must be set to the directory that contains API packages" >&2
  exit 1
fi

# Optional params with defaults
CODEGEN_VERSION="${CODEGEN_VERSION:-v0.33.2}"
OUTPUT_PKG="${OUTPUT_PKG:-${MODULE_PATH}/pkg/k8s}"
OUTPUT_DIR="${OUTPUT_DIR:-${SCRIPT_ROOT}/pkg/k8s}"

# Location of the kube_codegen.sh helper inside Go module cache
CODEGEN_PKG=$(go env GOPATH)/pkg/mod/k8s.io/code-generator@${CODEGEN_VERSION}
if [[ ! -f "${CODEGEN_PKG}/kube_codegen.sh" ]]; then
  echo "Error: kube_codegen.sh not found at ${CODEGEN_PKG}/kube_codegen.sh" >&2
  echo "Hint: ensure k8s.io/code-generator ${CODEGEN_VERSION} is downloaded (\`go mod download\`)." >&2
  exit 1
fi

echo "Using code-generator from: ${CODEGEN_PKG}"

env | sort | grep -E '^(API_DIR|OUTPUT_PKG|OUTPUT_DIR|MODULE_PATH|CODEGEN_VERSION)=' || true

autogenerated_notice() {
  cat <<'EOF'
// Code generated by universal-codegen.sh. DO NOT EDIT.
EOF
}

# shellcheck source=/dev/null
source "${CODEGEN_PKG}/kube_codegen.sh"

echo "=== deepcopy / client / lister / informer ==="
kube::codegen::gen_helpers \
  --boilerplate "${SCRIPT_DIR}/boilerplate.go.txt" \
  "${SCRIPT_ROOT}/${API_DIR}"

kube::codegen::gen_client \
  --with-watch \
  --output-dir "${OUTPUT_DIR}" \
  --output-pkg "${OUTPUT_PKG}" \
  --boilerplate "${SCRIPT_DIR}/boilerplate.go.txt" \
  "${SCRIPT_ROOT}/${API_DIR}"

# Optionally generate OpenAPI if openapi-gen is available and api resource packages exist
if [[ -z "${SKIP_OPENAPI:-}" ]]; then
  if command -v openapi-gen >/dev/null 2>&1; then
    echo "=== OpenAPI definitions ==="

    # Collect all versioned API packages (directories ending with /v1, /v1alpha1, /v1beta1 ...)
    VERSION_PKGS=$(go list "./${API_DIR}/..." | grep -E '/v[0-9]+(alpha|beta)?[0-9]*$' || true)

    if [[ -z "${VERSION_PKGS}" ]]; then
      echo "No versioned API packages found under ${API_DIR}; skipping OpenAPI generation" >&2
    else
      # Take the first version package as location for the generated file
      FIRST_PKG=$(echo "${VERSION_PKGS}" | head -n1)
      FIRST_DIR=$(go list -f '{{.Dir}}' "${FIRST_PKG}")

      openapi-gen \
        --output-dir       "${FIRST_DIR}" \
        --output-pkg       "${FIRST_PKG}" \
        --output-file      zz_generated.openapi.go \
        --go-header-file   "${SCRIPT_DIR}/boilerplate.go.txt" \
        ${VERSION_PKGS} \
        k8s.io/apimachinery/pkg/apis/meta/v1 \
        k8s.io/apimachinery/pkg/version \
        k8s.io/apimachinery/pkg/runtime \
        k8s.io/apimachinery/pkg/runtime/schema \
        k8s.io/apimachinery/pkg/api/resource
    fi
  else
    echo "openapi-gen not found in PATH – skipping OpenAPI generation" >&2
  fi
else
  echo "SKIP_OPENAPI is set – skipping OpenAPI generation" >&2
fi

echo ">>> Code-generation completed successfully" 