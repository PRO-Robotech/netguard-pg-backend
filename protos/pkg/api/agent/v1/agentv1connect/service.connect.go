// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/service.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/PRO-Robotech/protos/pkg/api/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "hbf.v1.agent.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceGetAgentRegistrationProcedure is the fully-qualified name of the AgentService's
	// GetAgentRegistration RPC.
	AgentServiceGetAgentRegistrationProcedure = "/hbf.v1.agent.AgentService/GetAgentRegistration"
)

// AgentServiceClient is a client for the hbf.v1.agent.AgentService service.
type AgentServiceClient interface {
	GetAgentRegistration(context.Context, *connect.Request[v1.RegInfoReq]) (*connect.Response[v1.RegInfo], error)
}

// NewAgentServiceClient constructs a client for the hbf.v1.agent.AgentService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentServiceMethods := v1.File_agent_v1_service_proto.Services().ByName("AgentService").Methods()
	return &agentServiceClient{
		getAgentRegistration: connect.NewClient[v1.RegInfoReq, v1.RegInfo](
			httpClient,
			baseURL+AgentServiceGetAgentRegistrationProcedure,
			connect.WithSchema(agentServiceMethods.ByName("GetAgentRegistration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	getAgentRegistration *connect.Client[v1.RegInfoReq, v1.RegInfo]
}

// GetAgentRegistration calls hbf.v1.agent.AgentService.GetAgentRegistration.
func (c *agentServiceClient) GetAgentRegistration(ctx context.Context, req *connect.Request[v1.RegInfoReq]) (*connect.Response[v1.RegInfo], error) {
	return c.getAgentRegistration.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the hbf.v1.agent.AgentService service.
type AgentServiceHandler interface {
	GetAgentRegistration(context.Context, *connect.Request[v1.RegInfoReq]) (*connect.Response[v1.RegInfo], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceMethods := v1.File_agent_v1_service_proto.Services().ByName("AgentService").Methods()
	agentServiceGetAgentRegistrationHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentRegistrationProcedure,
		svc.GetAgentRegistration,
		connect.WithSchema(agentServiceMethods.ByName("GetAgentRegistration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hbf.v1.agent.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceGetAgentRegistrationProcedure:
			agentServiceGetAgentRegistrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) GetAgentRegistration(context.Context, *connect.Request[v1.RegInfoReq]) (*connect.Response[v1.RegInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hbf.v1.agent.AgentService.GetAgentRegistration is not implemented"))
}
