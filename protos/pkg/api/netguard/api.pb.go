// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: api/netguard/api.proto

package netguard

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Traffic int32

const (
	Traffic_Ingress Traffic = 0
	Traffic_Egress  Traffic = 1
)

// Enum value maps for Traffic.
var (
	Traffic_name = map[int32]string{
		0: "Ingress",
		1: "Egress",
	}
	Traffic_value = map[string]int32{
		"Ingress": 0,
		"Egress":  1,
	}
)

func (x Traffic) Enum() *Traffic {
	p := new(Traffic)
	*p = x
	return p
}

func (x Traffic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Traffic) Descriptor() protoreflect.EnumDescriptor {
	return file_api_netguard_api_proto_enumTypes[0].Descriptor()
}

func (Traffic) Type() protoreflect.EnumType {
	return &file_api_netguard_api_proto_enumTypes[0]
}

func (x Traffic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Traffic.Descriptor instead.
func (Traffic) EnumDescriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{0}
}

// RuleAction - action for rules and address groups
type RuleAction int32

const (
	// UNDEFINED - undefined action (should not be used)
	RuleAction_UNDEFINED RuleAction = 0
	// DROP - drops network packet
	RuleAction_DROP RuleAction = 1
	// ACCEPT - accepts network packet
	RuleAction_ACCEPT RuleAction = 2
)

// Enum value maps for RuleAction.
var (
	RuleAction_name = map[int32]string{
		0: "UNDEFINED",
		1: "DROP",
		2: "ACCEPT",
	}
	RuleAction_value = map[string]int32{
		"UNDEFINED": 0,
		"DROP":      1,
		"ACCEPT":    2,
	}
)

func (x RuleAction) Enum() *RuleAction {
	p := new(RuleAction)
	*p = x
	return p
}

func (x RuleAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_netguard_api_proto_enumTypes[1].Descriptor()
}

func (RuleAction) Type() protoreflect.EnumType {
	return &file_api_netguard_api_proto_enumTypes[1]
}

func (x RuleAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleAction.Descriptor instead.
func (RuleAction) EnumDescriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{1}
}

// SyncOp - sync operation type
type SyncOp int32

const (
	// NoOp - no operation defined (default)
	SyncOp_NoOp SyncOp = 0
	// FullSync - Delete+Insert+Update operations (default)
	SyncOp_FullSync SyncOp = 1
	// Upsert - Insert+Update operations
	SyncOp_Upsert SyncOp = 2
	// Delete - Delete operation
	SyncOp_Delete SyncOp = 3
)

// Enum value maps for SyncOp.
var (
	SyncOp_name = map[int32]string{
		0: "NoOp",
		1: "FullSync",
		2: "Upsert",
		3: "Delete",
	}
	SyncOp_value = map[string]int32{
		"NoOp":     0,
		"FullSync": 1,
		"Upsert":   2,
		"Delete":   3,
	}
)

func (x SyncOp) Enum() *SyncOp {
	p := new(SyncOp)
	*p = x
	return p
}

func (x SyncOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncOp) Descriptor() protoreflect.EnumDescriptor {
	return file_api_netguard_api_proto_enumTypes[2].Descriptor()
}

func (SyncOp) Type() protoreflect.EnumType {
	return &file_api_netguard_api_proto_enumTypes[2]
}

func (x SyncOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncOp.Descriptor instead.
func (SyncOp) EnumDescriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{2}
}

type Networks_NetIP_Transport int32

const (
	Networks_NetIP_TCP Networks_NetIP_Transport = 0
	Networks_NetIP_UDP Networks_NetIP_Transport = 1
)

// Enum value maps for Networks_NetIP_Transport.
var (
	Networks_NetIP_Transport_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	Networks_NetIP_Transport_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x Networks_NetIP_Transport) Enum() *Networks_NetIP_Transport {
	p := new(Networks_NetIP_Transport)
	*p = x
	return p
}

func (x Networks_NetIP_Transport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Networks_NetIP_Transport) Descriptor() protoreflect.EnumDescriptor {
	return file_api_netguard_api_proto_enumTypes[3].Descriptor()
}

func (Networks_NetIP_Transport) Type() protoreflect.EnumType {
	return &file_api_netguard_api_proto_enumTypes[3]
}

func (x Networks_NetIP_Transport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Networks_NetIP_Transport.Descriptor instead.
func (Networks_NetIP_Transport) EnumDescriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Temporary definitions for common types to avoid import issues
type Networks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Networks) Reset() {
	*x = Networks{}
	mi := &file_api_netguard_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Networks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networks) ProtoMessage() {}

func (x *Networks) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networks.ProtoReflect.Descriptor instead.
func (*Networks) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{0}
}

// Service - represents a service with ports
type Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelfRef       *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IngressPorts  []*IngressPort         `protobuf:"bytes,4,rep,name=ingress_ports,json=ingressPorts,proto3" json:"ingress_ports,omitempty"`
	AddressGroups []*AddressGroupRef     `protobuf:"bytes,5,rep,name=address_groups,json=addressGroups,proto3" json:"address_groups,omitempty"`
	Meta          *Meta                  `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_api_netguard_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{1}
}

func (x *Service) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *Service) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Service) GetIngressPorts() []*IngressPort {
	if x != nil {
		return x.IngressPorts
	}
	return nil
}

func (x *Service) GetAddressGroups() []*AddressGroupRef {
	if x != nil {
		return x.AddressGroups
	}
	return nil
}

func (x *Service) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// IngressPort - defines a port configuration for ingress traffic
type IngressPort struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Protocol      Networks_NetIP_Transport `protobuf:"varint,1,opt,name=protocol,proto3,enum=netguard.v1.Networks_NetIP_Transport" json:"protocol,omitempty"`
	Port          string                   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Description   string                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressPort) Reset() {
	*x = IngressPort{}
	mi := &file_api_netguard_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPort) ProtoMessage() {}

func (x *IngressPort) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPort.ProtoReflect.Descriptor instead.
func (*IngressPort) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{2}
}

func (x *IngressPort) GetProtocol() Networks_NetIP_Transport {
	if x != nil {
		return x.Protocol
	}
	return Networks_NetIP_TCP
}

func (x *IngressPort) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *IngressPort) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ResourceIdentifier - uniquely identifies a resource
type ResourceIdentifier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceIdentifier) Reset() {
	*x = ResourceIdentifier{}
	mi := &file_api_netguard_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIdentifier) ProtoMessage() {}

func (x *ResourceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIdentifier.ProtoReflect.Descriptor instead.
func (*ResourceIdentifier) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceIdentifier) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// ObjectReference contains enough information to let you locate the referenced object
type ObjectReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion of the referenced object
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Kind of the referenced object
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the referenced object
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectReference) Reset() {
	*x = ObjectReference{}
	mi := &file_api_netguard_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReference) ProtoMessage() {}

func (x *ObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReference.ProtoReflect.Descriptor instead.
func (*ObjectReference) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{4}
}

func (x *ObjectReference) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ObjectReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// NamespacedObjectReference extends ObjectReference with a Namespace field
type NamespacedObjectReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion of the referenced object
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Kind of the referenced object
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the referenced object
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the referenced object
	Namespace     string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespacedObjectReference) Reset() {
	*x = NamespacedObjectReference{}
	mi := &file_api_netguard_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespacedObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacedObjectReference) ProtoMessage() {}

func (x *NamespacedObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacedObjectReference.ProtoReflect.Descriptor instead.
func (*NamespacedObjectReference) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{5}
}

func (x *NamespacedObjectReference) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *NamespacedObjectReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NamespacedObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespacedObjectReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Condition - kubernetes condition for resource status
type Condition struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Type               string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ObservedGeneration int64                  `protobuf:"varint,3,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	Reason             string                 `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message            string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_api_netguard_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{6}
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Condition) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *Condition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *Condition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Condition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ManagedFieldsEntry represents a single entry in the managedFields list
// Compatible with k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry
type ManagedFieldsEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Manager is an identifier of the workflow managing these fields
	Manager string `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created
	// Possible values: "Apply", "Update"
	Operation string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	// APIVersion defines the version of this resource
	ApiVersion string `protobuf:"bytes,3,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Time is the timestamp of when the ManagedFields entry was added
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// FieldsType is the discriminator for the different fields format
	FieldsType string `protobuf:"bytes,5,opt,name=fields_type,json=fieldsType,proto3" json:"fields_type,omitempty"`
	// FieldsV1 stores a set of fields in a data structure like Patch
	// Serialized as JSON bytes for compatibility
	FieldsV1 []byte `protobuf:"bytes,6,opt,name=fields_v1,json=fieldsV1,proto3" json:"fields_v1,omitempty"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource
	Subresource   string `protobuf:"bytes,7,opt,name=subresource,proto3" json:"subresource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagedFieldsEntry) Reset() {
	*x = ManagedFieldsEntry{}
	mi := &file_api_netguard_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedFieldsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedFieldsEntry) ProtoMessage() {}

func (x *ManagedFieldsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedFieldsEntry.ProtoReflect.Descriptor instead.
func (*ManagedFieldsEntry) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{7}
}

func (x *ManagedFieldsEntry) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *ManagedFieldsEntry) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *ManagedFieldsEntry) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ManagedFieldsEntry) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ManagedFieldsEntry) GetFieldsType() string {
	if x != nil {
		return x.FieldsType
	}
	return ""
}

func (x *ManagedFieldsEntry) GetFieldsV1() []byte {
	if x != nil {
		return x.FieldsV1
	}
	return nil
}

func (x *ManagedFieldsEntry) GetSubresource() string {
	if x != nil {
		return x.Subresource
	}
	return ""
}

// Meta - kubernetes system metadata stored round-trip.
type Meta struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Uid             string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ResourceVersion string                 `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Generation      int64                  `protobuf:"varint,3,opt,name=generation,proto3" json:"generation,omitempty"`
	CreationTs      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_ts,json=creationTs,proto3" json:"creation_ts,omitempty"`
	Labels          map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations     map[string]string      `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Status management - формируется Backend, отображается в Status клиентам
	Conditions         []*Condition `protobuf:"bytes,7,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ObservedGeneration int64        `protobuf:"varint,8,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// GeneratedName is an optional prefix, used by the server, to generate a unique name
	// ONLY IF the Name field has not been provided. Stored for round-trip compatibility.
	GeneratedName string `protobuf:"bytes,9,opt,name=generated_name,json=generatedName,proto3" json:"generated_name,omitempty"`
	// ManagedFields stores Server-Side Apply field ownership information
	// Compatible with k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry
	ManagedFields []*ManagedFieldsEntry `protobuf:"bytes,10,rep,name=managed_fields,json=managedFields,proto3" json:"managed_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_api_netguard_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{8}
}

func (x *Meta) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Meta) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *Meta) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Meta) GetCreationTs() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTs
	}
	return nil
}

func (x *Meta) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Meta) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Meta) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Meta) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *Meta) GetGeneratedName() string {
	if x != nil {
		return x.GeneratedName
	}
	return ""
}

func (x *Meta) GetManagedFields() []*ManagedFieldsEntry {
	if x != nil {
		return x.ManagedFields
	}
	return nil
}

// AddressGroupRef - reference to an address group
type AddressGroupRef struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Identifier    *ResourceIdentifier        `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                // DEPRECATED: Use object_ref instead
	ObjectRef     *NamespacedObjectReference `protobuf:"bytes,2,opt,name=object_ref,json=objectRef,proto3" json:"object_ref,omitempty"` // NEW: Full object reference with apiVersion, kind and namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressGroupRef) Reset() {
	*x = AddressGroupRef{}
	mi := &file_api_netguard_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupRef) ProtoMessage() {}

func (x *AddressGroupRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupRef.ProtoReflect.Descriptor instead.
func (*AddressGroupRef) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{9}
}

func (x *AddressGroupRef) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AddressGroupRef) GetObjectRef() *NamespacedObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

// ServiceRef - reference to a service
type ServiceRef struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Identifier    *ResourceIdentifier        `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                // DEPRECATED: Use object_ref instead
	ObjectRef     *NamespacedObjectReference `protobuf:"bytes,2,opt,name=object_ref,json=objectRef,proto3" json:"object_ref,omitempty"` // NEW: Full object reference with apiVersion, kind and namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceRef) Reset() {
	*x = ServiceRef{}
	mi := &file_api_netguard_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRef) ProtoMessage() {}

func (x *ServiceRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRef.ProtoReflect.Descriptor instead.
func (*ServiceRef) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceRef) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ServiceRef) GetObjectRef() *NamespacedObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

// NetworkItem - represents a network item in an address group
type NetworkItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cidr          string                 `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	ApiVersion    string                 `protobuf:"bytes,3,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Kind          string                 `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Namespace     string                 `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkItem) Reset() {
	*x = NetworkItem{}
	mi := &file_api_netguard_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkItem) ProtoMessage() {}

func (x *NetworkItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkItem.ProtoReflect.Descriptor instead.
func (*NetworkItem) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkItem) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *NetworkItem) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *NetworkItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NetworkItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Network - represents a network configuration for Netguard
type Network struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	SelfRef *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	Cidr    string                 `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"` // Network in CIDR notation
	Meta    *Meta                  `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// Status fields
	IsBound         bool                       `protobuf:"varint,4,opt,name=is_bound,json=isBound,proto3" json:"is_bound,omitempty"`                          // Whether the network is bound to an AddressGroup
	BindingRef      *ObjectReference           `protobuf:"bytes,5,opt,name=binding_ref,json=bindingRef,proto3" json:"binding_ref,omitempty"`                  // Reference to the NetworkBinding
	AddressGroupRef *NamespacedObjectReference `protobuf:"bytes,6,opt,name=address_group_ref,json=addressGroupRef,proto3" json:"address_group_ref,omitempty"` // Reference to the bound AddressGroup
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Network) Reset() {
	*x = Network{}
	mi := &file_api_netguard_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{12}
}

func (x *Network) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *Network) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *Network) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Network) GetIsBound() bool {
	if x != nil {
		return x.IsBound
	}
	return false
}

func (x *Network) GetBindingRef() *ObjectReference {
	if x != nil {
		return x.BindingRef
	}
	return nil
}

func (x *Network) GetAddressGroupRef() *NamespacedObjectReference {
	if x != nil {
		return x.AddressGroupRef
	}
	return nil
}

// AddressGroup - represents an address group configuration for Netguard
type AddressGroup struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SelfRef          *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	DefaultAction    RuleAction             `protobuf:"varint,2,opt,name=default_action,json=defaultAction,proto3,enum=netguard.v1.RuleAction" json:"default_action,omitempty"` // Default action for the address group (ACCEPT/DROP)
	Logs             bool                   `protobuf:"varint,3,opt,name=logs,proto3" json:"logs,omitempty"`                                                                    // Whether to enable logs
	Trace            bool                   `protobuf:"varint,4,opt,name=trace,proto3" json:"trace,omitempty"`                                                                  // Whether to enable trace
	Networks         []*NetworkItem         `protobuf:"bytes,5,rep,name=networks,proto3" json:"networks,omitempty"`                                                             // Networks associated with this address group
	Meta             *Meta                  `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	AddressGroupName string                 `protobuf:"bytes,7,opt,name=address_group_name,json=addressGroupName,proto3" json:"address_group_name,omitempty"` // Computed address group name (e.g., "namespace/name")
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddressGroup) Reset() {
	*x = AddressGroup{}
	mi := &file_api_netguard_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroup) ProtoMessage() {}

func (x *AddressGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroup.ProtoReflect.Descriptor instead.
func (*AddressGroup) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{13}
}

func (x *AddressGroup) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *AddressGroup) GetDefaultAction() RuleAction {
	if x != nil {
		return x.DefaultAction
	}
	return RuleAction_UNDEFINED
}

func (x *AddressGroup) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *AddressGroup) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *AddressGroup) GetNetworks() []*NetworkItem {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *AddressGroup) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AddressGroup) GetAddressGroupName() string {
	if x != nil {
		return x.AddressGroupName
	}
	return ""
}

// AddressGroupBinding - binding between a service and an address group
type AddressGroupBinding struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SelfRef         *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	ServiceRef      *ServiceRef            `protobuf:"bytes,3,opt,name=service_ref,json=serviceRef,proto3" json:"service_ref,omitempty"`
	AddressGroupRef *AddressGroupRef       `protobuf:"bytes,4,opt,name=address_group_ref,json=addressGroupRef,proto3" json:"address_group_ref,omitempty"`
	Meta            *Meta                  `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddressGroupBinding) Reset() {
	*x = AddressGroupBinding{}
	mi := &file_api_netguard_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupBinding) ProtoMessage() {}

func (x *AddressGroupBinding) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupBinding.ProtoReflect.Descriptor instead.
func (*AddressGroupBinding) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{14}
}

func (x *AddressGroupBinding) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *AddressGroupBinding) GetServiceRef() *ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *AddressGroupBinding) GetAddressGroupRef() *AddressGroupRef {
	if x != nil {
		return x.AddressGroupRef
	}
	return nil
}

func (x *AddressGroupBinding) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// NetworkBinding - binding between a network and an address group
type NetworkBinding struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SelfRef         *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	NetworkRef      *ObjectReference       `protobuf:"bytes,2,opt,name=network_ref,json=networkRef,proto3" json:"network_ref,omitempty"`                  // Reference to the Network resource
	AddressGroupRef *ObjectReference       `protobuf:"bytes,3,opt,name=address_group_ref,json=addressGroupRef,proto3" json:"address_group_ref,omitempty"` // Reference to the AddressGroup resource
	NetworkItem     *NetworkItem           `protobuf:"bytes,4,opt,name=network_item,json=networkItem,proto3" json:"network_item,omitempty"`               // Network item details
	Meta            *Meta                  `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkBinding) Reset() {
	*x = NetworkBinding{}
	mi := &file_api_netguard_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkBinding) ProtoMessage() {}

func (x *NetworkBinding) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkBinding.ProtoReflect.Descriptor instead.
func (*NetworkBinding) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkBinding) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *NetworkBinding) GetNetworkRef() *ObjectReference {
	if x != nil {
		return x.NetworkRef
	}
	return nil
}

func (x *NetworkBinding) GetAddressGroupRef() *ObjectReference {
	if x != nil {
		return x.AddressGroupRef
	}
	return nil
}

func (x *NetworkBinding) GetNetworkItem() *NetworkItem {
	if x != nil {
		return x.NetworkItem
	}
	return nil
}

func (x *NetworkBinding) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// ProtocolPorts - mapping of protocols to port ranges
type ProtocolPorts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ports         map[string]*PortRanges `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolPorts) Reset() {
	*x = ProtocolPorts{}
	mi := &file_api_netguard_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolPorts) ProtoMessage() {}

func (x *ProtocolPorts) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolPorts.ProtoReflect.Descriptor instead.
func (*ProtocolPorts) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{16}
}

func (x *ProtocolPorts) GetPorts() map[string]*PortRanges {
	if x != nil {
		return x.Ports
	}
	return nil
}

// PortRange - range of ports
type PortRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         int32                  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           int32                  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	mi := &file_api_netguard_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{17}
}

func (x *PortRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PortRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

// PortRanges - list of port ranges
type PortRanges struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ranges        []*PortRange           `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortRanges) Reset() {
	*x = PortRanges{}
	mi := &file_api_netguard_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRanges) ProtoMessage() {}

func (x *PortRanges) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRanges.ProtoReflect.Descriptor instead.
func (*PortRanges) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{18}
}

func (x *PortRanges) GetRanges() []*PortRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// ServicePortsRef - reference to a service and its allowed ports
type ServicePortsRef struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Identifier    *ResourceIdentifier        `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                // DEPRECATED: Use object_ref instead
	ObjectRef     *NamespacedObjectReference `protobuf:"bytes,3,opt,name=object_ref,json=objectRef,proto3" json:"object_ref,omitempty"` // NEW: Full object reference with apiVersion, kind and namespace
	Ports         *ProtocolPorts             `protobuf:"bytes,2,opt,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServicePortsRef) Reset() {
	*x = ServicePortsRef{}
	mi := &file_api_netguard_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicePortsRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePortsRef) ProtoMessage() {}

func (x *ServicePortsRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePortsRef.ProtoReflect.Descriptor instead.
func (*ServicePortsRef) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{19}
}

func (x *ServicePortsRef) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ServicePortsRef) GetObjectRef() *NamespacedObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

func (x *ServicePortsRef) GetPorts() *ProtocolPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

// AddressGroupPortMapping - mapping between an address group and allowed ports
type AddressGroupPortMapping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelfRef       *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	AccessPorts   []*ServicePortsRef     `protobuf:"bytes,3,rep,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
	Meta          *Meta                  `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressGroupPortMapping) Reset() {
	*x = AddressGroupPortMapping{}
	mi := &file_api_netguard_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupPortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupPortMapping) ProtoMessage() {}

func (x *AddressGroupPortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupPortMapping.ProtoReflect.Descriptor instead.
func (*AddressGroupPortMapping) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{20}
}

func (x *AddressGroupPortMapping) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *AddressGroupPortMapping) GetAccessPorts() []*ServicePortsRef {
	if x != nil {
		return x.AccessPorts
	}
	return nil
}

func (x *AddressGroupPortMapping) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// ServiceAlias - alias for a service
type ServiceAlias struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelfRef       *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	ServiceRef    *ServiceRef            `protobuf:"bytes,2,opt,name=service_ref,json=serviceRef,proto3" json:"service_ref,omitempty"`
	Meta          *Meta                  `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceAlias) Reset() {
	*x = ServiceAlias{}
	mi := &file_api_netguard_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAlias) ProtoMessage() {}

func (x *ServiceAlias) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAlias.ProtoReflect.Descriptor instead.
func (*ServiceAlias) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{21}
}

func (x *ServiceAlias) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *ServiceAlias) GetServiceRef() *ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *ServiceAlias) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// AddressGroupBindingPolicy - policy allowing binding of a service to an address group
type AddressGroupBindingPolicy struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SelfRef         *ResourceIdentifier    `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	ServiceRef      *ServiceRef            `protobuf:"bytes,2,opt,name=service_ref,json=serviceRef,proto3" json:"service_ref,omitempty"`
	AddressGroupRef *AddressGroupRef       `protobuf:"bytes,3,opt,name=address_group_ref,json=addressGroupRef,proto3" json:"address_group_ref,omitempty"`
	Meta            *Meta                  `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddressGroupBindingPolicy) Reset() {
	*x = AddressGroupBindingPolicy{}
	mi := &file_api_netguard_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupBindingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupBindingPolicy) ProtoMessage() {}

func (x *AddressGroupBindingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupBindingPolicy.ProtoReflect.Descriptor instead.
func (*AddressGroupBindingPolicy) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{22}
}

func (x *AddressGroupBindingPolicy) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *AddressGroupBindingPolicy) GetServiceRef() *ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *AddressGroupBindingPolicy) GetAddressGroupRef() *AddressGroupRef {
	if x != nil {
		return x.AddressGroupRef
	}
	return nil
}

func (x *AddressGroupBindingPolicy) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// RuleS2S - rule between two services
type RuleS2S struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	SelfRef              *ResourceIdentifier          `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	Traffic              Traffic                      `protobuf:"varint,2,opt,name=traffic,proto3,enum=netguard.v1.Traffic" json:"traffic,omitempty"`
	ServiceLocalRef      *ServiceRef                  `protobuf:"bytes,3,opt,name=service_local_ref,json=serviceLocalRef,proto3" json:"service_local_ref,omitempty"`                    // Now uses NamespacedObjectReference internally
	ServiceRef           *ServiceRef                  `protobuf:"bytes,4,opt,name=service_ref,json=serviceRef,proto3" json:"service_ref,omitempty"`                                     // Now uses NamespacedObjectReference internally
	IeagAgRuleRefs       []*ResourceIdentifier        `protobuf:"bytes,5,rep,name=ieag_ag_rule_refs,json=ieagAgRuleRefs,proto3" json:"ieag_ag_rule_refs,omitempty"`                     // DEPRECATED: Use ieag_ag_rule_object_refs
	IeagAgRuleObjectRefs []*NamespacedObjectReference `protobuf:"bytes,8,rep,name=ieag_ag_rule_object_refs,json=ieagAgRuleObjectRefs,proto3" json:"ieag_ag_rule_object_refs,omitempty"` // NEW: Full object references
	Meta                 *Meta                        `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	Trace                bool                         `protobuf:"varint,7,opt,name=trace,proto3" json:"trace,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RuleS2S) Reset() {
	*x = RuleS2S{}
	mi := &file_api_netguard_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleS2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleS2S) ProtoMessage() {}

func (x *RuleS2S) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleS2S.ProtoReflect.Descriptor instead.
func (*RuleS2S) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{23}
}

func (x *RuleS2S) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *RuleS2S) GetTraffic() Traffic {
	if x != nil {
		return x.Traffic
	}
	return Traffic_Ingress
}

func (x *RuleS2S) GetServiceLocalRef() *ServiceRef {
	if x != nil {
		return x.ServiceLocalRef
	}
	return nil
}

func (x *RuleS2S) GetServiceRef() *ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *RuleS2S) GetIeagAgRuleRefs() []*ResourceIdentifier {
	if x != nil {
		return x.IeagAgRuleRefs
	}
	return nil
}

func (x *RuleS2S) GetIeagAgRuleObjectRefs() []*NamespacedObjectReference {
	if x != nil {
		return x.IeagAgRuleObjectRefs
	}
	return nil
}

func (x *RuleS2S) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RuleS2S) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

// IEAgAgRule - rule between two address groups
type IEAgAgRule struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	SelfRef           *ResourceIdentifier      `protobuf:"bytes,1,opt,name=self_ref,json=selfRef,proto3" json:"self_ref,omitempty"`
	Transport         Networks_NetIP_Transport `protobuf:"varint,2,opt,name=transport,proto3,enum=netguard.v1.Networks_NetIP_Transport" json:"transport,omitempty"`
	Traffic           Traffic                  `protobuf:"varint,3,opt,name=traffic,proto3,enum=netguard.v1.Traffic" json:"traffic,omitempty"`
	AddressGroupLocal *AddressGroupRef         `protobuf:"bytes,4,opt,name=address_group_local,json=addressGroupLocal,proto3" json:"address_group_local,omitempty"`
	AddressGroup      *AddressGroupRef         `protobuf:"bytes,5,opt,name=address_group,json=addressGroup,proto3" json:"address_group,omitempty"`
	Ports             []*PortSpec              `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	Action            RuleAction               `protobuf:"varint,7,opt,name=action,proto3,enum=netguard.v1.RuleAction" json:"action,omitempty"`
	Logs              bool                     `protobuf:"varint,8,opt,name=logs,proto3" json:"logs,omitempty"`
	Priority          int32                    `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	Meta              *Meta                    `protobuf:"bytes,10,opt,name=meta,proto3" json:"meta,omitempty"`
	Trace             bool                     `protobuf:"varint,11,opt,name=trace,proto3" json:"trace,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IEAgAgRule) Reset() {
	*x = IEAgAgRule{}
	mi := &file_api_netguard_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IEAgAgRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IEAgAgRule) ProtoMessage() {}

func (x *IEAgAgRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IEAgAgRule.ProtoReflect.Descriptor instead.
func (*IEAgAgRule) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{24}
}

func (x *IEAgAgRule) GetSelfRef() *ResourceIdentifier {
	if x != nil {
		return x.SelfRef
	}
	return nil
}

func (x *IEAgAgRule) GetTransport() Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return Networks_NetIP_TCP
}

func (x *IEAgAgRule) GetTraffic() Traffic {
	if x != nil {
		return x.Traffic
	}
	return Traffic_Ingress
}

func (x *IEAgAgRule) GetAddressGroupLocal() *AddressGroupRef {
	if x != nil {
		return x.AddressGroupLocal
	}
	return nil
}

func (x *IEAgAgRule) GetAddressGroup() *AddressGroupRef {
	if x != nil {
		return x.AddressGroup
	}
	return nil
}

func (x *IEAgAgRule) GetPorts() []*PortSpec {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *IEAgAgRule) GetAction() RuleAction {
	if x != nil {
		return x.Action
	}
	return RuleAction_UNDEFINED
}

func (x *IEAgAgRule) GetLogs() bool {
	if x != nil {
		return x.Logs
	}
	return false
}

func (x *IEAgAgRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *IEAgAgRule) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *IEAgAgRule) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

// PortSpec - port specification
type PortSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortSpec) Reset() {
	*x = PortSpec{}
	mi := &file_api_netguard_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpec) ProtoMessage() {}

func (x *PortSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpec.ProtoReflect.Descriptor instead.
func (*PortSpec) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{25}
}

func (x *PortSpec) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PortSpec) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

// SyncStatusResp - sync status
type SyncStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncStatusResp) Reset() {
	*x = SyncStatusResp{}
	mi := &file_api_netguard_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusResp) ProtoMessage() {}

func (x *SyncStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusResp.ProtoReflect.Descriptor instead.
func (*SyncStatusResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{26}
}

func (x *SyncStatusResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// SyncServices - subject of Services to sync
type SyncServices struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Services      []*Service             `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncServices) Reset() {
	*x = SyncServices{}
	mi := &file_api_netguard_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncServices) ProtoMessage() {}

func (x *SyncServices) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncServices.ProtoReflect.Descriptor instead.
func (*SyncServices) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{27}
}

func (x *SyncServices) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

// SyncAddressGroups - subject of Address Groups to sync
type SyncAddressGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressGroups []*AddressGroup        `protobuf:"bytes,1,rep,name=address_groups,json=addressGroups,proto3" json:"address_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAddressGroups) Reset() {
	*x = SyncAddressGroups{}
	mi := &file_api_netguard_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAddressGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAddressGroups) ProtoMessage() {}

func (x *SyncAddressGroups) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAddressGroups.ProtoReflect.Descriptor instead.
func (*SyncAddressGroups) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{28}
}

func (x *SyncAddressGroups) GetAddressGroups() []*AddressGroup {
	if x != nil {
		return x.AddressGroups
	}
	return nil
}

// SyncAddressGroupBindings - subject of Address Group Bindings to sync
type SyncAddressGroupBindings struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AddressGroupBindings []*AddressGroupBinding `protobuf:"bytes,1,rep,name=address_group_bindings,json=addressGroupBindings,proto3" json:"address_group_bindings,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SyncAddressGroupBindings) Reset() {
	*x = SyncAddressGroupBindings{}
	mi := &file_api_netguard_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAddressGroupBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAddressGroupBindings) ProtoMessage() {}

func (x *SyncAddressGroupBindings) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAddressGroupBindings.ProtoReflect.Descriptor instead.
func (*SyncAddressGroupBindings) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{29}
}

func (x *SyncAddressGroupBindings) GetAddressGroupBindings() []*AddressGroupBinding {
	if x != nil {
		return x.AddressGroupBindings
	}
	return nil
}

// SyncAddressGroupPortMappings - subject of Address Group Port Mappings to sync
type SyncAddressGroupPortMappings struct {
	state                    protoimpl.MessageState     `protogen:"open.v1"`
	AddressGroupPortMappings []*AddressGroupPortMapping `protobuf:"bytes,1,rep,name=address_group_port_mappings,json=addressGroupPortMappings,proto3" json:"address_group_port_mappings,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SyncAddressGroupPortMappings) Reset() {
	*x = SyncAddressGroupPortMappings{}
	mi := &file_api_netguard_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAddressGroupPortMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAddressGroupPortMappings) ProtoMessage() {}

func (x *SyncAddressGroupPortMappings) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAddressGroupPortMappings.ProtoReflect.Descriptor instead.
func (*SyncAddressGroupPortMappings) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{30}
}

func (x *SyncAddressGroupPortMappings) GetAddressGroupPortMappings() []*AddressGroupPortMapping {
	if x != nil {
		return x.AddressGroupPortMappings
	}
	return nil
}

// SyncRuleS2S - subject of Rule S2S to sync
type SyncRuleS2S struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleS2S       []*RuleS2S             `protobuf:"bytes,1,rep,name=rule_s2s,json=ruleS2s,proto3" json:"rule_s2s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncRuleS2S) Reset() {
	*x = SyncRuleS2S{}
	mi := &file_api_netguard_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRuleS2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRuleS2S) ProtoMessage() {}

func (x *SyncRuleS2S) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRuleS2S.ProtoReflect.Descriptor instead.
func (*SyncRuleS2S) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{31}
}

func (x *SyncRuleS2S) GetRuleS2S() []*RuleS2S {
	if x != nil {
		return x.RuleS2S
	}
	return nil
}

// SyncServiceAliases - subject of Service Aliases to sync
type SyncServiceAliases struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServiceAliases []*ServiceAlias        `protobuf:"bytes,1,rep,name=service_aliases,json=serviceAliases,proto3" json:"service_aliases,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SyncServiceAliases) Reset() {
	*x = SyncServiceAliases{}
	mi := &file_api_netguard_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncServiceAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncServiceAliases) ProtoMessage() {}

func (x *SyncServiceAliases) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncServiceAliases.ProtoReflect.Descriptor instead.
func (*SyncServiceAliases) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{32}
}

func (x *SyncServiceAliases) GetServiceAliases() []*ServiceAlias {
	if x != nil {
		return x.ServiceAliases
	}
	return nil
}

// SyncAddressGroupBindingPolicies - subject of Address Group Binding Policies to sync
type SyncAddressGroupBindingPolicies struct {
	state                       protoimpl.MessageState       `protogen:"open.v1"`
	AddressGroupBindingPolicies []*AddressGroupBindingPolicy `protobuf:"bytes,1,rep,name=address_group_binding_policies,json=addressGroupBindingPolicies,proto3" json:"address_group_binding_policies,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SyncAddressGroupBindingPolicies) Reset() {
	*x = SyncAddressGroupBindingPolicies{}
	mi := &file_api_netguard_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAddressGroupBindingPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAddressGroupBindingPolicies) ProtoMessage() {}

func (x *SyncAddressGroupBindingPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAddressGroupBindingPolicies.ProtoReflect.Descriptor instead.
func (*SyncAddressGroupBindingPolicies) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{33}
}

func (x *SyncAddressGroupBindingPolicies) GetAddressGroupBindingPolicies() []*AddressGroupBindingPolicy {
	if x != nil {
		return x.AddressGroupBindingPolicies
	}
	return nil
}

// SyncIEAgAgRules - subject of IEAgAgRules to sync
type SyncIEAgAgRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IeagagRules   []*IEAgAgRule          `protobuf:"bytes,1,rep,name=ieagag_rules,json=ieagagRules,proto3" json:"ieagag_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncIEAgAgRules) Reset() {
	*x = SyncIEAgAgRules{}
	mi := &file_api_netguard_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncIEAgAgRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIEAgAgRules) ProtoMessage() {}

func (x *SyncIEAgAgRules) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIEAgAgRules.ProtoReflect.Descriptor instead.
func (*SyncIEAgAgRules) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{34}
}

func (x *SyncIEAgAgRules) GetIeagagRules() []*IEAgAgRule {
	if x != nil {
		return x.IeagagRules
	}
	return nil
}

// SyncNetworks - subject of Networks to sync
type SyncNetworks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Networks      []*Network             `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncNetworks) Reset() {
	*x = SyncNetworks{}
	mi := &file_api_netguard_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNetworks) ProtoMessage() {}

func (x *SyncNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNetworks.ProtoReflect.Descriptor instead.
func (*SyncNetworks) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{35}
}

func (x *SyncNetworks) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// SyncNetworkBindings - subject of Network Bindings to sync
type SyncNetworkBindings struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NetworkBindings []*NetworkBinding      `protobuf:"bytes,1,rep,name=network_bindings,json=networkBindings,proto3" json:"network_bindings,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SyncNetworkBindings) Reset() {
	*x = SyncNetworkBindings{}
	mi := &file_api_netguard_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncNetworkBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNetworkBindings) ProtoMessage() {}

func (x *SyncNetworkBindings) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNetworkBindings.ProtoReflect.Descriptor instead.
func (*SyncNetworkBindings) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{36}
}

func (x *SyncNetworkBindings) GetNetworkBindings() []*NetworkBinding {
	if x != nil {
		return x.NetworkBindings
	}
	return nil
}

// ListServicesReq - request to list services
type ListServicesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServicesReq) Reset() {
	*x = ListServicesReq{}
	mi := &file_api_netguard_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesReq) ProtoMessage() {}

func (x *ListServicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesReq.ProtoReflect.Descriptor instead.
func (*ListServicesReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{37}
}

func (x *ListServicesReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListServicesResp - response with list of services
type ListServicesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Service             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServicesResp) Reset() {
	*x = ListServicesResp{}
	mi := &file_api_netguard_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResp) ProtoMessage() {}

func (x *ListServicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResp.ProtoReflect.Descriptor instead.
func (*ListServicesResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{38}
}

func (x *ListServicesResp) GetItems() []*Service {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetServiceReq - request to get a specific service
type GetServiceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceReq) Reset() {
	*x = GetServiceReq{}
	mi := &file_api_netguard_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceReq) ProtoMessage() {}

func (x *GetServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceReq.ProtoReflect.Descriptor instead.
func (*GetServiceReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{39}
}

func (x *GetServiceReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetServiceResp - response with a specific service
type GetServiceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       *Service               `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceResp) Reset() {
	*x = GetServiceResp{}
	mi := &file_api_netguard_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceResp) ProtoMessage() {}

func (x *GetServiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceResp.ProtoReflect.Descriptor instead.
func (*GetServiceResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{40}
}

func (x *GetServiceResp) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

// ListAddressGroupsReq - request to list address groups
type ListAddressGroupsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupsReq) Reset() {
	*x = ListAddressGroupsReq{}
	mi := &file_api_netguard_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupsReq) ProtoMessage() {}

func (x *ListAddressGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupsReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{41}
}

func (x *ListAddressGroupsReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListAddressGroupsResp - response with list of address groups
type ListAddressGroupsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*AddressGroup        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupsResp) Reset() {
	*x = ListAddressGroupsResp{}
	mi := &file_api_netguard_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupsResp) ProtoMessage() {}

func (x *ListAddressGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupsResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupsResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{42}
}

func (x *ListAddressGroupsResp) GetItems() []*AddressGroup {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetAddressGroupReq - request to get a specific address group
type GetAddressGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressGroupReq) Reset() {
	*x = GetAddressGroupReq{}
	mi := &file_api_netguard_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupReq) ProtoMessage() {}

func (x *GetAddressGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupReq.ProtoReflect.Descriptor instead.
func (*GetAddressGroupReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{43}
}

func (x *GetAddressGroupReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetAddressGroupResp - response with a specific address group
type GetAddressGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressGroup  *AddressGroup          `protobuf:"bytes,1,opt,name=address_group,json=addressGroup,proto3" json:"address_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressGroupResp) Reset() {
	*x = GetAddressGroupResp{}
	mi := &file_api_netguard_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupResp) ProtoMessage() {}

func (x *GetAddressGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupResp.ProtoReflect.Descriptor instead.
func (*GetAddressGroupResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{44}
}

func (x *GetAddressGroupResp) GetAddressGroup() *AddressGroup {
	if x != nil {
		return x.AddressGroup
	}
	return nil
}

// ListAddressGroupBindingsReq - request to list address group bindings
type ListAddressGroupBindingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupBindingsReq) Reset() {
	*x = ListAddressGroupBindingsReq{}
	mi := &file_api_netguard_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupBindingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupBindingsReq) ProtoMessage() {}

func (x *ListAddressGroupBindingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupBindingsReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupBindingsReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{45}
}

func (x *ListAddressGroupBindingsReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListAddressGroupBindingsResp - response with list of address group bindings
type ListAddressGroupBindingsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*AddressGroupBinding `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupBindingsResp) Reset() {
	*x = ListAddressGroupBindingsResp{}
	mi := &file_api_netguard_api_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupBindingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupBindingsResp) ProtoMessage() {}

func (x *ListAddressGroupBindingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupBindingsResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupBindingsResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{46}
}

func (x *ListAddressGroupBindingsResp) GetItems() []*AddressGroupBinding {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListAddressGroupPortMappingsReq - request to list address group port mappings
type ListAddressGroupPortMappingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupPortMappingsReq) Reset() {
	*x = ListAddressGroupPortMappingsReq{}
	mi := &file_api_netguard_api_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupPortMappingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupPortMappingsReq) ProtoMessage() {}

func (x *ListAddressGroupPortMappingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupPortMappingsReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupPortMappingsReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{47}
}

func (x *ListAddressGroupPortMappingsReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListAddressGroupPortMappingsResp - response with list of address group port mappings
type ListAddressGroupPortMappingsResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Items         []*AddressGroupPortMapping `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupPortMappingsResp) Reset() {
	*x = ListAddressGroupPortMappingsResp{}
	mi := &file_api_netguard_api_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupPortMappingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupPortMappingsResp) ProtoMessage() {}

func (x *ListAddressGroupPortMappingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupPortMappingsResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupPortMappingsResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{48}
}

func (x *ListAddressGroupPortMappingsResp) GetItems() []*AddressGroupPortMapping {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListRuleS2SReq - request to list rule s2s
type ListRuleS2SReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRuleS2SReq) Reset() {
	*x = ListRuleS2SReq{}
	mi := &file_api_netguard_api_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleS2SReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleS2SReq) ProtoMessage() {}

func (x *ListRuleS2SReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleS2SReq.ProtoReflect.Descriptor instead.
func (*ListRuleS2SReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{49}
}

func (x *ListRuleS2SReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListRuleS2SResp - response with list of rule s2s
type ListRuleS2SResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*RuleS2S             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRuleS2SResp) Reset() {
	*x = ListRuleS2SResp{}
	mi := &file_api_netguard_api_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleS2SResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleS2SResp) ProtoMessage() {}

func (x *ListRuleS2SResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleS2SResp.ProtoReflect.Descriptor instead.
func (*ListRuleS2SResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{50}
}

func (x *ListRuleS2SResp) GetItems() []*RuleS2S {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListServiceAliasesReq - request to list service aliases
type ListServiceAliasesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServiceAliasesReq) Reset() {
	*x = ListServiceAliasesReq{}
	mi := &file_api_netguard_api_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceAliasesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceAliasesReq) ProtoMessage() {}

func (x *ListServiceAliasesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceAliasesReq.ProtoReflect.Descriptor instead.
func (*ListServiceAliasesReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{51}
}

func (x *ListServiceAliasesReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListServiceAliasesResp - response with list of service aliases
type ListServiceAliasesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*ServiceAlias        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServiceAliasesResp) Reset() {
	*x = ListServiceAliasesResp{}
	mi := &file_api_netguard_api_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceAliasesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceAliasesResp) ProtoMessage() {}

func (x *ListServiceAliasesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceAliasesResp.ProtoReflect.Descriptor instead.
func (*ListServiceAliasesResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{52}
}

func (x *ListServiceAliasesResp) GetItems() []*ServiceAlias {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetAddressGroupBindingReq - request to get a specific address group binding
type GetAddressGroupBindingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressGroupBindingReq) Reset() {
	*x = GetAddressGroupBindingReq{}
	mi := &file_api_netguard_api_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupBindingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupBindingReq) ProtoMessage() {}

func (x *GetAddressGroupBindingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupBindingReq.ProtoReflect.Descriptor instead.
func (*GetAddressGroupBindingReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{53}
}

func (x *GetAddressGroupBindingReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetAddressGroupBindingResp - response with a specific address group binding
type GetAddressGroupBindingResp struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AddressGroupBinding *AddressGroupBinding   `protobuf:"bytes,1,opt,name=address_group_binding,json=addressGroupBinding,proto3" json:"address_group_binding,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetAddressGroupBindingResp) Reset() {
	*x = GetAddressGroupBindingResp{}
	mi := &file_api_netguard_api_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupBindingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupBindingResp) ProtoMessage() {}

func (x *GetAddressGroupBindingResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupBindingResp.ProtoReflect.Descriptor instead.
func (*GetAddressGroupBindingResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{54}
}

func (x *GetAddressGroupBindingResp) GetAddressGroupBinding() *AddressGroupBinding {
	if x != nil {
		return x.AddressGroupBinding
	}
	return nil
}

// GetAddressGroupPortMappingReq - request to get a specific address group port mapping
type GetAddressGroupPortMappingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressGroupPortMappingReq) Reset() {
	*x = GetAddressGroupPortMappingReq{}
	mi := &file_api_netguard_api_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupPortMappingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupPortMappingReq) ProtoMessage() {}

func (x *GetAddressGroupPortMappingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupPortMappingReq.ProtoReflect.Descriptor instead.
func (*GetAddressGroupPortMappingReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{55}
}

func (x *GetAddressGroupPortMappingReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetAddressGroupPortMappingResp - response with a specific address group port mapping
type GetAddressGroupPortMappingResp struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	AddressGroupPortMapping *AddressGroupPortMapping `protobuf:"bytes,1,opt,name=address_group_port_mapping,json=addressGroupPortMapping,proto3" json:"address_group_port_mapping,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetAddressGroupPortMappingResp) Reset() {
	*x = GetAddressGroupPortMappingResp{}
	mi := &file_api_netguard_api_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupPortMappingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupPortMappingResp) ProtoMessage() {}

func (x *GetAddressGroupPortMappingResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupPortMappingResp.ProtoReflect.Descriptor instead.
func (*GetAddressGroupPortMappingResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{56}
}

func (x *GetAddressGroupPortMappingResp) GetAddressGroupPortMapping() *AddressGroupPortMapping {
	if x != nil {
		return x.AddressGroupPortMapping
	}
	return nil
}

// GetRuleS2SReq - request to get a specific rule s2s
type GetRuleS2SReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuleS2SReq) Reset() {
	*x = GetRuleS2SReq{}
	mi := &file_api_netguard_api_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleS2SReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleS2SReq) ProtoMessage() {}

func (x *GetRuleS2SReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleS2SReq.ProtoReflect.Descriptor instead.
func (*GetRuleS2SReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{57}
}

func (x *GetRuleS2SReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetRuleS2SResp - response with a specific rule s2s
type GetRuleS2SResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleS2S       *RuleS2S               `protobuf:"bytes,1,opt,name=rule_s2s,json=ruleS2s,proto3" json:"rule_s2s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuleS2SResp) Reset() {
	*x = GetRuleS2SResp{}
	mi := &file_api_netguard_api_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleS2SResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleS2SResp) ProtoMessage() {}

func (x *GetRuleS2SResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleS2SResp.ProtoReflect.Descriptor instead.
func (*GetRuleS2SResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{58}
}

func (x *GetRuleS2SResp) GetRuleS2S() *RuleS2S {
	if x != nil {
		return x.RuleS2S
	}
	return nil
}

// GetServiceAliasReq - request to get a specific service alias
type GetServiceAliasReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceAliasReq) Reset() {
	*x = GetServiceAliasReq{}
	mi := &file_api_netguard_api_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceAliasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAliasReq) ProtoMessage() {}

func (x *GetServiceAliasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAliasReq.ProtoReflect.Descriptor instead.
func (*GetServiceAliasReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{59}
}

func (x *GetServiceAliasReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetServiceAliasResp - response with a specific service alias
type GetServiceAliasResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceAlias  *ServiceAlias          `protobuf:"bytes,1,opt,name=service_alias,json=serviceAlias,proto3" json:"service_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceAliasResp) Reset() {
	*x = GetServiceAliasResp{}
	mi := &file_api_netguard_api_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceAliasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAliasResp) ProtoMessage() {}

func (x *GetServiceAliasResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAliasResp.ProtoReflect.Descriptor instead.
func (*GetServiceAliasResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{60}
}

func (x *GetServiceAliasResp) GetServiceAlias() *ServiceAlias {
	if x != nil {
		return x.ServiceAlias
	}
	return nil
}

// ListAddressGroupBindingPoliciesReq - request to list address group binding policies
type ListAddressGroupBindingPoliciesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupBindingPoliciesReq) Reset() {
	*x = ListAddressGroupBindingPoliciesReq{}
	mi := &file_api_netguard_api_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupBindingPoliciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupBindingPoliciesReq) ProtoMessage() {}

func (x *ListAddressGroupBindingPoliciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupBindingPoliciesReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupBindingPoliciesReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{61}
}

func (x *ListAddressGroupBindingPoliciesReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListAddressGroupBindingPoliciesResp - response with list of address group binding policies
type ListAddressGroupBindingPoliciesResp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Items         []*AddressGroupBindingPolicy `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupBindingPoliciesResp) Reset() {
	*x = ListAddressGroupBindingPoliciesResp{}
	mi := &file_api_netguard_api_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupBindingPoliciesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupBindingPoliciesResp) ProtoMessage() {}

func (x *ListAddressGroupBindingPoliciesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupBindingPoliciesResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupBindingPoliciesResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{62}
}

func (x *ListAddressGroupBindingPoliciesResp) GetItems() []*AddressGroupBindingPolicy {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetAddressGroupBindingPolicyReq - request to get a specific address group binding policy
type GetAddressGroupBindingPolicyReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressGroupBindingPolicyReq) Reset() {
	*x = GetAddressGroupBindingPolicyReq{}
	mi := &file_api_netguard_api_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupBindingPolicyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupBindingPolicyReq) ProtoMessage() {}

func (x *GetAddressGroupBindingPolicyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupBindingPolicyReq.ProtoReflect.Descriptor instead.
func (*GetAddressGroupBindingPolicyReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{63}
}

func (x *GetAddressGroupBindingPolicyReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetAddressGroupBindingPolicyResp - response with a specific address group binding policy
type GetAddressGroupBindingPolicyResp struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	AddressGroupBindingPolicy *AddressGroupBindingPolicy `protobuf:"bytes,1,opt,name=address_group_binding_policy,json=addressGroupBindingPolicy,proto3" json:"address_group_binding_policy,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetAddressGroupBindingPolicyResp) Reset() {
	*x = GetAddressGroupBindingPolicyResp{}
	mi := &file_api_netguard_api_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressGroupBindingPolicyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGroupBindingPolicyResp) ProtoMessage() {}

func (x *GetAddressGroupBindingPolicyResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGroupBindingPolicyResp.ProtoReflect.Descriptor instead.
func (*GetAddressGroupBindingPolicyResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{64}
}

func (x *GetAddressGroupBindingPolicyResp) GetAddressGroupBindingPolicy() *AddressGroupBindingPolicy {
	if x != nil {
		return x.AddressGroupBindingPolicy
	}
	return nil
}

// ListIEAgAgRulesReq - request to list IEAgAgRules
type ListIEAgAgRulesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIEAgAgRulesReq) Reset() {
	*x = ListIEAgAgRulesReq{}
	mi := &file_api_netguard_api_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIEAgAgRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIEAgAgRulesReq) ProtoMessage() {}

func (x *ListIEAgAgRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIEAgAgRulesReq.ProtoReflect.Descriptor instead.
func (*ListIEAgAgRulesReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{65}
}

func (x *ListIEAgAgRulesReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListIEAgAgRulesResp - response with list of IEAgAgRules
type ListIEAgAgRulesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*IEAgAgRule          `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIEAgAgRulesResp) Reset() {
	*x = ListIEAgAgRulesResp{}
	mi := &file_api_netguard_api_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIEAgAgRulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIEAgAgRulesResp) ProtoMessage() {}

func (x *ListIEAgAgRulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIEAgAgRulesResp.ProtoReflect.Descriptor instead.
func (*ListIEAgAgRulesResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{66}
}

func (x *ListIEAgAgRulesResp) GetItems() []*IEAgAgRule {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetIEAgAgRuleReq - request to get a specific IEAgAgRule
type GetIEAgAgRuleReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIEAgAgRuleReq) Reset() {
	*x = GetIEAgAgRuleReq{}
	mi := &file_api_netguard_api_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIEAgAgRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIEAgAgRuleReq) ProtoMessage() {}

func (x *GetIEAgAgRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIEAgAgRuleReq.ProtoReflect.Descriptor instead.
func (*GetIEAgAgRuleReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{67}
}

func (x *GetIEAgAgRuleReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetIEAgAgRuleResp - response with a specific IEAgAgRule
type GetIEAgAgRuleResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IeagagRule    *IEAgAgRule            `protobuf:"bytes,1,opt,name=ieagag_rule,json=ieagagRule,proto3" json:"ieagag_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIEAgAgRuleResp) Reset() {
	*x = GetIEAgAgRuleResp{}
	mi := &file_api_netguard_api_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIEAgAgRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIEAgAgRuleResp) ProtoMessage() {}

func (x *GetIEAgAgRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIEAgAgRuleResp.ProtoReflect.Descriptor instead.
func (*GetIEAgAgRuleResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{68}
}

func (x *GetIEAgAgRuleResp) GetIeagagRule() *IEAgAgRule {
	if x != nil {
		return x.IeagagRule
	}
	return nil
}

// ListNetworksReq - request to list networks
type ListNetworksReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworksReq) Reset() {
	*x = ListNetworksReq{}
	mi := &file_api_netguard_api_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksReq) ProtoMessage() {}

func (x *ListNetworksReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksReq.ProtoReflect.Descriptor instead.
func (*ListNetworksReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{69}
}

func (x *ListNetworksReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListNetworksResp - response with list of networks
type ListNetworksResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Network             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworksResp) Reset() {
	*x = ListNetworksResp{}
	mi := &file_api_netguard_api_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksResp) ProtoMessage() {}

func (x *ListNetworksResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksResp.ProtoReflect.Descriptor instead.
func (*ListNetworksResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{70}
}

func (x *ListNetworksResp) GetItems() []*Network {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetNetworkReq - request to get a specific network
type GetNetworkReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkReq) Reset() {
	*x = GetNetworkReq{}
	mi := &file_api_netguard_api_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkReq) ProtoMessage() {}

func (x *GetNetworkReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkReq.ProtoReflect.Descriptor instead.
func (*GetNetworkReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{71}
}

func (x *GetNetworkReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetNetworkResp - response with a specific network
type GetNetworkResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       *Network               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkResp) Reset() {
	*x = GetNetworkResp{}
	mi := &file_api_netguard_api_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkResp) ProtoMessage() {}

func (x *GetNetworkResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkResp.ProtoReflect.Descriptor instead.
func (*GetNetworkResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{72}
}

func (x *GetNetworkResp) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

// ListNetworkBindingsReq - request to list network bindings
type ListNetworkBindingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifiers   []*ResourceIdentifier  `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworkBindingsReq) Reset() {
	*x = ListNetworkBindingsReq{}
	mi := &file_api_netguard_api_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworkBindingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkBindingsReq) ProtoMessage() {}

func (x *ListNetworkBindingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkBindingsReq.ProtoReflect.Descriptor instead.
func (*ListNetworkBindingsReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{73}
}

func (x *ListNetworkBindingsReq) GetIdentifiers() []*ResourceIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ListNetworkBindingsResp - response with list of network bindings
type ListNetworkBindingsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*NetworkBinding      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworkBindingsResp) Reset() {
	*x = ListNetworkBindingsResp{}
	mi := &file_api_netguard_api_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworkBindingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkBindingsResp) ProtoMessage() {}

func (x *ListNetworkBindingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkBindingsResp.ProtoReflect.Descriptor instead.
func (*ListNetworkBindingsResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{74}
}

func (x *ListNetworkBindingsResp) GetItems() []*NetworkBinding {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetNetworkBindingReq - request to get a specific network binding
type GetNetworkBindingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *ResourceIdentifier    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkBindingReq) Reset() {
	*x = GetNetworkBindingReq{}
	mi := &file_api_netguard_api_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkBindingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkBindingReq) ProtoMessage() {}

func (x *GetNetworkBindingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkBindingReq.ProtoReflect.Descriptor instead.
func (*GetNetworkBindingReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{75}
}

func (x *GetNetworkBindingReq) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

// GetNetworkBindingResp - response with a specific network binding
type GetNetworkBindingResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NetworkBinding *NetworkBinding        `protobuf:"bytes,1,opt,name=network_binding,json=networkBinding,proto3" json:"network_binding,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetNetworkBindingResp) Reset() {
	*x = GetNetworkBindingResp{}
	mi := &file_api_netguard_api_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkBindingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkBindingResp) ProtoMessage() {}

func (x *GetNetworkBindingResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkBindingResp.ProtoReflect.Descriptor instead.
func (*GetNetworkBindingResp) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{76}
}

func (x *GetNetworkBindingResp) GetNetworkBinding() *NetworkBinding {
	if x != nil {
		return x.NetworkBinding
	}
	return nil
}

// SyncReq - request to sync
type SyncReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sync operation to apply
	SyncOp SyncOp `protobuf:"varint,1,opt,name=sync_op,json=syncOp,proto3,enum=netguard.v1.SyncOp" json:"sync_op,omitempty"`
	// One of subject
	//
	// Types that are valid to be assigned to Subject:
	//
	//	*SyncReq_Services
	//	*SyncReq_AddressGroups
	//	*SyncReq_AddressGroupBindings
	//	*SyncReq_AddressGroupPortMappings
	//	*SyncReq_RuleS2S
	//	*SyncReq_ServiceAliases
	//	*SyncReq_AddressGroupBindingPolicies
	//	*SyncReq_IeagagRules
	//	*SyncReq_Networks
	//	*SyncReq_NetworkBindings
	Subject       isSyncReq_Subject `protobuf_oneof:"subject"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	mi := &file_api_netguard_api_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{77}
}

func (x *SyncReq) GetSyncOp() SyncOp {
	if x != nil {
		return x.SyncOp
	}
	return SyncOp_NoOp
}

func (x *SyncReq) GetSubject() isSyncReq_Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *SyncReq) GetServices() *SyncServices {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_Services); ok {
			return x.Services
		}
	}
	return nil
}

func (x *SyncReq) GetAddressGroups() *SyncAddressGroups {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_AddressGroups); ok {
			return x.AddressGroups
		}
	}
	return nil
}

func (x *SyncReq) GetAddressGroupBindings() *SyncAddressGroupBindings {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_AddressGroupBindings); ok {
			return x.AddressGroupBindings
		}
	}
	return nil
}

func (x *SyncReq) GetAddressGroupPortMappings() *SyncAddressGroupPortMappings {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_AddressGroupPortMappings); ok {
			return x.AddressGroupPortMappings
		}
	}
	return nil
}

func (x *SyncReq) GetRuleS2S() *SyncRuleS2S {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_RuleS2S); ok {
			return x.RuleS2S
		}
	}
	return nil
}

func (x *SyncReq) GetServiceAliases() *SyncServiceAliases {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_ServiceAliases); ok {
			return x.ServiceAliases
		}
	}
	return nil
}

func (x *SyncReq) GetAddressGroupBindingPolicies() *SyncAddressGroupBindingPolicies {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_AddressGroupBindingPolicies); ok {
			return x.AddressGroupBindingPolicies
		}
	}
	return nil
}

func (x *SyncReq) GetIeagagRules() *SyncIEAgAgRules {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_IeagagRules); ok {
			return x.IeagagRules
		}
	}
	return nil
}

func (x *SyncReq) GetNetworks() *SyncNetworks {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_Networks); ok {
			return x.Networks
		}
	}
	return nil
}

func (x *SyncReq) GetNetworkBindings() *SyncNetworkBindings {
	if x != nil {
		if x, ok := x.Subject.(*SyncReq_NetworkBindings); ok {
			return x.NetworkBindings
		}
	}
	return nil
}

type isSyncReq_Subject interface {
	isSyncReq_Subject()
}

type SyncReq_Services struct {
	// Subject of Services
	Services *SyncServices `protobuf:"bytes,2,opt,name=services,proto3,oneof"`
}

type SyncReq_AddressGroups struct {
	// Subject of Address Groups
	AddressGroups *SyncAddressGroups `protobuf:"bytes,3,opt,name=address_groups,json=addressGroups,proto3,oneof"`
}

type SyncReq_AddressGroupBindings struct {
	// Subject of Address Group Bindings
	AddressGroupBindings *SyncAddressGroupBindings `protobuf:"bytes,4,opt,name=address_group_bindings,json=addressGroupBindings,proto3,oneof"`
}

type SyncReq_AddressGroupPortMappings struct {
	// Subject of Address Group Port Mappings
	AddressGroupPortMappings *SyncAddressGroupPortMappings `protobuf:"bytes,5,opt,name=address_group_port_mappings,json=addressGroupPortMappings,proto3,oneof"`
}

type SyncReq_RuleS2S struct {
	// Subject of Rule S2S
	RuleS2S *SyncRuleS2S `protobuf:"bytes,6,opt,name=rule_s2s,json=ruleS2s,proto3,oneof"`
}

type SyncReq_ServiceAliases struct {
	// Subject of Service Aliases
	ServiceAliases *SyncServiceAliases `protobuf:"bytes,7,opt,name=service_aliases,json=serviceAliases,proto3,oneof"`
}

type SyncReq_AddressGroupBindingPolicies struct {
	// Subject of Address Group Binding Policies
	AddressGroupBindingPolicies *SyncAddressGroupBindingPolicies `protobuf:"bytes,8,opt,name=address_group_binding_policies,json=addressGroupBindingPolicies,proto3,oneof"`
}

type SyncReq_IeagagRules struct {
	// Subject of IEAgAgRules
	IeagagRules *SyncIEAgAgRules `protobuf:"bytes,9,opt,name=ieagag_rules,json=ieagagRules,proto3,oneof"`
}

type SyncReq_Networks struct {
	// Subject of Networks
	Networks *SyncNetworks `protobuf:"bytes,10,opt,name=networks,proto3,oneof"`
}

type SyncReq_NetworkBindings struct {
	// Subject of Network Bindings
	NetworkBindings *SyncNetworkBindings `protobuf:"bytes,11,opt,name=network_bindings,json=networkBindings,proto3,oneof"`
}

func (*SyncReq_Services) isSyncReq_Subject() {}

func (*SyncReq_AddressGroups) isSyncReq_Subject() {}

func (*SyncReq_AddressGroupBindings) isSyncReq_Subject() {}

func (*SyncReq_AddressGroupPortMappings) isSyncReq_Subject() {}

func (*SyncReq_RuleS2S) isSyncReq_Subject() {}

func (*SyncReq_ServiceAliases) isSyncReq_Subject() {}

func (*SyncReq_AddressGroupBindingPolicies) isSyncReq_Subject() {}

func (*SyncReq_IeagagRules) isSyncReq_Subject() {}

func (*SyncReq_Networks) isSyncReq_Subject() {}

func (*SyncReq_NetworkBindings) isSyncReq_Subject() {}

type Networks_NetIP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Networks_NetIP) Reset() {
	*x = Networks_NetIP{}
	mi := &file_api_netguard_api_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Networks_NetIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networks_NetIP) ProtoMessage() {}

func (x *Networks_NetIP) ProtoReflect() protoreflect.Message {
	mi := &file_api_netguard_api_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networks_NetIP.ProtoReflect.Descriptor instead.
func (*Networks_NetIP) Descriptor() ([]byte, []int) {
	return file_api_netguard_api_proto_rawDescGZIP(), []int{0, 0}
}

var File_api_netguard_api_proto protoreflect.FileDescriptor

var file_api_netguard_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x32, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x26, 0x0a,
	0x05, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x22, 0x1d, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x44, 0x50, 0x10, 0x01, 0x22, 0xa4, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x43,
	0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x10, 0x92, 0x41, 0x0d, 0x0a,
	0x0b, 0xd2, 0x01, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x86, 0x01, 0x0a,
	0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5a, 0x0a,
	0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x04, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x73, 0x12, 0x35, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x22,
	0x88, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52,
	0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x3a, 0x17, 0x92, 0x41, 0x14,
	0x0a, 0x12, 0xd2, 0x01, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x04,
	0x63, 0x69, 0x64, 0x72, 0x22, 0xe2, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65,
	0x66, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0xd2, 0x01, 0x08,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66,
	0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x66, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0xd2,
	0x01, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x22, 0xed, 0x02, 0x0a,
	0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0xd2,
	0x01, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x9f, 0x01, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33,
	0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x30, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07,
	0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a,
	0x10, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0xd2, 0x01, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65,
	0x66, 0x22, 0xd3, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a,
	0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x22, 0xb6, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65,
	0x66, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41,
	0x2f, 0x0a, 0x2d, 0xd2, 0x01, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x11, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x22, 0xa3, 0x04, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x12, 0x3a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x65, 0x61, 0x67, 0x5f,
	0x61, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x65, 0x61, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x69, 0x65, 0x61, 0x67, 0x5f, 0x61, 0x67, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x69,
	0x65, 0x61, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0xd2, 0x01, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x22, 0xf0, 0x04, 0x0a, 0x0a, 0x49, 0x45, 0x41, 0x67, 0x41,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65,
	0x66, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x50, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x66, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0xd2, 0x01, 0x08, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0xd2, 0x01, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0xd2, 0x01, 0x13, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0xd2, 0x01, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4b, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x40, 0x0a, 0x0c,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x55,
	0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x72, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x56, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x3e, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x12, 0x2f,
	0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x32, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x73, 0x22,
	0x58, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x6b, 0x0a,
	0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x1b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x69, 0x65, 0x61, 0x67, 0x61, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x69, 0x65,
	0x61, 0x67, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x53, 0x79, 0x6e,
	0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x5d, 0x0a, 0x13, 0x53,
	0x79, 0x6e, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x54, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a,
	0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x22, 0x3e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22,
	0x48, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x60, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x64, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x32, 0x53, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x72, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x1a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x50, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x41,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2f, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x32, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x32,
	0x73, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0x67, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x62, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x45, 0x41,
	0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x53,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x65, 0x61, 0x67,
	0x61, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x45, 0x41, 0x67,
	0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x69, 0x65, 0x61, 0x67, 0x61, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x54, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x5b, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0xd2, 0x06, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x07, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x18, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x32, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x32, 0x53, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x1e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0c, 0x69, 0x65, 0x61, 0x67, 0x61, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x65, 0x61, 0x67, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2a, 0x22, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x06, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x4f, 0x70, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x03, 0x32, 0x86, 0x22, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x31, 0x92, 0x41, 0x1b, 0x1a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x3a, 0x20, 0x6d, 0x61, 0x6b, 0x65,
	0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x44, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x92, 0x41, 0x32, 0x1a, 0x30, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x61,
	0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x44, 0x42, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x25, 0x1a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0xb2, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6b, 0x92, 0x41, 0x2b, 0x1a, 0x29, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x4d, 0x92, 0x41, 0x30, 0x1a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0xd2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7c, 0x92, 0x41, 0x36, 0x1a, 0x34, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x20,
	0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x79,
	0x20, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xd5, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x64, 0x92, 0x41, 0x3f, 0x1a, 0x3d, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xff,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x01, 0x92, 0x41, 0x45,
	0x1a, 0x43, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0xef, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x72,
	0x92, 0x41, 0x48, 0x1a, 0x46, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x70, 0x6f,
	0x72, 0x74, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x99, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa1, 0x01, 0x92, 0x41, 0x4e,
	0x1a, 0x4c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x65,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x85,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x12, 0x1b,
	0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x24, 0x1a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x3a, 0x20, 0x67, 0x65, 0x74,
	0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x73,
	0x32, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75,
	0x6c, 0x65, 0x2d, 0x73, 0x32, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x32, 0x53, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6c,
	0x92, 0x41, 0x2c, 0x1a, 0x2a, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x3a,
	0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x73, 0x32, 0x73, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x73, 0x32, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xaf, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x92, 0x41,
	0x32, 0x1a, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0xd3,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7d, 0x92, 0x41, 0x36, 0x1a, 0x34, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x81, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7b, 0x92, 0x41, 0x4e,
	0x1a, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xa6, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa8, 0x01, 0x92, 0x41, 0x52, 0x1a, 0x50, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x92, 0x41, 0x2b, 0x1a, 0x29, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x20,
	0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x45, 0x41,
	0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x65, 0x61, 0x67, 0x61, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x75, 0x92, 0x41, 0x31, 0x1a, 0x2f, 0x47, 0x65, 0x74, 0x49, 0x45, 0x41, 0x67, 0x41,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x45, 0x41, 0x67, 0x41, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x65, 0x61, 0x67, 0x61, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x25, 0x1a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6b, 0x92, 0x41,
	0x2b, 0x1a, 0x29, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x20, 0x67,
	0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x53, 0x92, 0x41,
	0x34, 0x1a, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0xdf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x82,
	0x01, 0x92, 0x41, 0x3a, 0x1a, 0x38, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x1a, 0x19, 0x92, 0x41, 0x16, 0x12, 0x14, 0x4e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0xbc,
	0x01, 0x92, 0x41, 0x82, 0x01, 0x12, 0x13, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x20, 0x41, 0x50, 0x49, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x72, 0x44, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x67, 0x2d,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5a, 0x34, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2d, 0x70, 0x67, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x3b, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_netguard_api_proto_rawDescOnce sync.Once
	file_api_netguard_api_proto_rawDescData = file_api_netguard_api_proto_rawDesc
)

func file_api_netguard_api_proto_rawDescGZIP() []byte {
	file_api_netguard_api_proto_rawDescOnce.Do(func() {
		file_api_netguard_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_netguard_api_proto_rawDescData)
	})
	return file_api_netguard_api_proto_rawDescData
}

var file_api_netguard_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_netguard_api_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_api_netguard_api_proto_goTypes = []any{
	(Traffic)(0),                                // 0: netguard.v1.Traffic
	(RuleAction)(0),                             // 1: netguard.v1.RuleAction
	(SyncOp)(0),                                 // 2: netguard.v1.SyncOp
	(Networks_NetIP_Transport)(0),               // 3: netguard.v1.Networks.NetIP.Transport
	(*Networks)(nil),                            // 4: netguard.v1.Networks
	(*Service)(nil),                             // 5: netguard.v1.Service
	(*IngressPort)(nil),                         // 6: netguard.v1.IngressPort
	(*ResourceIdentifier)(nil),                  // 7: netguard.v1.ResourceIdentifier
	(*ObjectReference)(nil),                     // 8: netguard.v1.ObjectReference
	(*NamespacedObjectReference)(nil),           // 9: netguard.v1.NamespacedObjectReference
	(*Condition)(nil),                           // 10: netguard.v1.Condition
	(*ManagedFieldsEntry)(nil),                  // 11: netguard.v1.ManagedFieldsEntry
	(*Meta)(nil),                                // 12: netguard.v1.Meta
	(*AddressGroupRef)(nil),                     // 13: netguard.v1.AddressGroupRef
	(*ServiceRef)(nil),                          // 14: netguard.v1.ServiceRef
	(*NetworkItem)(nil),                         // 15: netguard.v1.NetworkItem
	(*Network)(nil),                             // 16: netguard.v1.Network
	(*AddressGroup)(nil),                        // 17: netguard.v1.AddressGroup
	(*AddressGroupBinding)(nil),                 // 18: netguard.v1.AddressGroupBinding
	(*NetworkBinding)(nil),                      // 19: netguard.v1.NetworkBinding
	(*ProtocolPorts)(nil),                       // 20: netguard.v1.ProtocolPorts
	(*PortRange)(nil),                           // 21: netguard.v1.PortRange
	(*PortRanges)(nil),                          // 22: netguard.v1.PortRanges
	(*ServicePortsRef)(nil),                     // 23: netguard.v1.ServicePortsRef
	(*AddressGroupPortMapping)(nil),             // 24: netguard.v1.AddressGroupPortMapping
	(*ServiceAlias)(nil),                        // 25: netguard.v1.ServiceAlias
	(*AddressGroupBindingPolicy)(nil),           // 26: netguard.v1.AddressGroupBindingPolicy
	(*RuleS2S)(nil),                             // 27: netguard.v1.RuleS2S
	(*IEAgAgRule)(nil),                          // 28: netguard.v1.IEAgAgRule
	(*PortSpec)(nil),                            // 29: netguard.v1.PortSpec
	(*SyncStatusResp)(nil),                      // 30: netguard.v1.SyncStatusResp
	(*SyncServices)(nil),                        // 31: netguard.v1.SyncServices
	(*SyncAddressGroups)(nil),                   // 32: netguard.v1.SyncAddressGroups
	(*SyncAddressGroupBindings)(nil),            // 33: netguard.v1.SyncAddressGroupBindings
	(*SyncAddressGroupPortMappings)(nil),        // 34: netguard.v1.SyncAddressGroupPortMappings
	(*SyncRuleS2S)(nil),                         // 35: netguard.v1.SyncRuleS2S
	(*SyncServiceAliases)(nil),                  // 36: netguard.v1.SyncServiceAliases
	(*SyncAddressGroupBindingPolicies)(nil),     // 37: netguard.v1.SyncAddressGroupBindingPolicies
	(*SyncIEAgAgRules)(nil),                     // 38: netguard.v1.SyncIEAgAgRules
	(*SyncNetworks)(nil),                        // 39: netguard.v1.SyncNetworks
	(*SyncNetworkBindings)(nil),                 // 40: netguard.v1.SyncNetworkBindings
	(*ListServicesReq)(nil),                     // 41: netguard.v1.ListServicesReq
	(*ListServicesResp)(nil),                    // 42: netguard.v1.ListServicesResp
	(*GetServiceReq)(nil),                       // 43: netguard.v1.GetServiceReq
	(*GetServiceResp)(nil),                      // 44: netguard.v1.GetServiceResp
	(*ListAddressGroupsReq)(nil),                // 45: netguard.v1.ListAddressGroupsReq
	(*ListAddressGroupsResp)(nil),               // 46: netguard.v1.ListAddressGroupsResp
	(*GetAddressGroupReq)(nil),                  // 47: netguard.v1.GetAddressGroupReq
	(*GetAddressGroupResp)(nil),                 // 48: netguard.v1.GetAddressGroupResp
	(*ListAddressGroupBindingsReq)(nil),         // 49: netguard.v1.ListAddressGroupBindingsReq
	(*ListAddressGroupBindingsResp)(nil),        // 50: netguard.v1.ListAddressGroupBindingsResp
	(*ListAddressGroupPortMappingsReq)(nil),     // 51: netguard.v1.ListAddressGroupPortMappingsReq
	(*ListAddressGroupPortMappingsResp)(nil),    // 52: netguard.v1.ListAddressGroupPortMappingsResp
	(*ListRuleS2SReq)(nil),                      // 53: netguard.v1.ListRuleS2SReq
	(*ListRuleS2SResp)(nil),                     // 54: netguard.v1.ListRuleS2SResp
	(*ListServiceAliasesReq)(nil),               // 55: netguard.v1.ListServiceAliasesReq
	(*ListServiceAliasesResp)(nil),              // 56: netguard.v1.ListServiceAliasesResp
	(*GetAddressGroupBindingReq)(nil),           // 57: netguard.v1.GetAddressGroupBindingReq
	(*GetAddressGroupBindingResp)(nil),          // 58: netguard.v1.GetAddressGroupBindingResp
	(*GetAddressGroupPortMappingReq)(nil),       // 59: netguard.v1.GetAddressGroupPortMappingReq
	(*GetAddressGroupPortMappingResp)(nil),      // 60: netguard.v1.GetAddressGroupPortMappingResp
	(*GetRuleS2SReq)(nil),                       // 61: netguard.v1.GetRuleS2SReq
	(*GetRuleS2SResp)(nil),                      // 62: netguard.v1.GetRuleS2SResp
	(*GetServiceAliasReq)(nil),                  // 63: netguard.v1.GetServiceAliasReq
	(*GetServiceAliasResp)(nil),                 // 64: netguard.v1.GetServiceAliasResp
	(*ListAddressGroupBindingPoliciesReq)(nil),  // 65: netguard.v1.ListAddressGroupBindingPoliciesReq
	(*ListAddressGroupBindingPoliciesResp)(nil), // 66: netguard.v1.ListAddressGroupBindingPoliciesResp
	(*GetAddressGroupBindingPolicyReq)(nil),     // 67: netguard.v1.GetAddressGroupBindingPolicyReq
	(*GetAddressGroupBindingPolicyResp)(nil),    // 68: netguard.v1.GetAddressGroupBindingPolicyResp
	(*ListIEAgAgRulesReq)(nil),                  // 69: netguard.v1.ListIEAgAgRulesReq
	(*ListIEAgAgRulesResp)(nil),                 // 70: netguard.v1.ListIEAgAgRulesResp
	(*GetIEAgAgRuleReq)(nil),                    // 71: netguard.v1.GetIEAgAgRuleReq
	(*GetIEAgAgRuleResp)(nil),                   // 72: netguard.v1.GetIEAgAgRuleResp
	(*ListNetworksReq)(nil),                     // 73: netguard.v1.ListNetworksReq
	(*ListNetworksResp)(nil),                    // 74: netguard.v1.ListNetworksResp
	(*GetNetworkReq)(nil),                       // 75: netguard.v1.GetNetworkReq
	(*GetNetworkResp)(nil),                      // 76: netguard.v1.GetNetworkResp
	(*ListNetworkBindingsReq)(nil),              // 77: netguard.v1.ListNetworkBindingsReq
	(*ListNetworkBindingsResp)(nil),             // 78: netguard.v1.ListNetworkBindingsResp
	(*GetNetworkBindingReq)(nil),                // 79: netguard.v1.GetNetworkBindingReq
	(*GetNetworkBindingResp)(nil),               // 80: netguard.v1.GetNetworkBindingResp
	(*SyncReq)(nil),                             // 81: netguard.v1.SyncReq
	(*Networks_NetIP)(nil),                      // 82: netguard.v1.Networks.NetIP
	nil,                                         // 83: netguard.v1.Meta.LabelsEntry
	nil,                                         // 84: netguard.v1.Meta.AnnotationsEntry
	nil,                                         // 85: netguard.v1.ProtocolPorts.PortsEntry
	(*timestamppb.Timestamp)(nil),               // 86: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                       // 87: google.protobuf.Empty
}
var file_api_netguard_api_proto_depIdxs = []int32{
	7,   // 0: netguard.v1.Service.self_ref:type_name -> netguard.v1.ResourceIdentifier
	6,   // 1: netguard.v1.Service.ingress_ports:type_name -> netguard.v1.IngressPort
	13,  // 2: netguard.v1.Service.address_groups:type_name -> netguard.v1.AddressGroupRef
	12,  // 3: netguard.v1.Service.meta:type_name -> netguard.v1.Meta
	3,   // 4: netguard.v1.IngressPort.protocol:type_name -> netguard.v1.Networks.NetIP.Transport
	86,  // 5: netguard.v1.Condition.last_transition_time:type_name -> google.protobuf.Timestamp
	86,  // 6: netguard.v1.ManagedFieldsEntry.time:type_name -> google.protobuf.Timestamp
	86,  // 7: netguard.v1.Meta.creation_ts:type_name -> google.protobuf.Timestamp
	83,  // 8: netguard.v1.Meta.labels:type_name -> netguard.v1.Meta.LabelsEntry
	84,  // 9: netguard.v1.Meta.annotations:type_name -> netguard.v1.Meta.AnnotationsEntry
	10,  // 10: netguard.v1.Meta.conditions:type_name -> netguard.v1.Condition
	11,  // 11: netguard.v1.Meta.managed_fields:type_name -> netguard.v1.ManagedFieldsEntry
	7,   // 12: netguard.v1.AddressGroupRef.identifier:type_name -> netguard.v1.ResourceIdentifier
	9,   // 13: netguard.v1.AddressGroupRef.object_ref:type_name -> netguard.v1.NamespacedObjectReference
	7,   // 14: netguard.v1.ServiceRef.identifier:type_name -> netguard.v1.ResourceIdentifier
	9,   // 15: netguard.v1.ServiceRef.object_ref:type_name -> netguard.v1.NamespacedObjectReference
	7,   // 16: netguard.v1.Network.self_ref:type_name -> netguard.v1.ResourceIdentifier
	12,  // 17: netguard.v1.Network.meta:type_name -> netguard.v1.Meta
	8,   // 18: netguard.v1.Network.binding_ref:type_name -> netguard.v1.ObjectReference
	9,   // 19: netguard.v1.Network.address_group_ref:type_name -> netguard.v1.NamespacedObjectReference
	7,   // 20: netguard.v1.AddressGroup.self_ref:type_name -> netguard.v1.ResourceIdentifier
	1,   // 21: netguard.v1.AddressGroup.default_action:type_name -> netguard.v1.RuleAction
	15,  // 22: netguard.v1.AddressGroup.networks:type_name -> netguard.v1.NetworkItem
	12,  // 23: netguard.v1.AddressGroup.meta:type_name -> netguard.v1.Meta
	7,   // 24: netguard.v1.AddressGroupBinding.self_ref:type_name -> netguard.v1.ResourceIdentifier
	14,  // 25: netguard.v1.AddressGroupBinding.service_ref:type_name -> netguard.v1.ServiceRef
	13,  // 26: netguard.v1.AddressGroupBinding.address_group_ref:type_name -> netguard.v1.AddressGroupRef
	12,  // 27: netguard.v1.AddressGroupBinding.meta:type_name -> netguard.v1.Meta
	7,   // 28: netguard.v1.NetworkBinding.self_ref:type_name -> netguard.v1.ResourceIdentifier
	8,   // 29: netguard.v1.NetworkBinding.network_ref:type_name -> netguard.v1.ObjectReference
	8,   // 30: netguard.v1.NetworkBinding.address_group_ref:type_name -> netguard.v1.ObjectReference
	15,  // 31: netguard.v1.NetworkBinding.network_item:type_name -> netguard.v1.NetworkItem
	12,  // 32: netguard.v1.NetworkBinding.meta:type_name -> netguard.v1.Meta
	85,  // 33: netguard.v1.ProtocolPorts.ports:type_name -> netguard.v1.ProtocolPorts.PortsEntry
	21,  // 34: netguard.v1.PortRanges.ranges:type_name -> netguard.v1.PortRange
	7,   // 35: netguard.v1.ServicePortsRef.identifier:type_name -> netguard.v1.ResourceIdentifier
	9,   // 36: netguard.v1.ServicePortsRef.object_ref:type_name -> netguard.v1.NamespacedObjectReference
	20,  // 37: netguard.v1.ServicePortsRef.ports:type_name -> netguard.v1.ProtocolPorts
	7,   // 38: netguard.v1.AddressGroupPortMapping.self_ref:type_name -> netguard.v1.ResourceIdentifier
	23,  // 39: netguard.v1.AddressGroupPortMapping.access_ports:type_name -> netguard.v1.ServicePortsRef
	12,  // 40: netguard.v1.AddressGroupPortMapping.meta:type_name -> netguard.v1.Meta
	7,   // 41: netguard.v1.ServiceAlias.self_ref:type_name -> netguard.v1.ResourceIdentifier
	14,  // 42: netguard.v1.ServiceAlias.service_ref:type_name -> netguard.v1.ServiceRef
	12,  // 43: netguard.v1.ServiceAlias.meta:type_name -> netguard.v1.Meta
	7,   // 44: netguard.v1.AddressGroupBindingPolicy.self_ref:type_name -> netguard.v1.ResourceIdentifier
	14,  // 45: netguard.v1.AddressGroupBindingPolicy.service_ref:type_name -> netguard.v1.ServiceRef
	13,  // 46: netguard.v1.AddressGroupBindingPolicy.address_group_ref:type_name -> netguard.v1.AddressGroupRef
	12,  // 47: netguard.v1.AddressGroupBindingPolicy.meta:type_name -> netguard.v1.Meta
	7,   // 48: netguard.v1.RuleS2S.self_ref:type_name -> netguard.v1.ResourceIdentifier
	0,   // 49: netguard.v1.RuleS2S.traffic:type_name -> netguard.v1.Traffic
	14,  // 50: netguard.v1.RuleS2S.service_local_ref:type_name -> netguard.v1.ServiceRef
	14,  // 51: netguard.v1.RuleS2S.service_ref:type_name -> netguard.v1.ServiceRef
	7,   // 52: netguard.v1.RuleS2S.ieag_ag_rule_refs:type_name -> netguard.v1.ResourceIdentifier
	9,   // 53: netguard.v1.RuleS2S.ieag_ag_rule_object_refs:type_name -> netguard.v1.NamespacedObjectReference
	12,  // 54: netguard.v1.RuleS2S.meta:type_name -> netguard.v1.Meta
	7,   // 55: netguard.v1.IEAgAgRule.self_ref:type_name -> netguard.v1.ResourceIdentifier
	3,   // 56: netguard.v1.IEAgAgRule.transport:type_name -> netguard.v1.Networks.NetIP.Transport
	0,   // 57: netguard.v1.IEAgAgRule.traffic:type_name -> netguard.v1.Traffic
	13,  // 58: netguard.v1.IEAgAgRule.address_group_local:type_name -> netguard.v1.AddressGroupRef
	13,  // 59: netguard.v1.IEAgAgRule.address_group:type_name -> netguard.v1.AddressGroupRef
	29,  // 60: netguard.v1.IEAgAgRule.ports:type_name -> netguard.v1.PortSpec
	1,   // 61: netguard.v1.IEAgAgRule.action:type_name -> netguard.v1.RuleAction
	12,  // 62: netguard.v1.IEAgAgRule.meta:type_name -> netguard.v1.Meta
	86,  // 63: netguard.v1.SyncStatusResp.updated_at:type_name -> google.protobuf.Timestamp
	5,   // 64: netguard.v1.SyncServices.services:type_name -> netguard.v1.Service
	17,  // 65: netguard.v1.SyncAddressGroups.address_groups:type_name -> netguard.v1.AddressGroup
	18,  // 66: netguard.v1.SyncAddressGroupBindings.address_group_bindings:type_name -> netguard.v1.AddressGroupBinding
	24,  // 67: netguard.v1.SyncAddressGroupPortMappings.address_group_port_mappings:type_name -> netguard.v1.AddressGroupPortMapping
	27,  // 68: netguard.v1.SyncRuleS2S.rule_s2s:type_name -> netguard.v1.RuleS2S
	25,  // 69: netguard.v1.SyncServiceAliases.service_aliases:type_name -> netguard.v1.ServiceAlias
	26,  // 70: netguard.v1.SyncAddressGroupBindingPolicies.address_group_binding_policies:type_name -> netguard.v1.AddressGroupBindingPolicy
	28,  // 71: netguard.v1.SyncIEAgAgRules.ieagag_rules:type_name -> netguard.v1.IEAgAgRule
	16,  // 72: netguard.v1.SyncNetworks.networks:type_name -> netguard.v1.Network
	19,  // 73: netguard.v1.SyncNetworkBindings.network_bindings:type_name -> netguard.v1.NetworkBinding
	7,   // 74: netguard.v1.ListServicesReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	5,   // 75: netguard.v1.ListServicesResp.items:type_name -> netguard.v1.Service
	7,   // 76: netguard.v1.GetServiceReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	5,   // 77: netguard.v1.GetServiceResp.service:type_name -> netguard.v1.Service
	7,   // 78: netguard.v1.ListAddressGroupsReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	17,  // 79: netguard.v1.ListAddressGroupsResp.items:type_name -> netguard.v1.AddressGroup
	7,   // 80: netguard.v1.GetAddressGroupReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	17,  // 81: netguard.v1.GetAddressGroupResp.address_group:type_name -> netguard.v1.AddressGroup
	7,   // 82: netguard.v1.ListAddressGroupBindingsReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	18,  // 83: netguard.v1.ListAddressGroupBindingsResp.items:type_name -> netguard.v1.AddressGroupBinding
	7,   // 84: netguard.v1.ListAddressGroupPortMappingsReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	24,  // 85: netguard.v1.ListAddressGroupPortMappingsResp.items:type_name -> netguard.v1.AddressGroupPortMapping
	7,   // 86: netguard.v1.ListRuleS2SReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	27,  // 87: netguard.v1.ListRuleS2SResp.items:type_name -> netguard.v1.RuleS2S
	7,   // 88: netguard.v1.ListServiceAliasesReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	25,  // 89: netguard.v1.ListServiceAliasesResp.items:type_name -> netguard.v1.ServiceAlias
	7,   // 90: netguard.v1.GetAddressGroupBindingReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	18,  // 91: netguard.v1.GetAddressGroupBindingResp.address_group_binding:type_name -> netguard.v1.AddressGroupBinding
	7,   // 92: netguard.v1.GetAddressGroupPortMappingReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	24,  // 93: netguard.v1.GetAddressGroupPortMappingResp.address_group_port_mapping:type_name -> netguard.v1.AddressGroupPortMapping
	7,   // 94: netguard.v1.GetRuleS2SReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	27,  // 95: netguard.v1.GetRuleS2SResp.rule_s2s:type_name -> netguard.v1.RuleS2S
	7,   // 96: netguard.v1.GetServiceAliasReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	25,  // 97: netguard.v1.GetServiceAliasResp.service_alias:type_name -> netguard.v1.ServiceAlias
	7,   // 98: netguard.v1.ListAddressGroupBindingPoliciesReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	26,  // 99: netguard.v1.ListAddressGroupBindingPoliciesResp.items:type_name -> netguard.v1.AddressGroupBindingPolicy
	7,   // 100: netguard.v1.GetAddressGroupBindingPolicyReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	26,  // 101: netguard.v1.GetAddressGroupBindingPolicyResp.address_group_binding_policy:type_name -> netguard.v1.AddressGroupBindingPolicy
	7,   // 102: netguard.v1.ListIEAgAgRulesReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	28,  // 103: netguard.v1.ListIEAgAgRulesResp.items:type_name -> netguard.v1.IEAgAgRule
	7,   // 104: netguard.v1.GetIEAgAgRuleReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	28,  // 105: netguard.v1.GetIEAgAgRuleResp.ieagag_rule:type_name -> netguard.v1.IEAgAgRule
	7,   // 106: netguard.v1.ListNetworksReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	16,  // 107: netguard.v1.ListNetworksResp.items:type_name -> netguard.v1.Network
	7,   // 108: netguard.v1.GetNetworkReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	16,  // 109: netguard.v1.GetNetworkResp.network:type_name -> netguard.v1.Network
	7,   // 110: netguard.v1.ListNetworkBindingsReq.identifiers:type_name -> netguard.v1.ResourceIdentifier
	19,  // 111: netguard.v1.ListNetworkBindingsResp.items:type_name -> netguard.v1.NetworkBinding
	7,   // 112: netguard.v1.GetNetworkBindingReq.identifier:type_name -> netguard.v1.ResourceIdentifier
	19,  // 113: netguard.v1.GetNetworkBindingResp.network_binding:type_name -> netguard.v1.NetworkBinding
	2,   // 114: netguard.v1.SyncReq.sync_op:type_name -> netguard.v1.SyncOp
	31,  // 115: netguard.v1.SyncReq.services:type_name -> netguard.v1.SyncServices
	32,  // 116: netguard.v1.SyncReq.address_groups:type_name -> netguard.v1.SyncAddressGroups
	33,  // 117: netguard.v1.SyncReq.address_group_bindings:type_name -> netguard.v1.SyncAddressGroupBindings
	34,  // 118: netguard.v1.SyncReq.address_group_port_mappings:type_name -> netguard.v1.SyncAddressGroupPortMappings
	35,  // 119: netguard.v1.SyncReq.rule_s2s:type_name -> netguard.v1.SyncRuleS2S
	36,  // 120: netguard.v1.SyncReq.service_aliases:type_name -> netguard.v1.SyncServiceAliases
	37,  // 121: netguard.v1.SyncReq.address_group_binding_policies:type_name -> netguard.v1.SyncAddressGroupBindingPolicies
	38,  // 122: netguard.v1.SyncReq.ieagag_rules:type_name -> netguard.v1.SyncIEAgAgRules
	39,  // 123: netguard.v1.SyncReq.networks:type_name -> netguard.v1.SyncNetworks
	40,  // 124: netguard.v1.SyncReq.network_bindings:type_name -> netguard.v1.SyncNetworkBindings
	22,  // 125: netguard.v1.ProtocolPorts.PortsEntry.value:type_name -> netguard.v1.PortRanges
	81,  // 126: netguard.v1.NetguardService.Sync:input_type -> netguard.v1.SyncReq
	87,  // 127: netguard.v1.NetguardService.SyncStatus:input_type -> google.protobuf.Empty
	41,  // 128: netguard.v1.NetguardService.ListServices:input_type -> netguard.v1.ListServicesReq
	43,  // 129: netguard.v1.NetguardService.GetService:input_type -> netguard.v1.GetServiceReq
	45,  // 130: netguard.v1.NetguardService.ListAddressGroups:input_type -> netguard.v1.ListAddressGroupsReq
	47,  // 131: netguard.v1.NetguardService.GetAddressGroup:input_type -> netguard.v1.GetAddressGroupReq
	49,  // 132: netguard.v1.NetguardService.ListAddressGroupBindings:input_type -> netguard.v1.ListAddressGroupBindingsReq
	57,  // 133: netguard.v1.NetguardService.GetAddressGroupBinding:input_type -> netguard.v1.GetAddressGroupBindingReq
	51,  // 134: netguard.v1.NetguardService.ListAddressGroupPortMappings:input_type -> netguard.v1.ListAddressGroupPortMappingsReq
	59,  // 135: netguard.v1.NetguardService.GetAddressGroupPortMapping:input_type -> netguard.v1.GetAddressGroupPortMappingReq
	53,  // 136: netguard.v1.NetguardService.ListRuleS2S:input_type -> netguard.v1.ListRuleS2SReq
	61,  // 137: netguard.v1.NetguardService.GetRuleS2S:input_type -> netguard.v1.GetRuleS2SReq
	55,  // 138: netguard.v1.NetguardService.ListServiceAliases:input_type -> netguard.v1.ListServiceAliasesReq
	63,  // 139: netguard.v1.NetguardService.GetServiceAlias:input_type -> netguard.v1.GetServiceAliasReq
	65,  // 140: netguard.v1.NetguardService.ListAddressGroupBindingPolicies:input_type -> netguard.v1.ListAddressGroupBindingPoliciesReq
	67,  // 141: netguard.v1.NetguardService.GetAddressGroupBindingPolicy:input_type -> netguard.v1.GetAddressGroupBindingPolicyReq
	69,  // 142: netguard.v1.NetguardService.ListIEAgAgRules:input_type -> netguard.v1.ListIEAgAgRulesReq
	71,  // 143: netguard.v1.NetguardService.GetIEAgAgRule:input_type -> netguard.v1.GetIEAgAgRuleReq
	73,  // 144: netguard.v1.NetguardService.ListNetworks:input_type -> netguard.v1.ListNetworksReq
	75,  // 145: netguard.v1.NetguardService.GetNetwork:input_type -> netguard.v1.GetNetworkReq
	77,  // 146: netguard.v1.NetguardService.ListNetworkBindings:input_type -> netguard.v1.ListNetworkBindingsReq
	79,  // 147: netguard.v1.NetguardService.GetNetworkBinding:input_type -> netguard.v1.GetNetworkBindingReq
	87,  // 148: netguard.v1.NetguardService.Sync:output_type -> google.protobuf.Empty
	30,  // 149: netguard.v1.NetguardService.SyncStatus:output_type -> netguard.v1.SyncStatusResp
	42,  // 150: netguard.v1.NetguardService.ListServices:output_type -> netguard.v1.ListServicesResp
	44,  // 151: netguard.v1.NetguardService.GetService:output_type -> netguard.v1.GetServiceResp
	46,  // 152: netguard.v1.NetguardService.ListAddressGroups:output_type -> netguard.v1.ListAddressGroupsResp
	48,  // 153: netguard.v1.NetguardService.GetAddressGroup:output_type -> netguard.v1.GetAddressGroupResp
	50,  // 154: netguard.v1.NetguardService.ListAddressGroupBindings:output_type -> netguard.v1.ListAddressGroupBindingsResp
	58,  // 155: netguard.v1.NetguardService.GetAddressGroupBinding:output_type -> netguard.v1.GetAddressGroupBindingResp
	52,  // 156: netguard.v1.NetguardService.ListAddressGroupPortMappings:output_type -> netguard.v1.ListAddressGroupPortMappingsResp
	60,  // 157: netguard.v1.NetguardService.GetAddressGroupPortMapping:output_type -> netguard.v1.GetAddressGroupPortMappingResp
	54,  // 158: netguard.v1.NetguardService.ListRuleS2S:output_type -> netguard.v1.ListRuleS2SResp
	62,  // 159: netguard.v1.NetguardService.GetRuleS2S:output_type -> netguard.v1.GetRuleS2SResp
	56,  // 160: netguard.v1.NetguardService.ListServiceAliases:output_type -> netguard.v1.ListServiceAliasesResp
	64,  // 161: netguard.v1.NetguardService.GetServiceAlias:output_type -> netguard.v1.GetServiceAliasResp
	66,  // 162: netguard.v1.NetguardService.ListAddressGroupBindingPolicies:output_type -> netguard.v1.ListAddressGroupBindingPoliciesResp
	68,  // 163: netguard.v1.NetguardService.GetAddressGroupBindingPolicy:output_type -> netguard.v1.GetAddressGroupBindingPolicyResp
	70,  // 164: netguard.v1.NetguardService.ListIEAgAgRules:output_type -> netguard.v1.ListIEAgAgRulesResp
	72,  // 165: netguard.v1.NetguardService.GetIEAgAgRule:output_type -> netguard.v1.GetIEAgAgRuleResp
	74,  // 166: netguard.v1.NetguardService.ListNetworks:output_type -> netguard.v1.ListNetworksResp
	76,  // 167: netguard.v1.NetguardService.GetNetwork:output_type -> netguard.v1.GetNetworkResp
	78,  // 168: netguard.v1.NetguardService.ListNetworkBindings:output_type -> netguard.v1.ListNetworkBindingsResp
	80,  // 169: netguard.v1.NetguardService.GetNetworkBinding:output_type -> netguard.v1.GetNetworkBindingResp
	148, // [148:170] is the sub-list for method output_type
	126, // [126:148] is the sub-list for method input_type
	126, // [126:126] is the sub-list for extension type_name
	126, // [126:126] is the sub-list for extension extendee
	0,   // [0:126] is the sub-list for field type_name
}

func init() { file_api_netguard_api_proto_init() }
func file_api_netguard_api_proto_init() {
	if File_api_netguard_api_proto != nil {
		return
	}
	file_api_netguard_api_proto_msgTypes[77].OneofWrappers = []any{
		(*SyncReq_Services)(nil),
		(*SyncReq_AddressGroups)(nil),
		(*SyncReq_AddressGroupBindings)(nil),
		(*SyncReq_AddressGroupPortMappings)(nil),
		(*SyncReq_RuleS2S)(nil),
		(*SyncReq_ServiceAliases)(nil),
		(*SyncReq_AddressGroupBindingPolicies)(nil),
		(*SyncReq_IeagagRules)(nil),
		(*SyncReq_Networks)(nil),
		(*SyncReq_NetworkBindings)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_netguard_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_netguard_api_proto_goTypes,
		DependencyIndexes: file_api_netguard_api_proto_depIdxs,
		EnumInfos:         file_api_netguard_api_proto_enumTypes,
		MessageInfos:      file_api_netguard_api_proto_msgTypes,
	}.Build()
	File_api_netguard_api_proto = out.File
	file_api_netguard_api_proto_rawDesc = nil
	file_api_netguard_api_proto_goTypes = nil
	file_api_netguard_api_proto_depIdxs = nil
}
