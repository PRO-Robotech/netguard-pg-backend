// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: netguard/api.proto

package netguard

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	common "netguard-pg-backend/protos/pkg/api/common"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service - represents a service with ports
type Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IngressPorts  []*IngressPort         `protobuf:"bytes,4,rep,name=ingress_ports,json=ingressPorts,proto3" json:"ingress_ports,omitempty"`
	AddressGroups []*AddressGroupRef     `protobuf:"bytes,5,rep,name=address_groups,json=addressGroups,proto3" json:"address_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_netguard_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Service) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Service) GetIngressPorts() []*IngressPort {
	if x != nil {
		return x.IngressPorts
	}
	return nil
}

func (x *Service) GetAddressGroups() []*AddressGroupRef {
	if x != nil {
		return x.AddressGroups
	}
	return nil
}

// IngressPort - defines a port configuration for ingress traffic
type IngressPort struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Protocol      common.Networks_NetIP_Transport `protobuf:"varint,1,opt,name=protocol,proto3,enum=common.Networks_NetIP_Transport" json:"protocol,omitempty"`
	Port          string                          `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Description   string                          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressPort) Reset() {
	*x = IngressPort{}
	mi := &file_netguard_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPort) ProtoMessage() {}

func (x *IngressPort) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPort.ProtoReflect.Descriptor instead.
func (*IngressPort) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{1}
}

func (x *IngressPort) GetProtocol() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Protocol
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *IngressPort) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *IngressPort) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// AddressGroupRef - reference to an address group
type AddressGroupRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressGroupRef) Reset() {
	*x = AddressGroupRef{}
	mi := &file_netguard_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupRef) ProtoMessage() {}

func (x *AddressGroupRef) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupRef.ProtoReflect.Descriptor instead.
func (*AddressGroupRef) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{2}
}

func (x *AddressGroupRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddressGroupRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// ServiceRef - reference to a service
type ServiceRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceRef) Reset() {
	*x = ServiceRef{}
	mi := &file_netguard_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRef) ProtoMessage() {}

func (x *ServiceRef) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRef.ProtoReflect.Descriptor instead.
func (*ServiceRef) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// AddressGroup - represents a group of addresses
type AddressGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Addresses     []string               `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Services      []*ServiceRef          `protobuf:"bytes,5,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressGroup) Reset() {
	*x = AddressGroup{}
	mi := &file_netguard_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroup) ProtoMessage() {}

func (x *AddressGroup) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroup.ProtoReflect.Descriptor instead.
func (*AddressGroup) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{4}
}

func (x *AddressGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddressGroup) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AddressGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddressGroup) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AddressGroup) GetServices() []*ServiceRef {
	if x != nil {
		return x.Services
	}
	return nil
}

// AddressGroupBinding - binding between a service and an address group
type AddressGroupBinding struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServiceRef      *ServiceRef            `protobuf:"bytes,3,opt,name=service_ref,json=serviceRef,proto3" json:"service_ref,omitempty"`
	AddressGroupRef *AddressGroupRef       `protobuf:"bytes,4,opt,name=address_group_ref,json=addressGroupRef,proto3" json:"address_group_ref,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddressGroupBinding) Reset() {
	*x = AddressGroupBinding{}
	mi := &file_netguard_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupBinding) ProtoMessage() {}

func (x *AddressGroupBinding) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupBinding.ProtoReflect.Descriptor instead.
func (*AddressGroupBinding) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{5}
}

func (x *AddressGroupBinding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddressGroupBinding) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AddressGroupBinding) GetServiceRef() *ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *AddressGroupBinding) GetAddressGroupRef() *AddressGroupRef {
	if x != nil {
		return x.AddressGroupRef
	}
	return nil
}

// ProtocolPorts - mapping of protocols to port ranges
type ProtocolPorts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ports         map[string]*PortRanges `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolPorts) Reset() {
	*x = ProtocolPorts{}
	mi := &file_netguard_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolPorts) ProtoMessage() {}

func (x *ProtocolPorts) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolPorts.ProtoReflect.Descriptor instead.
func (*ProtocolPorts) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{6}
}

func (x *ProtocolPorts) GetPorts() map[string]*PortRanges {
	if x != nil {
		return x.Ports
	}
	return nil
}

// PortRange - range of ports
type PortRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         int32                  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           int32                  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	mi := &file_netguard_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{7}
}

func (x *PortRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PortRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

// PortRanges - list of port ranges
type PortRanges struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ranges        []*PortRange           `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortRanges) Reset() {
	*x = PortRanges{}
	mi := &file_netguard_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRanges) ProtoMessage() {}

func (x *PortRanges) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRanges.ProtoReflect.Descriptor instead.
func (*PortRanges) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{8}
}

func (x *PortRanges) GetRanges() []*PortRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// ServicePortsRef - reference to a service and its allowed ports
type ServicePortsRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Ports         *ProtocolPorts         `protobuf:"bytes,3,opt,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServicePortsRef) Reset() {
	*x = ServicePortsRef{}
	mi := &file_netguard_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicePortsRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePortsRef) ProtoMessage() {}

func (x *ServicePortsRef) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePortsRef.ProtoReflect.Descriptor instead.
func (*ServicePortsRef) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{9}
}

func (x *ServicePortsRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServicePortsRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServicePortsRef) GetPorts() *ProtocolPorts {
	if x != nil {
		return x.Ports
	}
	return nil
}

// AddressGroupPortMapping - mapping between an address group and allowed ports
type AddressGroupPortMapping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AccessPorts   []*ServicePortsRef     `protobuf:"bytes,3,rep,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressGroupPortMapping) Reset() {
	*x = AddressGroupPortMapping{}
	mi := &file_netguard_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressGroupPortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGroupPortMapping) ProtoMessage() {}

func (x *AddressGroupPortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGroupPortMapping.ProtoReflect.Descriptor instead.
func (*AddressGroupPortMapping) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{10}
}

func (x *AddressGroupPortMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddressGroupPortMapping) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AddressGroupPortMapping) GetAccessPorts() []*ServicePortsRef {
	if x != nil {
		return x.AccessPorts
	}
	return nil
}

// RuleS2S - rule between two services
type RuleS2S struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Traffic         common.Traffic         `protobuf:"varint,3,opt,name=traffic,proto3,enum=common.Traffic" json:"traffic,omitempty"`
	ServiceLocalRef *ServiceRef            `protobuf:"bytes,4,opt,name=service_local_ref,json=serviceLocalRef,proto3" json:"service_local_ref,omitempty"`
	ServiceRef      *ServiceRef            `protobuf:"bytes,5,opt,name=service_ref,json=serviceRef,proto3" json:"service_ref,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RuleS2S) Reset() {
	*x = RuleS2S{}
	mi := &file_netguard_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleS2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleS2S) ProtoMessage() {}

func (x *RuleS2S) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleS2S.ProtoReflect.Descriptor instead.
func (*RuleS2S) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{11}
}

func (x *RuleS2S) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleS2S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RuleS2S) GetTraffic() common.Traffic {
	if x != nil {
		return x.Traffic
	}
	return common.Traffic(0)
}

func (x *RuleS2S) GetServiceLocalRef() *ServiceRef {
	if x != nil {
		return x.ServiceLocalRef
	}
	return nil
}

func (x *RuleS2S) GetServiceRef() *ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

// SyncStatusResp - sync status
type SyncStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncStatusResp) Reset() {
	*x = SyncStatusResp{}
	mi := &file_netguard_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusResp) ProtoMessage() {}

func (x *SyncStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusResp.ProtoReflect.Descriptor instead.
func (*SyncStatusResp) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{12}
}

func (x *SyncStatusResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// ListServicesReq - request to list services
type ListServicesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServicesReq) Reset() {
	*x = ListServicesReq{}
	mi := &file_netguard_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesReq) ProtoMessage() {}

func (x *ListServicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesReq.ProtoReflect.Descriptor instead.
func (*ListServicesReq) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{13}
}

func (x *ListServicesReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// ListServicesResp - response with list of services
type ListServicesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Service             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServicesResp) Reset() {
	*x = ListServicesResp{}
	mi := &file_netguard_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResp) ProtoMessage() {}

func (x *ListServicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResp.ProtoReflect.Descriptor instead.
func (*ListServicesResp) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListServicesResp) GetItems() []*Service {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListAddressGroupsReq - request to list address groups
type ListAddressGroupsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupsReq) Reset() {
	*x = ListAddressGroupsReq{}
	mi := &file_netguard_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupsReq) ProtoMessage() {}

func (x *ListAddressGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupsReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupsReq) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListAddressGroupsReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// ListAddressGroupsResp - response with list of address groups
type ListAddressGroupsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*AddressGroup        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupsResp) Reset() {
	*x = ListAddressGroupsResp{}
	mi := &file_netguard_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupsResp) ProtoMessage() {}

func (x *ListAddressGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupsResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupsResp) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListAddressGroupsResp) GetItems() []*AddressGroup {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListAddressGroupBindingsReq - request to list address group bindings
type ListAddressGroupBindingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupBindingsReq) Reset() {
	*x = ListAddressGroupBindingsReq{}
	mi := &file_netguard_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupBindingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupBindingsReq) ProtoMessage() {}

func (x *ListAddressGroupBindingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupBindingsReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupBindingsReq) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListAddressGroupBindingsReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// ListAddressGroupBindingsResp - response with list of address group bindings
type ListAddressGroupBindingsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*AddressGroupBinding `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupBindingsResp) Reset() {
	*x = ListAddressGroupBindingsResp{}
	mi := &file_netguard_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupBindingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupBindingsResp) ProtoMessage() {}

func (x *ListAddressGroupBindingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupBindingsResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupBindingsResp) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListAddressGroupBindingsResp) GetItems() []*AddressGroupBinding {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListAddressGroupPortMappingsReq - request to list address group port mappings
type ListAddressGroupPortMappingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupPortMappingsReq) Reset() {
	*x = ListAddressGroupPortMappingsReq{}
	mi := &file_netguard_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupPortMappingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupPortMappingsReq) ProtoMessage() {}

func (x *ListAddressGroupPortMappingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupPortMappingsReq.ProtoReflect.Descriptor instead.
func (*ListAddressGroupPortMappingsReq) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{19}
}

func (x *ListAddressGroupPortMappingsReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// ListAddressGroupPortMappingsResp - response with list of address group port mappings
type ListAddressGroupPortMappingsResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Items         []*AddressGroupPortMapping `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAddressGroupPortMappingsResp) Reset() {
	*x = ListAddressGroupPortMappingsResp{}
	mi := &file_netguard_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAddressGroupPortMappingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressGroupPortMappingsResp) ProtoMessage() {}

func (x *ListAddressGroupPortMappingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressGroupPortMappingsResp.ProtoReflect.Descriptor instead.
func (*ListAddressGroupPortMappingsResp) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{20}
}

func (x *ListAddressGroupPortMappingsResp) GetItems() []*AddressGroupPortMapping {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListRuleS2SReq - request to list rule s2s
type ListRuleS2SReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRuleS2SReq) Reset() {
	*x = ListRuleS2SReq{}
	mi := &file_netguard_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleS2SReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleS2SReq) ProtoMessage() {}

func (x *ListRuleS2SReq) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleS2SReq.ProtoReflect.Descriptor instead.
func (*ListRuleS2SReq) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{21}
}

func (x *ListRuleS2SReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// ListRuleS2SResp - response with list of rule s2s
type ListRuleS2SResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*RuleS2S             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRuleS2SResp) Reset() {
	*x = ListRuleS2SResp{}
	mi := &file_netguard_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleS2SResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleS2SResp) ProtoMessage() {}

func (x *ListRuleS2SResp) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleS2SResp.ProtoReflect.Descriptor instead.
func (*ListRuleS2SResp) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{22}
}

func (x *ListRuleS2SResp) GetItems() []*RuleS2S {
	if x != nil {
		return x.Items
	}
	return nil
}

// SyncReq - request to sync
type SyncReq struct {
	state                    protoimpl.MessageState     `protogen:"open.v1"`
	Services                 []*Service                 `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	AddressGroups            []*AddressGroup            `protobuf:"bytes,2,rep,name=address_groups,json=addressGroups,proto3" json:"address_groups,omitempty"`
	AddressGroupBindings     []*AddressGroupBinding     `protobuf:"bytes,3,rep,name=address_group_bindings,json=addressGroupBindings,proto3" json:"address_group_bindings,omitempty"`
	AddressGroupPortMappings []*AddressGroupPortMapping `protobuf:"bytes,4,rep,name=address_group_port_mappings,json=addressGroupPortMappings,proto3" json:"address_group_port_mappings,omitempty"`
	RuleS2S                  []*RuleS2S                 `protobuf:"bytes,5,rep,name=rule_s2s,json=ruleS2s,proto3" json:"rule_s2s,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	mi := &file_netguard_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_netguard_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_netguard_api_proto_rawDescGZIP(), []int{23}
}

func (x *SyncReq) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *SyncReq) GetAddressGroups() []*AddressGroup {
	if x != nil {
		return x.AddressGroups
	}
	return nil
}

func (x *SyncReq) GetAddressGroupBindings() []*AddressGroupBinding {
	if x != nil {
		return x.AddressGroupBindings
	}
	return nil
}

func (x *SyncReq) GetAddressGroupPortMappings() []*AddressGroupPortMapping {
	if x != nil {
		return x.AddressGroupPortMappings
	}
	return nil
}

func (x *SyncReq) GetRuleS2S() []*RuleS2S {
	if x != nil {
		return x.RuleS2S
	}
	return nil
}

var File_netguard_api_proto protoreflect.FileDescriptor

var file_netguard_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x18, 0x92, 0x41,
	0x15, 0x0a, 0x13, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x3e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x52, 0x0f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x3a,
	0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a,
	0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x22, 0x75, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xab, 0x02, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0xd2,
	0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0xd2, 0x01, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0xd2, 0x01, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0xd2, 0x01, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x4b,
	0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x27, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x48, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x33, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x5e, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32,
	0x53, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x32, 0x53, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x16, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x63, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x32, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x73, 0x32, 0xb1, 0x09, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x31, 0x92, 0x41, 0x1b, 0x1a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x3a, 0x20, 0x6d, 0x61,
	0x6b, 0x65, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x44,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x92, 0x41, 0x32, 0x1a, 0x30, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x44, 0x42, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x25, 0x1a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x4d, 0x92, 0x41, 0x30, 0x1a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xd5,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x65,
	0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x64, 0x92, 0x41, 0x3f, 0x1a, 0x3d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x3a,
	0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x72, 0x92, 0x41, 0x48, 0x1a, 0x46, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x32, 0x53, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x32, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x24, 0x1a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x32, 0x53, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x73, 0x32, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x73, 0x32, 0x73,
	0x1a, 0x19, 0x92, 0x41, 0x16, 0x12, 0x14, 0x4e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0xbc, 0x01, 0x92, 0x41,
	0x82, 0x01, 0x12, 0x13, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x20, 0x41,
	0x50, 0x49, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x44,
	0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x2f, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x67, 0x2d, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5a, 0x34, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x67, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x3b, 0x6e, 0x65, 0x74, 0x67, 0x75, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_netguard_api_proto_rawDescOnce sync.Once
	file_netguard_api_proto_rawDescData = file_netguard_api_proto_rawDesc
)

func file_netguard_api_proto_rawDescGZIP() []byte {
	file_netguard_api_proto_rawDescOnce.Do(func() {
		file_netguard_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_netguard_api_proto_rawDescData)
	})
	return file_netguard_api_proto_rawDescData
}

var file_netguard_api_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_netguard_api_proto_goTypes = []any{
	(*Service)(nil),                          // 0: netguard.v1.Service
	(*IngressPort)(nil),                      // 1: netguard.v1.IngressPort
	(*AddressGroupRef)(nil),                  // 2: netguard.v1.AddressGroupRef
	(*ServiceRef)(nil),                       // 3: netguard.v1.ServiceRef
	(*AddressGroup)(nil),                     // 4: netguard.v1.AddressGroup
	(*AddressGroupBinding)(nil),              // 5: netguard.v1.AddressGroupBinding
	(*ProtocolPorts)(nil),                    // 6: netguard.v1.ProtocolPorts
	(*PortRange)(nil),                        // 7: netguard.v1.PortRange
	(*PortRanges)(nil),                       // 8: netguard.v1.PortRanges
	(*ServicePortsRef)(nil),                  // 9: netguard.v1.ServicePortsRef
	(*AddressGroupPortMapping)(nil),          // 10: netguard.v1.AddressGroupPortMapping
	(*RuleS2S)(nil),                          // 11: netguard.v1.RuleS2S
	(*SyncStatusResp)(nil),                   // 12: netguard.v1.SyncStatusResp
	(*ListServicesReq)(nil),                  // 13: netguard.v1.ListServicesReq
	(*ListServicesResp)(nil),                 // 14: netguard.v1.ListServicesResp
	(*ListAddressGroupsReq)(nil),             // 15: netguard.v1.ListAddressGroupsReq
	(*ListAddressGroupsResp)(nil),            // 16: netguard.v1.ListAddressGroupsResp
	(*ListAddressGroupBindingsReq)(nil),      // 17: netguard.v1.ListAddressGroupBindingsReq
	(*ListAddressGroupBindingsResp)(nil),     // 18: netguard.v1.ListAddressGroupBindingsResp
	(*ListAddressGroupPortMappingsReq)(nil),  // 19: netguard.v1.ListAddressGroupPortMappingsReq
	(*ListAddressGroupPortMappingsResp)(nil), // 20: netguard.v1.ListAddressGroupPortMappingsResp
	(*ListRuleS2SReq)(nil),                   // 21: netguard.v1.ListRuleS2SReq
	(*ListRuleS2SResp)(nil),                  // 22: netguard.v1.ListRuleS2SResp
	(*SyncReq)(nil),                          // 23: netguard.v1.SyncReq
	nil,                                      // 24: netguard.v1.ProtocolPorts.PortsEntry
	(common.Networks_NetIP_Transport)(0),     // 25: common.Networks.NetIP.Transport
	(common.Traffic)(0),                      // 26: common.Traffic
	(*timestamppb.Timestamp)(nil),            // 27: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                    // 28: google.protobuf.Empty
}
var file_netguard_api_proto_depIdxs = []int32{
	1,  // 0: netguard.v1.Service.ingress_ports:type_name -> netguard.v1.IngressPort
	2,  // 1: netguard.v1.Service.address_groups:type_name -> netguard.v1.AddressGroupRef
	25, // 2: netguard.v1.IngressPort.protocol:type_name -> common.Networks.NetIP.Transport
	3,  // 3: netguard.v1.AddressGroup.services:type_name -> netguard.v1.ServiceRef
	3,  // 4: netguard.v1.AddressGroupBinding.service_ref:type_name -> netguard.v1.ServiceRef
	2,  // 5: netguard.v1.AddressGroupBinding.address_group_ref:type_name -> netguard.v1.AddressGroupRef
	24, // 6: netguard.v1.ProtocolPorts.ports:type_name -> netguard.v1.ProtocolPorts.PortsEntry
	7,  // 7: netguard.v1.PortRanges.ranges:type_name -> netguard.v1.PortRange
	6,  // 8: netguard.v1.ServicePortsRef.ports:type_name -> netguard.v1.ProtocolPorts
	9,  // 9: netguard.v1.AddressGroupPortMapping.access_ports:type_name -> netguard.v1.ServicePortsRef
	26, // 10: netguard.v1.RuleS2S.traffic:type_name -> common.Traffic
	3,  // 11: netguard.v1.RuleS2S.service_local_ref:type_name -> netguard.v1.ServiceRef
	3,  // 12: netguard.v1.RuleS2S.service_ref:type_name -> netguard.v1.ServiceRef
	27, // 13: netguard.v1.SyncStatusResp.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 14: netguard.v1.ListServicesResp.items:type_name -> netguard.v1.Service
	4,  // 15: netguard.v1.ListAddressGroupsResp.items:type_name -> netguard.v1.AddressGroup
	5,  // 16: netguard.v1.ListAddressGroupBindingsResp.items:type_name -> netguard.v1.AddressGroupBinding
	10, // 17: netguard.v1.ListAddressGroupPortMappingsResp.items:type_name -> netguard.v1.AddressGroupPortMapping
	11, // 18: netguard.v1.ListRuleS2SResp.items:type_name -> netguard.v1.RuleS2S
	0,  // 19: netguard.v1.SyncReq.services:type_name -> netguard.v1.Service
	4,  // 20: netguard.v1.SyncReq.address_groups:type_name -> netguard.v1.AddressGroup
	5,  // 21: netguard.v1.SyncReq.address_group_bindings:type_name -> netguard.v1.AddressGroupBinding
	10, // 22: netguard.v1.SyncReq.address_group_port_mappings:type_name -> netguard.v1.AddressGroupPortMapping
	11, // 23: netguard.v1.SyncReq.rule_s2s:type_name -> netguard.v1.RuleS2S
	8,  // 24: netguard.v1.ProtocolPorts.PortsEntry.value:type_name -> netguard.v1.PortRanges
	23, // 25: netguard.v1.NetguardService.Sync:input_type -> netguard.v1.SyncReq
	28, // 26: netguard.v1.NetguardService.SyncStatus:input_type -> google.protobuf.Empty
	13, // 27: netguard.v1.NetguardService.ListServices:input_type -> netguard.v1.ListServicesReq
	15, // 28: netguard.v1.NetguardService.ListAddressGroups:input_type -> netguard.v1.ListAddressGroupsReq
	17, // 29: netguard.v1.NetguardService.ListAddressGroupBindings:input_type -> netguard.v1.ListAddressGroupBindingsReq
	19, // 30: netguard.v1.NetguardService.ListAddressGroupPortMappings:input_type -> netguard.v1.ListAddressGroupPortMappingsReq
	21, // 31: netguard.v1.NetguardService.ListRuleS2S:input_type -> netguard.v1.ListRuleS2SReq
	28, // 32: netguard.v1.NetguardService.Sync:output_type -> google.protobuf.Empty
	12, // 33: netguard.v1.NetguardService.SyncStatus:output_type -> netguard.v1.SyncStatusResp
	14, // 34: netguard.v1.NetguardService.ListServices:output_type -> netguard.v1.ListServicesResp
	16, // 35: netguard.v1.NetguardService.ListAddressGroups:output_type -> netguard.v1.ListAddressGroupsResp
	18, // 36: netguard.v1.NetguardService.ListAddressGroupBindings:output_type -> netguard.v1.ListAddressGroupBindingsResp
	20, // 37: netguard.v1.NetguardService.ListAddressGroupPortMappings:output_type -> netguard.v1.ListAddressGroupPortMappingsResp
	22, // 38: netguard.v1.NetguardService.ListRuleS2S:output_type -> netguard.v1.ListRuleS2SResp
	32, // [32:39] is the sub-list for method output_type
	25, // [25:32] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_netguard_api_proto_init() }
func file_netguard_api_proto_init() {
	if File_netguard_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netguard_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_netguard_api_proto_goTypes,
		DependencyIndexes: file_netguard_api_proto_depIdxs,
		MessageInfos:      file_netguard_api_proto_msgTypes,
	}.Build()
	File_netguard_api_proto = out.File
	file_netguard_api_proto_rawDesc = nil
	file_netguard_api_proto_goTypes = nil
	file_netguard_api_proto_depIdxs = nil
}
