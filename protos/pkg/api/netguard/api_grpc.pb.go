// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: netguard/api.proto

package netguard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetguardService_Sync_FullMethodName                            = "/netguard.v1.NetguardService/Sync"
	NetguardService_SyncStatus_FullMethodName                      = "/netguard.v1.NetguardService/SyncStatus"
	NetguardService_ListServices_FullMethodName                    = "/netguard.v1.NetguardService/ListServices"
	NetguardService_GetService_FullMethodName                      = "/netguard.v1.NetguardService/GetService"
	NetguardService_ListAddressGroups_FullMethodName               = "/netguard.v1.NetguardService/ListAddressGroups"
	NetguardService_GetAddressGroup_FullMethodName                 = "/netguard.v1.NetguardService/GetAddressGroup"
	NetguardService_ListAddressGroupBindings_FullMethodName        = "/netguard.v1.NetguardService/ListAddressGroupBindings"
	NetguardService_GetAddressGroupBinding_FullMethodName          = "/netguard.v1.NetguardService/GetAddressGroupBinding"
	NetguardService_ListAddressGroupPortMappings_FullMethodName    = "/netguard.v1.NetguardService/ListAddressGroupPortMappings"
	NetguardService_GetAddressGroupPortMapping_FullMethodName      = "/netguard.v1.NetguardService/GetAddressGroupPortMapping"
	NetguardService_ListRuleS2S_FullMethodName                     = "/netguard.v1.NetguardService/ListRuleS2S"
	NetguardService_GetRuleS2S_FullMethodName                      = "/netguard.v1.NetguardService/GetRuleS2S"
	NetguardService_ListServiceAliases_FullMethodName              = "/netguard.v1.NetguardService/ListServiceAliases"
	NetguardService_GetServiceAlias_FullMethodName                 = "/netguard.v1.NetguardService/GetServiceAlias"
	NetguardService_ListAddressGroupBindingPolicies_FullMethodName = "/netguard.v1.NetguardService/ListAddressGroupBindingPolicies"
	NetguardService_GetAddressGroupBindingPolicy_FullMethodName    = "/netguard.v1.NetguardService/GetAddressGroupBindingPolicy"
)

// NetguardServiceClient is the client API for NetguardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type NetguardServiceClient interface {
	// Sync - syncs data in DB
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SyncStatus - gets last succeeded update DB status
	SyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResp, error)
	// ListServices - gets list of services
	ListServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListServicesResp, error)
	// GetService - gets a specific service by ID
	GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error)
	// ListAddressGroups - gets list of address groups
	ListAddressGroups(ctx context.Context, in *ListAddressGroupsReq, opts ...grpc.CallOption) (*ListAddressGroupsResp, error)
	// GetAddressGroup - gets a specific address group by ID
	GetAddressGroup(ctx context.Context, in *GetAddressGroupReq, opts ...grpc.CallOption) (*GetAddressGroupResp, error)
	// ListAddressGroupBindings - gets list of address group bindings
	ListAddressGroupBindings(ctx context.Context, in *ListAddressGroupBindingsReq, opts ...grpc.CallOption) (*ListAddressGroupBindingsResp, error)
	// GetAddressGroupBinding - gets a specific address group binding by ID
	GetAddressGroupBinding(ctx context.Context, in *GetAddressGroupBindingReq, opts ...grpc.CallOption) (*GetAddressGroupBindingResp, error)
	// ListAddressGroupPortMappings - gets list of address group port mappings
	ListAddressGroupPortMappings(ctx context.Context, in *ListAddressGroupPortMappingsReq, opts ...grpc.CallOption) (*ListAddressGroupPortMappingsResp, error)
	// GetAddressGroupPortMapping - gets a specific address group port mapping by ID
	GetAddressGroupPortMapping(ctx context.Context, in *GetAddressGroupPortMappingReq, opts ...grpc.CallOption) (*GetAddressGroupPortMappingResp, error)
	// ListRuleS2S - gets list of rule s2s
	ListRuleS2S(ctx context.Context, in *ListRuleS2SReq, opts ...grpc.CallOption) (*ListRuleS2SResp, error)
	// GetRuleS2S - gets a specific rule s2s by ID
	GetRuleS2S(ctx context.Context, in *GetRuleS2SReq, opts ...grpc.CallOption) (*GetRuleS2SResp, error)
	// ListServiceAliases - gets list of service aliases
	ListServiceAliases(ctx context.Context, in *ListServiceAliasesReq, opts ...grpc.CallOption) (*ListServiceAliasesResp, error)
	// GetServiceAlias - gets a specific service alias by ID
	GetServiceAlias(ctx context.Context, in *GetServiceAliasReq, opts ...grpc.CallOption) (*GetServiceAliasResp, error)
	// ListAddressGroupBindingPolicies - gets list of address group binding policies
	ListAddressGroupBindingPolicies(ctx context.Context, in *ListAddressGroupBindingPoliciesReq, opts ...grpc.CallOption) (*ListAddressGroupBindingPoliciesResp, error)
	// GetAddressGroupBindingPolicy - gets a specific address group binding policy by ID
	GetAddressGroupBindingPolicy(ctx context.Context, in *GetAddressGroupBindingPolicyReq, opts ...grpc.CallOption) (*GetAddressGroupBindingPolicyResp, error)
}

type netguardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetguardServiceClient(cc grpc.ClientConnInterface) NetguardServiceClient {
	return &netguardServiceClient{cc}
}

func (c *netguardServiceClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetguardService_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) SyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncStatusResp)
	err := c.cc.Invoke(ctx, NetguardService_SyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListServicesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResp)
	err := c.cc.Invoke(ctx, NetguardService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceResp)
	err := c.cc.Invoke(ctx, NetguardService_GetService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListAddressGroups(ctx context.Context, in *ListAddressGroupsReq, opts ...grpc.CallOption) (*ListAddressGroupsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressGroupsResp)
	err := c.cc.Invoke(ctx, NetguardService_ListAddressGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetAddressGroup(ctx context.Context, in *GetAddressGroupReq, opts ...grpc.CallOption) (*GetAddressGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressGroupResp)
	err := c.cc.Invoke(ctx, NetguardService_GetAddressGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListAddressGroupBindings(ctx context.Context, in *ListAddressGroupBindingsReq, opts ...grpc.CallOption) (*ListAddressGroupBindingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressGroupBindingsResp)
	err := c.cc.Invoke(ctx, NetguardService_ListAddressGroupBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetAddressGroupBinding(ctx context.Context, in *GetAddressGroupBindingReq, opts ...grpc.CallOption) (*GetAddressGroupBindingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressGroupBindingResp)
	err := c.cc.Invoke(ctx, NetguardService_GetAddressGroupBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListAddressGroupPortMappings(ctx context.Context, in *ListAddressGroupPortMappingsReq, opts ...grpc.CallOption) (*ListAddressGroupPortMappingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressGroupPortMappingsResp)
	err := c.cc.Invoke(ctx, NetguardService_ListAddressGroupPortMappings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetAddressGroupPortMapping(ctx context.Context, in *GetAddressGroupPortMappingReq, opts ...grpc.CallOption) (*GetAddressGroupPortMappingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressGroupPortMappingResp)
	err := c.cc.Invoke(ctx, NetguardService_GetAddressGroupPortMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListRuleS2S(ctx context.Context, in *ListRuleS2SReq, opts ...grpc.CallOption) (*ListRuleS2SResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRuleS2SResp)
	err := c.cc.Invoke(ctx, NetguardService_ListRuleS2S_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetRuleS2S(ctx context.Context, in *GetRuleS2SReq, opts ...grpc.CallOption) (*GetRuleS2SResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuleS2SResp)
	err := c.cc.Invoke(ctx, NetguardService_GetRuleS2S_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListServiceAliases(ctx context.Context, in *ListServiceAliasesReq, opts ...grpc.CallOption) (*ListServiceAliasesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServiceAliasesResp)
	err := c.cc.Invoke(ctx, NetguardService_ListServiceAliases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetServiceAlias(ctx context.Context, in *GetServiceAliasReq, opts ...grpc.CallOption) (*GetServiceAliasResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceAliasResp)
	err := c.cc.Invoke(ctx, NetguardService_GetServiceAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) ListAddressGroupBindingPolicies(ctx context.Context, in *ListAddressGroupBindingPoliciesReq, opts ...grpc.CallOption) (*ListAddressGroupBindingPoliciesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressGroupBindingPoliciesResp)
	err := c.cc.Invoke(ctx, NetguardService_ListAddressGroupBindingPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netguardServiceClient) GetAddressGroupBindingPolicy(ctx context.Context, in *GetAddressGroupBindingPolicyReq, opts ...grpc.CallOption) (*GetAddressGroupBindingPolicyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressGroupBindingPolicyResp)
	err := c.cc.Invoke(ctx, NetguardService_GetAddressGroupBindingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetguardServiceServer is the server API for NetguardService service.
// All implementations must embed UnimplementedNetguardServiceServer
// for forward compatibility.
//
// Service definition
type NetguardServiceServer interface {
	// Sync - syncs data in DB
	Sync(context.Context, *SyncReq) (*emptypb.Empty, error)
	// SyncStatus - gets last succeeded update DB status
	SyncStatus(context.Context, *emptypb.Empty) (*SyncStatusResp, error)
	// ListServices - gets list of services
	ListServices(context.Context, *ListServicesReq) (*ListServicesResp, error)
	// GetService - gets a specific service by ID
	GetService(context.Context, *GetServiceReq) (*GetServiceResp, error)
	// ListAddressGroups - gets list of address groups
	ListAddressGroups(context.Context, *ListAddressGroupsReq) (*ListAddressGroupsResp, error)
	// GetAddressGroup - gets a specific address group by ID
	GetAddressGroup(context.Context, *GetAddressGroupReq) (*GetAddressGroupResp, error)
	// ListAddressGroupBindings - gets list of address group bindings
	ListAddressGroupBindings(context.Context, *ListAddressGroupBindingsReq) (*ListAddressGroupBindingsResp, error)
	// GetAddressGroupBinding - gets a specific address group binding by ID
	GetAddressGroupBinding(context.Context, *GetAddressGroupBindingReq) (*GetAddressGroupBindingResp, error)
	// ListAddressGroupPortMappings - gets list of address group port mappings
	ListAddressGroupPortMappings(context.Context, *ListAddressGroupPortMappingsReq) (*ListAddressGroupPortMappingsResp, error)
	// GetAddressGroupPortMapping - gets a specific address group port mapping by ID
	GetAddressGroupPortMapping(context.Context, *GetAddressGroupPortMappingReq) (*GetAddressGroupPortMappingResp, error)
	// ListRuleS2S - gets list of rule s2s
	ListRuleS2S(context.Context, *ListRuleS2SReq) (*ListRuleS2SResp, error)
	// GetRuleS2S - gets a specific rule s2s by ID
	GetRuleS2S(context.Context, *GetRuleS2SReq) (*GetRuleS2SResp, error)
	// ListServiceAliases - gets list of service aliases
	ListServiceAliases(context.Context, *ListServiceAliasesReq) (*ListServiceAliasesResp, error)
	// GetServiceAlias - gets a specific service alias by ID
	GetServiceAlias(context.Context, *GetServiceAliasReq) (*GetServiceAliasResp, error)
	// ListAddressGroupBindingPolicies - gets list of address group binding policies
	ListAddressGroupBindingPolicies(context.Context, *ListAddressGroupBindingPoliciesReq) (*ListAddressGroupBindingPoliciesResp, error)
	// GetAddressGroupBindingPolicy - gets a specific address group binding policy by ID
	GetAddressGroupBindingPolicy(context.Context, *GetAddressGroupBindingPolicyReq) (*GetAddressGroupBindingPolicyResp, error)
	mustEmbedUnimplementedNetguardServiceServer()
}

// UnimplementedNetguardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetguardServiceServer struct{}

func (UnimplementedNetguardServiceServer) Sync(context.Context, *SyncReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedNetguardServiceServer) SyncStatus(context.Context, *emptypb.Empty) (*SyncStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStatus not implemented")
}
func (UnimplementedNetguardServiceServer) ListServices(context.Context, *ListServicesReq) (*ListServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedNetguardServiceServer) GetService(context.Context, *GetServiceReq) (*GetServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedNetguardServiceServer) ListAddressGroups(context.Context, *ListAddressGroupsReq) (*ListAddressGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressGroups not implemented")
}
func (UnimplementedNetguardServiceServer) GetAddressGroup(context.Context, *GetAddressGroupReq) (*GetAddressGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressGroup not implemented")
}
func (UnimplementedNetguardServiceServer) ListAddressGroupBindings(context.Context, *ListAddressGroupBindingsReq) (*ListAddressGroupBindingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressGroupBindings not implemented")
}
func (UnimplementedNetguardServiceServer) GetAddressGroupBinding(context.Context, *GetAddressGroupBindingReq) (*GetAddressGroupBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressGroupBinding not implemented")
}
func (UnimplementedNetguardServiceServer) ListAddressGroupPortMappings(context.Context, *ListAddressGroupPortMappingsReq) (*ListAddressGroupPortMappingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressGroupPortMappings not implemented")
}
func (UnimplementedNetguardServiceServer) GetAddressGroupPortMapping(context.Context, *GetAddressGroupPortMappingReq) (*GetAddressGroupPortMappingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressGroupPortMapping not implemented")
}
func (UnimplementedNetguardServiceServer) ListRuleS2S(context.Context, *ListRuleS2SReq) (*ListRuleS2SResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleS2S not implemented")
}
func (UnimplementedNetguardServiceServer) GetRuleS2S(context.Context, *GetRuleS2SReq) (*GetRuleS2SResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleS2S not implemented")
}
func (UnimplementedNetguardServiceServer) ListServiceAliases(context.Context, *ListServiceAliasesReq) (*ListServiceAliasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceAliases not implemented")
}
func (UnimplementedNetguardServiceServer) GetServiceAlias(context.Context, *GetServiceAliasReq) (*GetServiceAliasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAlias not implemented")
}
func (UnimplementedNetguardServiceServer) ListAddressGroupBindingPolicies(context.Context, *ListAddressGroupBindingPoliciesReq) (*ListAddressGroupBindingPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressGroupBindingPolicies not implemented")
}
func (UnimplementedNetguardServiceServer) GetAddressGroupBindingPolicy(context.Context, *GetAddressGroupBindingPolicyReq) (*GetAddressGroupBindingPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressGroupBindingPolicy not implemented")
}
func (UnimplementedNetguardServiceServer) mustEmbedUnimplementedNetguardServiceServer() {}
func (UnimplementedNetguardServiceServer) testEmbeddedByValue()                         {}

// UnsafeNetguardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetguardServiceServer will
// result in compilation errors.
type UnsafeNetguardServiceServer interface {
	mustEmbedUnimplementedNetguardServiceServer()
}

func RegisterNetguardServiceServer(s grpc.ServiceRegistrar, srv NetguardServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetguardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetguardService_ServiceDesc, srv)
}

func _NetguardService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).Sync(ctx, req.(*SyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_SyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).SyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_SyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).SyncStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListServices(ctx, req.(*ListServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetService(ctx, req.(*GetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListAddressGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListAddressGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListAddressGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListAddressGroups(ctx, req.(*ListAddressGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetAddressGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetAddressGroup(ctx, req.(*GetAddressGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListAddressGroupBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressGroupBindingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListAddressGroupBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListAddressGroupBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListAddressGroupBindings(ctx, req.(*ListAddressGroupBindingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetAddressGroupBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressGroupBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetAddressGroupBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetAddressGroupBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetAddressGroupBinding(ctx, req.(*GetAddressGroupBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListAddressGroupPortMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressGroupPortMappingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListAddressGroupPortMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListAddressGroupPortMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListAddressGroupPortMappings(ctx, req.(*ListAddressGroupPortMappingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetAddressGroupPortMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressGroupPortMappingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetAddressGroupPortMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetAddressGroupPortMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetAddressGroupPortMapping(ctx, req.(*GetAddressGroupPortMappingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListRuleS2S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleS2SReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListRuleS2S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListRuleS2S_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListRuleS2S(ctx, req.(*ListRuleS2SReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetRuleS2S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleS2SReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetRuleS2S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetRuleS2S_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetRuleS2S(ctx, req.(*GetRuleS2SReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListServiceAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceAliasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListServiceAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListServiceAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListServiceAliases(ctx, req.(*ListServiceAliasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetServiceAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAliasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetServiceAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetServiceAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetServiceAlias(ctx, req.(*GetServiceAliasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_ListAddressGroupBindingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressGroupBindingPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).ListAddressGroupBindingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_ListAddressGroupBindingPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).ListAddressGroupBindingPolicies(ctx, req.(*ListAddressGroupBindingPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetguardService_GetAddressGroupBindingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressGroupBindingPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetguardServiceServer).GetAddressGroupBindingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetguardService_GetAddressGroupBindingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetguardServiceServer).GetAddressGroupBindingPolicy(ctx, req.(*GetAddressGroupBindingPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NetguardService_ServiceDesc is the grpc.ServiceDesc for NetguardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetguardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netguard.v1.NetguardService",
	HandlerType: (*NetguardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _NetguardService_Sync_Handler,
		},
		{
			MethodName: "SyncStatus",
			Handler:    _NetguardService_SyncStatus_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _NetguardService_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _NetguardService_GetService_Handler,
		},
		{
			MethodName: "ListAddressGroups",
			Handler:    _NetguardService_ListAddressGroups_Handler,
		},
		{
			MethodName: "GetAddressGroup",
			Handler:    _NetguardService_GetAddressGroup_Handler,
		},
		{
			MethodName: "ListAddressGroupBindings",
			Handler:    _NetguardService_ListAddressGroupBindings_Handler,
		},
		{
			MethodName: "GetAddressGroupBinding",
			Handler:    _NetguardService_GetAddressGroupBinding_Handler,
		},
		{
			MethodName: "ListAddressGroupPortMappings",
			Handler:    _NetguardService_ListAddressGroupPortMappings_Handler,
		},
		{
			MethodName: "GetAddressGroupPortMapping",
			Handler:    _NetguardService_GetAddressGroupPortMapping_Handler,
		},
		{
			MethodName: "ListRuleS2S",
			Handler:    _NetguardService_ListRuleS2S_Handler,
		},
		{
			MethodName: "GetRuleS2S",
			Handler:    _NetguardService_GetRuleS2S_Handler,
		},
		{
			MethodName: "ListServiceAliases",
			Handler:    _NetguardService_ListServiceAliases_Handler,
		},
		{
			MethodName: "GetServiceAlias",
			Handler:    _NetguardService_GetServiceAlias_Handler,
		},
		{
			MethodName: "ListAddressGroupBindingPolicies",
			Handler:    _NetguardService_ListAddressGroupBindingPolicies_Handler,
		},
		{
			MethodName: "GetAddressGroupBindingPolicy",
			Handler:    _NetguardService_GetAddressGroupBindingPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netguard/api.proto",
}
