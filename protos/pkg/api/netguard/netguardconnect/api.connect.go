// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: netguard/api.proto

package netguardconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	netguard "netguard-pg-backend/protos/pkg/api/netguard"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetguardServiceName is the fully-qualified name of the NetguardService service.
	NetguardServiceName = "netguard.v1.NetguardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetguardServiceSyncProcedure is the fully-qualified name of the NetguardService's Sync RPC.
	NetguardServiceSyncProcedure = "/netguard.v1.NetguardService/Sync"
	// NetguardServiceSyncStatusProcedure is the fully-qualified name of the NetguardService's
	// SyncStatus RPC.
	NetguardServiceSyncStatusProcedure = "/netguard.v1.NetguardService/SyncStatus"
	// NetguardServiceListServicesProcedure is the fully-qualified name of the NetguardService's
	// ListServices RPC.
	NetguardServiceListServicesProcedure = "/netguard.v1.NetguardService/ListServices"
	// NetguardServiceGetServiceProcedure is the fully-qualified name of the NetguardService's
	// GetService RPC.
	NetguardServiceGetServiceProcedure = "/netguard.v1.NetguardService/GetService"
	// NetguardServiceListAddressGroupsProcedure is the fully-qualified name of the NetguardService's
	// ListAddressGroups RPC.
	NetguardServiceListAddressGroupsProcedure = "/netguard.v1.NetguardService/ListAddressGroups"
	// NetguardServiceGetAddressGroupProcedure is the fully-qualified name of the NetguardService's
	// GetAddressGroup RPC.
	NetguardServiceGetAddressGroupProcedure = "/netguard.v1.NetguardService/GetAddressGroup"
	// NetguardServiceListAddressGroupBindingsProcedure is the fully-qualified name of the
	// NetguardService's ListAddressGroupBindings RPC.
	NetguardServiceListAddressGroupBindingsProcedure = "/netguard.v1.NetguardService/ListAddressGroupBindings"
	// NetguardServiceGetAddressGroupBindingProcedure is the fully-qualified name of the
	// NetguardService's GetAddressGroupBinding RPC.
	NetguardServiceGetAddressGroupBindingProcedure = "/netguard.v1.NetguardService/GetAddressGroupBinding"
	// NetguardServiceListAddressGroupPortMappingsProcedure is the fully-qualified name of the
	// NetguardService's ListAddressGroupPortMappings RPC.
	NetguardServiceListAddressGroupPortMappingsProcedure = "/netguard.v1.NetguardService/ListAddressGroupPortMappings"
	// NetguardServiceGetAddressGroupPortMappingProcedure is the fully-qualified name of the
	// NetguardService's GetAddressGroupPortMapping RPC.
	NetguardServiceGetAddressGroupPortMappingProcedure = "/netguard.v1.NetguardService/GetAddressGroupPortMapping"
	// NetguardServiceListRuleS2SProcedure is the fully-qualified name of the NetguardService's
	// ListRuleS2S RPC.
	NetguardServiceListRuleS2SProcedure = "/netguard.v1.NetguardService/ListRuleS2S"
	// NetguardServiceGetRuleS2SProcedure is the fully-qualified name of the NetguardService's
	// GetRuleS2S RPC.
	NetguardServiceGetRuleS2SProcedure = "/netguard.v1.NetguardService/GetRuleS2S"
	// NetguardServiceListServiceAliasesProcedure is the fully-qualified name of the NetguardService's
	// ListServiceAliases RPC.
	NetguardServiceListServiceAliasesProcedure = "/netguard.v1.NetguardService/ListServiceAliases"
	// NetguardServiceGetServiceAliasProcedure is the fully-qualified name of the NetguardService's
	// GetServiceAlias RPC.
	NetguardServiceGetServiceAliasProcedure = "/netguard.v1.NetguardService/GetServiceAlias"
)

// NetguardServiceClient is a client for the netguard.v1.NetguardService service.
type NetguardServiceClient interface {
	// Sync - syncs data in DB
	Sync(context.Context, *connect.Request[netguard.SyncReq]) (*connect.Response[emptypb.Empty], error)
	// SyncStatus - gets last succeeded update DB status
	SyncStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[netguard.SyncStatusResp], error)
	// ListServices - gets list of services
	ListServices(context.Context, *connect.Request[netguard.ListServicesReq]) (*connect.Response[netguard.ListServicesResp], error)
	// GetService - gets a specific service by ID
	GetService(context.Context, *connect.Request[netguard.GetServiceReq]) (*connect.Response[netguard.GetServiceResp], error)
	// ListAddressGroups - gets list of address groups
	ListAddressGroups(context.Context, *connect.Request[netguard.ListAddressGroupsReq]) (*connect.Response[netguard.ListAddressGroupsResp], error)
	// GetAddressGroup - gets a specific address group by ID
	GetAddressGroup(context.Context, *connect.Request[netguard.GetAddressGroupReq]) (*connect.Response[netguard.GetAddressGroupResp], error)
	// ListAddressGroupBindings - gets list of address group bindings
	ListAddressGroupBindings(context.Context, *connect.Request[netguard.ListAddressGroupBindingsReq]) (*connect.Response[netguard.ListAddressGroupBindingsResp], error)
	// GetAddressGroupBinding - gets a specific address group binding by ID
	GetAddressGroupBinding(context.Context, *connect.Request[netguard.GetAddressGroupBindingReq]) (*connect.Response[netguard.GetAddressGroupBindingResp], error)
	// ListAddressGroupPortMappings - gets list of address group port mappings
	ListAddressGroupPortMappings(context.Context, *connect.Request[netguard.ListAddressGroupPortMappingsReq]) (*connect.Response[netguard.ListAddressGroupPortMappingsResp], error)
	// GetAddressGroupPortMapping - gets a specific address group port mapping by ID
	GetAddressGroupPortMapping(context.Context, *connect.Request[netguard.GetAddressGroupPortMappingReq]) (*connect.Response[netguard.GetAddressGroupPortMappingResp], error)
	// ListRuleS2S - gets list of rule s2s
	ListRuleS2S(context.Context, *connect.Request[netguard.ListRuleS2SReq]) (*connect.Response[netguard.ListRuleS2SResp], error)
	// GetRuleS2S - gets a specific rule s2s by ID
	GetRuleS2S(context.Context, *connect.Request[netguard.GetRuleS2SReq]) (*connect.Response[netguard.GetRuleS2SResp], error)
	// ListServiceAliases - gets list of service aliases
	ListServiceAliases(context.Context, *connect.Request[netguard.ListServiceAliasesReq]) (*connect.Response[netguard.ListServiceAliasesResp], error)
	// GetServiceAlias - gets a specific service alias by ID
	GetServiceAlias(context.Context, *connect.Request[netguard.GetServiceAliasReq]) (*connect.Response[netguard.GetServiceAliasResp], error)
}

// NewNetguardServiceClient constructs a client for the netguard.v1.NetguardService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetguardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetguardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	netguardServiceMethods := netguard.File_netguard_api_proto.Services().ByName("NetguardService").Methods()
	return &netguardServiceClient{
		sync: connect.NewClient[netguard.SyncReq, emptypb.Empty](
			httpClient,
			baseURL+NetguardServiceSyncProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("Sync")),
			connect.WithClientOptions(opts...),
		),
		syncStatus: connect.NewClient[emptypb.Empty, netguard.SyncStatusResp](
			httpClient,
			baseURL+NetguardServiceSyncStatusProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("SyncStatus")),
			connect.WithClientOptions(opts...),
		),
		listServices: connect.NewClient[netguard.ListServicesReq, netguard.ListServicesResp](
			httpClient,
			baseURL+NetguardServiceListServicesProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("ListServices")),
			connect.WithClientOptions(opts...),
		),
		getService: connect.NewClient[netguard.GetServiceReq, netguard.GetServiceResp](
			httpClient,
			baseURL+NetguardServiceGetServiceProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("GetService")),
			connect.WithClientOptions(opts...),
		),
		listAddressGroups: connect.NewClient[netguard.ListAddressGroupsReq, netguard.ListAddressGroupsResp](
			httpClient,
			baseURL+NetguardServiceListAddressGroupsProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("ListAddressGroups")),
			connect.WithClientOptions(opts...),
		),
		getAddressGroup: connect.NewClient[netguard.GetAddressGroupReq, netguard.GetAddressGroupResp](
			httpClient,
			baseURL+NetguardServiceGetAddressGroupProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("GetAddressGroup")),
			connect.WithClientOptions(opts...),
		),
		listAddressGroupBindings: connect.NewClient[netguard.ListAddressGroupBindingsReq, netguard.ListAddressGroupBindingsResp](
			httpClient,
			baseURL+NetguardServiceListAddressGroupBindingsProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("ListAddressGroupBindings")),
			connect.WithClientOptions(opts...),
		),
		getAddressGroupBinding: connect.NewClient[netguard.GetAddressGroupBindingReq, netguard.GetAddressGroupBindingResp](
			httpClient,
			baseURL+NetguardServiceGetAddressGroupBindingProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("GetAddressGroupBinding")),
			connect.WithClientOptions(opts...),
		),
		listAddressGroupPortMappings: connect.NewClient[netguard.ListAddressGroupPortMappingsReq, netguard.ListAddressGroupPortMappingsResp](
			httpClient,
			baseURL+NetguardServiceListAddressGroupPortMappingsProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("ListAddressGroupPortMappings")),
			connect.WithClientOptions(opts...),
		),
		getAddressGroupPortMapping: connect.NewClient[netguard.GetAddressGroupPortMappingReq, netguard.GetAddressGroupPortMappingResp](
			httpClient,
			baseURL+NetguardServiceGetAddressGroupPortMappingProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("GetAddressGroupPortMapping")),
			connect.WithClientOptions(opts...),
		),
		listRuleS2S: connect.NewClient[netguard.ListRuleS2SReq, netguard.ListRuleS2SResp](
			httpClient,
			baseURL+NetguardServiceListRuleS2SProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("ListRuleS2S")),
			connect.WithClientOptions(opts...),
		),
		getRuleS2S: connect.NewClient[netguard.GetRuleS2SReq, netguard.GetRuleS2SResp](
			httpClient,
			baseURL+NetguardServiceGetRuleS2SProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("GetRuleS2S")),
			connect.WithClientOptions(opts...),
		),
		listServiceAliases: connect.NewClient[netguard.ListServiceAliasesReq, netguard.ListServiceAliasesResp](
			httpClient,
			baseURL+NetguardServiceListServiceAliasesProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("ListServiceAliases")),
			connect.WithClientOptions(opts...),
		),
		getServiceAlias: connect.NewClient[netguard.GetServiceAliasReq, netguard.GetServiceAliasResp](
			httpClient,
			baseURL+NetguardServiceGetServiceAliasProcedure,
			connect.WithSchema(netguardServiceMethods.ByName("GetServiceAlias")),
			connect.WithClientOptions(opts...),
		),
	}
}

// netguardServiceClient implements NetguardServiceClient.
type netguardServiceClient struct {
	sync                         *connect.Client[netguard.SyncReq, emptypb.Empty]
	syncStatus                   *connect.Client[emptypb.Empty, netguard.SyncStatusResp]
	listServices                 *connect.Client[netguard.ListServicesReq, netguard.ListServicesResp]
	getService                   *connect.Client[netguard.GetServiceReq, netguard.GetServiceResp]
	listAddressGroups            *connect.Client[netguard.ListAddressGroupsReq, netguard.ListAddressGroupsResp]
	getAddressGroup              *connect.Client[netguard.GetAddressGroupReq, netguard.GetAddressGroupResp]
	listAddressGroupBindings     *connect.Client[netguard.ListAddressGroupBindingsReq, netguard.ListAddressGroupBindingsResp]
	getAddressGroupBinding       *connect.Client[netguard.GetAddressGroupBindingReq, netguard.GetAddressGroupBindingResp]
	listAddressGroupPortMappings *connect.Client[netguard.ListAddressGroupPortMappingsReq, netguard.ListAddressGroupPortMappingsResp]
	getAddressGroupPortMapping   *connect.Client[netguard.GetAddressGroupPortMappingReq, netguard.GetAddressGroupPortMappingResp]
	listRuleS2S                  *connect.Client[netguard.ListRuleS2SReq, netguard.ListRuleS2SResp]
	getRuleS2S                   *connect.Client[netguard.GetRuleS2SReq, netguard.GetRuleS2SResp]
	listServiceAliases           *connect.Client[netguard.ListServiceAliasesReq, netguard.ListServiceAliasesResp]
	getServiceAlias              *connect.Client[netguard.GetServiceAliasReq, netguard.GetServiceAliasResp]
}

// Sync calls netguard.v1.NetguardService.Sync.
func (c *netguardServiceClient) Sync(ctx context.Context, req *connect.Request[netguard.SyncReq]) (*connect.Response[emptypb.Empty], error) {
	return c.sync.CallUnary(ctx, req)
}

// SyncStatus calls netguard.v1.NetguardService.SyncStatus.
func (c *netguardServiceClient) SyncStatus(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[netguard.SyncStatusResp], error) {
	return c.syncStatus.CallUnary(ctx, req)
}

// ListServices calls netguard.v1.NetguardService.ListServices.
func (c *netguardServiceClient) ListServices(ctx context.Context, req *connect.Request[netguard.ListServicesReq]) (*connect.Response[netguard.ListServicesResp], error) {
	return c.listServices.CallUnary(ctx, req)
}

// GetService calls netguard.v1.NetguardService.GetService.
func (c *netguardServiceClient) GetService(ctx context.Context, req *connect.Request[netguard.GetServiceReq]) (*connect.Response[netguard.GetServiceResp], error) {
	return c.getService.CallUnary(ctx, req)
}

// ListAddressGroups calls netguard.v1.NetguardService.ListAddressGroups.
func (c *netguardServiceClient) ListAddressGroups(ctx context.Context, req *connect.Request[netguard.ListAddressGroupsReq]) (*connect.Response[netguard.ListAddressGroupsResp], error) {
	return c.listAddressGroups.CallUnary(ctx, req)
}

// GetAddressGroup calls netguard.v1.NetguardService.GetAddressGroup.
func (c *netguardServiceClient) GetAddressGroup(ctx context.Context, req *connect.Request[netguard.GetAddressGroupReq]) (*connect.Response[netguard.GetAddressGroupResp], error) {
	return c.getAddressGroup.CallUnary(ctx, req)
}

// ListAddressGroupBindings calls netguard.v1.NetguardService.ListAddressGroupBindings.
func (c *netguardServiceClient) ListAddressGroupBindings(ctx context.Context, req *connect.Request[netguard.ListAddressGroupBindingsReq]) (*connect.Response[netguard.ListAddressGroupBindingsResp], error) {
	return c.listAddressGroupBindings.CallUnary(ctx, req)
}

// GetAddressGroupBinding calls netguard.v1.NetguardService.GetAddressGroupBinding.
func (c *netguardServiceClient) GetAddressGroupBinding(ctx context.Context, req *connect.Request[netguard.GetAddressGroupBindingReq]) (*connect.Response[netguard.GetAddressGroupBindingResp], error) {
	return c.getAddressGroupBinding.CallUnary(ctx, req)
}

// ListAddressGroupPortMappings calls netguard.v1.NetguardService.ListAddressGroupPortMappings.
func (c *netguardServiceClient) ListAddressGroupPortMappings(ctx context.Context, req *connect.Request[netguard.ListAddressGroupPortMappingsReq]) (*connect.Response[netguard.ListAddressGroupPortMappingsResp], error) {
	return c.listAddressGroupPortMappings.CallUnary(ctx, req)
}

// GetAddressGroupPortMapping calls netguard.v1.NetguardService.GetAddressGroupPortMapping.
func (c *netguardServiceClient) GetAddressGroupPortMapping(ctx context.Context, req *connect.Request[netguard.GetAddressGroupPortMappingReq]) (*connect.Response[netguard.GetAddressGroupPortMappingResp], error) {
	return c.getAddressGroupPortMapping.CallUnary(ctx, req)
}

// ListRuleS2S calls netguard.v1.NetguardService.ListRuleS2S.
func (c *netguardServiceClient) ListRuleS2S(ctx context.Context, req *connect.Request[netguard.ListRuleS2SReq]) (*connect.Response[netguard.ListRuleS2SResp], error) {
	return c.listRuleS2S.CallUnary(ctx, req)
}

// GetRuleS2S calls netguard.v1.NetguardService.GetRuleS2S.
func (c *netguardServiceClient) GetRuleS2S(ctx context.Context, req *connect.Request[netguard.GetRuleS2SReq]) (*connect.Response[netguard.GetRuleS2SResp], error) {
	return c.getRuleS2S.CallUnary(ctx, req)
}

// ListServiceAliases calls netguard.v1.NetguardService.ListServiceAliases.
func (c *netguardServiceClient) ListServiceAliases(ctx context.Context, req *connect.Request[netguard.ListServiceAliasesReq]) (*connect.Response[netguard.ListServiceAliasesResp], error) {
	return c.listServiceAliases.CallUnary(ctx, req)
}

// GetServiceAlias calls netguard.v1.NetguardService.GetServiceAlias.
func (c *netguardServiceClient) GetServiceAlias(ctx context.Context, req *connect.Request[netguard.GetServiceAliasReq]) (*connect.Response[netguard.GetServiceAliasResp], error) {
	return c.getServiceAlias.CallUnary(ctx, req)
}

// NetguardServiceHandler is an implementation of the netguard.v1.NetguardService service.
type NetguardServiceHandler interface {
	// Sync - syncs data in DB
	Sync(context.Context, *connect.Request[netguard.SyncReq]) (*connect.Response[emptypb.Empty], error)
	// SyncStatus - gets last succeeded update DB status
	SyncStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[netguard.SyncStatusResp], error)
	// ListServices - gets list of services
	ListServices(context.Context, *connect.Request[netguard.ListServicesReq]) (*connect.Response[netguard.ListServicesResp], error)
	// GetService - gets a specific service by ID
	GetService(context.Context, *connect.Request[netguard.GetServiceReq]) (*connect.Response[netguard.GetServiceResp], error)
	// ListAddressGroups - gets list of address groups
	ListAddressGroups(context.Context, *connect.Request[netguard.ListAddressGroupsReq]) (*connect.Response[netguard.ListAddressGroupsResp], error)
	// GetAddressGroup - gets a specific address group by ID
	GetAddressGroup(context.Context, *connect.Request[netguard.GetAddressGroupReq]) (*connect.Response[netguard.GetAddressGroupResp], error)
	// ListAddressGroupBindings - gets list of address group bindings
	ListAddressGroupBindings(context.Context, *connect.Request[netguard.ListAddressGroupBindingsReq]) (*connect.Response[netguard.ListAddressGroupBindingsResp], error)
	// GetAddressGroupBinding - gets a specific address group binding by ID
	GetAddressGroupBinding(context.Context, *connect.Request[netguard.GetAddressGroupBindingReq]) (*connect.Response[netguard.GetAddressGroupBindingResp], error)
	// ListAddressGroupPortMappings - gets list of address group port mappings
	ListAddressGroupPortMappings(context.Context, *connect.Request[netguard.ListAddressGroupPortMappingsReq]) (*connect.Response[netguard.ListAddressGroupPortMappingsResp], error)
	// GetAddressGroupPortMapping - gets a specific address group port mapping by ID
	GetAddressGroupPortMapping(context.Context, *connect.Request[netguard.GetAddressGroupPortMappingReq]) (*connect.Response[netguard.GetAddressGroupPortMappingResp], error)
	// ListRuleS2S - gets list of rule s2s
	ListRuleS2S(context.Context, *connect.Request[netguard.ListRuleS2SReq]) (*connect.Response[netguard.ListRuleS2SResp], error)
	// GetRuleS2S - gets a specific rule s2s by ID
	GetRuleS2S(context.Context, *connect.Request[netguard.GetRuleS2SReq]) (*connect.Response[netguard.GetRuleS2SResp], error)
	// ListServiceAliases - gets list of service aliases
	ListServiceAliases(context.Context, *connect.Request[netguard.ListServiceAliasesReq]) (*connect.Response[netguard.ListServiceAliasesResp], error)
	// GetServiceAlias - gets a specific service alias by ID
	GetServiceAlias(context.Context, *connect.Request[netguard.GetServiceAliasReq]) (*connect.Response[netguard.GetServiceAliasResp], error)
}

// NewNetguardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetguardServiceHandler(svc NetguardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	netguardServiceMethods := netguard.File_netguard_api_proto.Services().ByName("NetguardService").Methods()
	netguardServiceSyncHandler := connect.NewUnaryHandler(
		NetguardServiceSyncProcedure,
		svc.Sync,
		connect.WithSchema(netguardServiceMethods.ByName("Sync")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceSyncStatusHandler := connect.NewUnaryHandler(
		NetguardServiceSyncStatusProcedure,
		svc.SyncStatus,
		connect.WithSchema(netguardServiceMethods.ByName("SyncStatus")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceListServicesHandler := connect.NewUnaryHandler(
		NetguardServiceListServicesProcedure,
		svc.ListServices,
		connect.WithSchema(netguardServiceMethods.ByName("ListServices")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceGetServiceHandler := connect.NewUnaryHandler(
		NetguardServiceGetServiceProcedure,
		svc.GetService,
		connect.WithSchema(netguardServiceMethods.ByName("GetService")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceListAddressGroupsHandler := connect.NewUnaryHandler(
		NetguardServiceListAddressGroupsProcedure,
		svc.ListAddressGroups,
		connect.WithSchema(netguardServiceMethods.ByName("ListAddressGroups")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceGetAddressGroupHandler := connect.NewUnaryHandler(
		NetguardServiceGetAddressGroupProcedure,
		svc.GetAddressGroup,
		connect.WithSchema(netguardServiceMethods.ByName("GetAddressGroup")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceListAddressGroupBindingsHandler := connect.NewUnaryHandler(
		NetguardServiceListAddressGroupBindingsProcedure,
		svc.ListAddressGroupBindings,
		connect.WithSchema(netguardServiceMethods.ByName("ListAddressGroupBindings")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceGetAddressGroupBindingHandler := connect.NewUnaryHandler(
		NetguardServiceGetAddressGroupBindingProcedure,
		svc.GetAddressGroupBinding,
		connect.WithSchema(netguardServiceMethods.ByName("GetAddressGroupBinding")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceListAddressGroupPortMappingsHandler := connect.NewUnaryHandler(
		NetguardServiceListAddressGroupPortMappingsProcedure,
		svc.ListAddressGroupPortMappings,
		connect.WithSchema(netguardServiceMethods.ByName("ListAddressGroupPortMappings")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceGetAddressGroupPortMappingHandler := connect.NewUnaryHandler(
		NetguardServiceGetAddressGroupPortMappingProcedure,
		svc.GetAddressGroupPortMapping,
		connect.WithSchema(netguardServiceMethods.ByName("GetAddressGroupPortMapping")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceListRuleS2SHandler := connect.NewUnaryHandler(
		NetguardServiceListRuleS2SProcedure,
		svc.ListRuleS2S,
		connect.WithSchema(netguardServiceMethods.ByName("ListRuleS2S")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceGetRuleS2SHandler := connect.NewUnaryHandler(
		NetguardServiceGetRuleS2SProcedure,
		svc.GetRuleS2S,
		connect.WithSchema(netguardServiceMethods.ByName("GetRuleS2S")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceListServiceAliasesHandler := connect.NewUnaryHandler(
		NetguardServiceListServiceAliasesProcedure,
		svc.ListServiceAliases,
		connect.WithSchema(netguardServiceMethods.ByName("ListServiceAliases")),
		connect.WithHandlerOptions(opts...),
	)
	netguardServiceGetServiceAliasHandler := connect.NewUnaryHandler(
		NetguardServiceGetServiceAliasProcedure,
		svc.GetServiceAlias,
		connect.WithSchema(netguardServiceMethods.ByName("GetServiceAlias")),
		connect.WithHandlerOptions(opts...),
	)
	return "/netguard.v1.NetguardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetguardServiceSyncProcedure:
			netguardServiceSyncHandler.ServeHTTP(w, r)
		case NetguardServiceSyncStatusProcedure:
			netguardServiceSyncStatusHandler.ServeHTTP(w, r)
		case NetguardServiceListServicesProcedure:
			netguardServiceListServicesHandler.ServeHTTP(w, r)
		case NetguardServiceGetServiceProcedure:
			netguardServiceGetServiceHandler.ServeHTTP(w, r)
		case NetguardServiceListAddressGroupsProcedure:
			netguardServiceListAddressGroupsHandler.ServeHTTP(w, r)
		case NetguardServiceGetAddressGroupProcedure:
			netguardServiceGetAddressGroupHandler.ServeHTTP(w, r)
		case NetguardServiceListAddressGroupBindingsProcedure:
			netguardServiceListAddressGroupBindingsHandler.ServeHTTP(w, r)
		case NetguardServiceGetAddressGroupBindingProcedure:
			netguardServiceGetAddressGroupBindingHandler.ServeHTTP(w, r)
		case NetguardServiceListAddressGroupPortMappingsProcedure:
			netguardServiceListAddressGroupPortMappingsHandler.ServeHTTP(w, r)
		case NetguardServiceGetAddressGroupPortMappingProcedure:
			netguardServiceGetAddressGroupPortMappingHandler.ServeHTTP(w, r)
		case NetguardServiceListRuleS2SProcedure:
			netguardServiceListRuleS2SHandler.ServeHTTP(w, r)
		case NetguardServiceGetRuleS2SProcedure:
			netguardServiceGetRuleS2SHandler.ServeHTTP(w, r)
		case NetguardServiceListServiceAliasesProcedure:
			netguardServiceListServiceAliasesHandler.ServeHTTP(w, r)
		case NetguardServiceGetServiceAliasProcedure:
			netguardServiceGetServiceAliasHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetguardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetguardServiceHandler struct{}

func (UnimplementedNetguardServiceHandler) Sync(context.Context, *connect.Request[netguard.SyncReq]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.Sync is not implemented"))
}

func (UnimplementedNetguardServiceHandler) SyncStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[netguard.SyncStatusResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.SyncStatus is not implemented"))
}

func (UnimplementedNetguardServiceHandler) ListServices(context.Context, *connect.Request[netguard.ListServicesReq]) (*connect.Response[netguard.ListServicesResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.ListServices is not implemented"))
}

func (UnimplementedNetguardServiceHandler) GetService(context.Context, *connect.Request[netguard.GetServiceReq]) (*connect.Response[netguard.GetServiceResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.GetService is not implemented"))
}

func (UnimplementedNetguardServiceHandler) ListAddressGroups(context.Context, *connect.Request[netguard.ListAddressGroupsReq]) (*connect.Response[netguard.ListAddressGroupsResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.ListAddressGroups is not implemented"))
}

func (UnimplementedNetguardServiceHandler) GetAddressGroup(context.Context, *connect.Request[netguard.GetAddressGroupReq]) (*connect.Response[netguard.GetAddressGroupResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.GetAddressGroup is not implemented"))
}

func (UnimplementedNetguardServiceHandler) ListAddressGroupBindings(context.Context, *connect.Request[netguard.ListAddressGroupBindingsReq]) (*connect.Response[netguard.ListAddressGroupBindingsResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.ListAddressGroupBindings is not implemented"))
}

func (UnimplementedNetguardServiceHandler) GetAddressGroupBinding(context.Context, *connect.Request[netguard.GetAddressGroupBindingReq]) (*connect.Response[netguard.GetAddressGroupBindingResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.GetAddressGroupBinding is not implemented"))
}

func (UnimplementedNetguardServiceHandler) ListAddressGroupPortMappings(context.Context, *connect.Request[netguard.ListAddressGroupPortMappingsReq]) (*connect.Response[netguard.ListAddressGroupPortMappingsResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.ListAddressGroupPortMappings is not implemented"))
}

func (UnimplementedNetguardServiceHandler) GetAddressGroupPortMapping(context.Context, *connect.Request[netguard.GetAddressGroupPortMappingReq]) (*connect.Response[netguard.GetAddressGroupPortMappingResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.GetAddressGroupPortMapping is not implemented"))
}

func (UnimplementedNetguardServiceHandler) ListRuleS2S(context.Context, *connect.Request[netguard.ListRuleS2SReq]) (*connect.Response[netguard.ListRuleS2SResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.ListRuleS2S is not implemented"))
}

func (UnimplementedNetguardServiceHandler) GetRuleS2S(context.Context, *connect.Request[netguard.GetRuleS2SReq]) (*connect.Response[netguard.GetRuleS2SResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.GetRuleS2S is not implemented"))
}

func (UnimplementedNetguardServiceHandler) ListServiceAliases(context.Context, *connect.Request[netguard.ListServiceAliasesReq]) (*connect.Response[netguard.ListServiceAliasesResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.ListServiceAliases is not implemented"))
}

func (UnimplementedNetguardServiceHandler) GetServiceAlias(context.Context, *connect.Request[netguard.GetServiceAliasReq]) (*connect.Response[netguard.GetServiceAliasResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("netguard.v1.NetguardService.GetServiceAlias is not implemented"))
}
