/*
Copyright 2024 The Netguard Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	netguardv1beta1 "netguard-pg-backend/internal/k8s/apis/netguard/v1beta1"

	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// HostLister helps list Hosts.
// All objects returned here must be treated as read-only.
type HostLister interface {
	// List lists all Hosts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*netguardv1beta1.Host, err error)
	// Hosts returns an object that can list and get Hosts.
	Hosts(namespace string) HostNamespaceLister
	HostListerExpansion
}

// hostLister implements the HostLister interface.
type hostLister struct {
	listers.ResourceIndexer[*netguardv1beta1.Host]
}

// NewHostLister returns a new HostLister.
func NewHostLister(indexer cache.Indexer) HostLister {
	return &hostLister{listers.New[*netguardv1beta1.Host](indexer, netguardv1beta1.Resource("host"))}
}

// Hosts returns an object that can list and get Hosts.
func (s *hostLister) Hosts(namespace string) HostNamespaceLister {
	return hostNamespaceLister{listers.NewNamespaced[*netguardv1beta1.Host](s.ResourceIndexer, namespace)}
}

// HostNamespaceLister helps list and get Hosts.
// All objects returned here must be treated as read-only.
type HostNamespaceLister interface {
	// List lists all Hosts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*netguardv1beta1.Host, err error)
	// Get retrieves the Host from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*netguardv1beta1.Host, error)
	HostNamespaceListerExpansion
}

// hostNamespaceLister implements the HostNamespaceLister
// interface.
type hostNamespaceLister struct {
	listers.ResourceIndexer[*netguardv1beta1.Host]
}
