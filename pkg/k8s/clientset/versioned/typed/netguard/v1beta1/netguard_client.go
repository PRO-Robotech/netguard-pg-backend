// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	http "net/http"
	netguardv1beta1 "netguard-pg-backend/internal/k8s/apis/netguard/v1beta1"
	scheme "netguard-pg-backend/pkg/k8s/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type NetguardV1beta1Interface interface {
	RESTClient() rest.Interface
	AddressGroupsGetter
	AddressGroupBindingsGetter
	AddressGroupBindingPoliciesGetter
	AddressGroupPortMappingsGetter
	IEAgAgRulesGetter
	RuleS2SsGetter
	ServicesGetter
	ServiceAliasesGetter
}

// NetguardV1beta1Client is used to interact with features provided by the netguard group.
type NetguardV1beta1Client struct {
	restClient rest.Interface
}

func (c *NetguardV1beta1Client) AddressGroups(namespace string) AddressGroupInterface {
	return newAddressGroups(c, namespace)
}

func (c *NetguardV1beta1Client) AddressGroupBindings(namespace string) AddressGroupBindingInterface {
	return newAddressGroupBindings(c, namespace)
}

func (c *NetguardV1beta1Client) AddressGroupBindingPolicies(namespace string) AddressGroupBindingPolicyInterface {
	return newAddressGroupBindingPolicies(c, namespace)
}

func (c *NetguardV1beta1Client) AddressGroupPortMappings(namespace string) AddressGroupPortMappingInterface {
	return newAddressGroupPortMappings(c, namespace)
}

func (c *NetguardV1beta1Client) IEAgAgRules(namespace string) IEAgAgRuleInterface {
	return newIEAgAgRules(c, namespace)
}

func (c *NetguardV1beta1Client) RuleS2Ss(namespace string) RuleS2SInterface {
	return newRuleS2Ss(c, namespace)
}

func (c *NetguardV1beta1Client) Services(namespace string) ServiceInterface {
	return newServices(c, namespace)
}

func (c *NetguardV1beta1Client) ServiceAliases(namespace string) ServiceAliasInterface {
	return newServiceAliases(c, namespace)
}

// NewForConfig creates a new NetguardV1beta1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*NetguardV1beta1Client, error) {
	config := *c
	setConfigDefaults(&config)
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new NetguardV1beta1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*NetguardV1beta1Client, error) {
	config := *c
	setConfigDefaults(&config)
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &NetguardV1beta1Client{client}, nil
}

// NewForConfigOrDie creates a new NetguardV1beta1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *NetguardV1beta1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new NetguardV1beta1Client for the given RESTClient.
func New(c rest.Interface) *NetguardV1beta1Client {
	return &NetguardV1beta1Client{c}
}

func setConfigDefaults(config *rest.Config) {
	gv := netguardv1beta1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = rest.CodecFactoryForGeneratedClient(scheme.Scheme, scheme.Codecs).WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *NetguardV1beta1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
