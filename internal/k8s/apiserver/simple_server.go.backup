/*
Copyright 2024 The Netguard Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package apiserver

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/klog/v2"

	"netguard-pg-backend/internal/k8s/client"
)

// SimpleAPIServer - простой HTTP сервер без сложной конфигурации Kubernetes
type SimpleAPIServer struct {
	server        *http.Server
	backendClient client.BackendClient
	config        APIServerConfig
}

// NewSimpleAPIServer создает простой API сервер
func NewSimpleAPIServer(config APIServerConfig, backendClient client.BackendClient) (*SimpleAPIServer, error) {
	mux := http.NewServeMux()

	s := &SimpleAPIServer{
		backendClient: backendClient,
		config:        config,
	}

	// Регистрируем основные endpoints
	mux.HandleFunc("/", s.handleRoot)
	mux.HandleFunc("/apis", s.handleAPIs)
	mux.HandleFunc("/apis/", s.handleAPIGroups)
	mux.HandleFunc("/healthz", s.handleHealthz)
	mux.HandleFunc("/readyz", s.handleReadyz)
	mux.HandleFunc("/livez", s.handleLivez)

	// Создаем HTTP сервер
	s.server = &http.Server{
		Addr:         fmt.Sprintf("%s:%d", config.BindAddress, config.InsecurePort),
		Handler:      mux,
		ReadTimeout:  30 * time.Second,
		WriteTimeout: 30 * time.Second,
	}

	return s, nil
}

// Start запускает сервер
func (s *SimpleAPIServer) Start(ctx context.Context) error {
	klog.Infof("Starting simple API server on %s", s.server.Addr)

	go func() {
		<-ctx.Done()
		klog.Info("Shutting down simple API server...")
		shutdownCtx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
		defer cancel()
		s.server.Shutdown(shutdownCtx)
	}()

	if err := s.server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		return fmt.Errorf("failed to start server: %w", err)
	}

	return nil
}

// handleRoot обрабатывает корневой путь
func (s *SimpleAPIServer) handleRoot(w http.ResponseWriter, r *http.Request) {
	response := map[string]interface{}{
		"paths": []string{
			"/apis",
			"/apis/netguard.sgroups.io",
			"/apis/netguard.sgroups.io/v1beta1",
			"/healthz",
			"/livez",
			"/readyz",
		},
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// handleAPIs обрабатывает /apis
func (s *SimpleAPIServer) handleAPIs(w http.ResponseWriter, r *http.Request) {
	response := &metav1.APIGroupList{
		TypeMeta: metav1.TypeMeta{
			Kind:       "APIGroupList",
			APIVersion: "v1",
		},
		Groups: []metav1.APIGroup{
			{
				Name: "netguard.sgroups.io",
				Versions: []metav1.GroupVersionForDiscovery{
					{
						GroupVersion: "netguard.sgroups.io/v1beta1",
						Version:      "v1beta1",
					},
				},
				PreferredVersion: metav1.GroupVersionForDiscovery{
					GroupVersion: "netguard.sgroups.io/v1beta1",
					Version:      "v1beta1",
				},
			},
		},
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// handleAPIGroups обрабатывает /apis/*
func (s *SimpleAPIServer) handleAPIGroups(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path == "/apis/netguard.sgroups.io" {
		s.handleNetguardAPIGroup(w, r)
		return
	}

	if r.URL.Path == "/apis/netguard.sgroups.io/v1beta1" {
		s.handleNetguardV1Beta1(w, r)
		return
	}

	http.NotFound(w, r)
}

// handleNetguardAPIGroup обрабатывает /apis/netguard.sgroups.io
func (s *SimpleAPIServer) handleNetguardAPIGroup(w http.ResponseWriter, r *http.Request) {
	response := &metav1.APIGroup{
		TypeMeta: metav1.TypeMeta{
			Kind:       "APIGroup",
			APIVersion: "v1",
		},
		Name: "netguard.sgroups.io",
		Versions: []metav1.GroupVersionForDiscovery{
			{
				GroupVersion: "netguard.sgroups.io/v1beta1",
				Version:      "v1beta1",
			},
		},
		PreferredVersion: metav1.GroupVersionForDiscovery{
			GroupVersion: "netguard.sgroups.io/v1beta1",
			Version:      "v1beta1",
		},
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// handleNetguardV1Beta1 обрабатывает /apis/netguard.sgroups.io/v1beta1
func (s *SimpleAPIServer) handleNetguardV1Beta1(w http.ResponseWriter, r *http.Request) {
	response := &metav1.APIResourceList{
		TypeMeta: metav1.TypeMeta{
			Kind:       "APIResourceList",
			APIVersion: "v1",
		},
		GroupVersion: "netguard.sgroups.io/v1beta1",
		APIResources: []metav1.APIResource{
			{
				Name:         "services",
				SingularName: "service",
				Namespaced:   true,
				Kind:         "Service",
				Verbs:        []string{"get", "list", "create", "update", "patch", "delete", "watch"},
			},
			{
				Name:         "addressgroups",
				SingularName: "addressgroup",
				Namespaced:   true,
				Kind:         "AddressGroup",
				Verbs:        []string{"get", "list", "create", "update", "patch", "delete", "watch"},
			},
			// TODO: добавить остальные ресурсы
		},
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// handleHealthz обрабатывает проверку здоровья
func (s *SimpleAPIServer) handleHealthz(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("ok"))
}

// handleReadyz обрабатывает проверку готовности
func (s *SimpleAPIServer) handleReadyz(w http.ResponseWriter, r *http.Request) {
	// Проверяем подключение к backend
	ctx, cancel := context.WithTimeout(r.Context(), 5*time.Second)
	defer cancel()

	if err := s.backendClient.HealthCheck(ctx); err != nil {
		klog.Errorf("Backend health check failed: %v", err)
		w.Header().Set("Content-Type", "text/plain")
		w.WriteHeader(http.StatusServiceUnavailable)
		w.Write([]byte("backend not ready"))
		return
	}

	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("ok"))
}

// handleLivez обрабатывает проверку живучести
func (s *SimpleAPIServer) handleLivez(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("ok"))
}
