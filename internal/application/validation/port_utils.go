package validation

import (
	"fmt"
	"strconv"
	"strings"

	"netguard-pg-backend/internal/domain/models"

	"k8s.io/klog/v2"
)

// ParsePortRanges –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ —Å–ª–∞–π—Å PortRange
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ—Ä—Ç—ã, –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ—Ä—Ç–æ–≤ –∏ —Å–ø–∏—Å–∫–∏ –ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
func ParsePortRanges(port string) ([]models.PortRange, error) {
	klog.Infof("üîß ParsePortRanges: parsing port string '%s'", port)

	if port == "" {
		return nil, fmt.Errorf("port cannot be empty")
	}

	var result []models.PortRange

	// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç–æ–≤/–¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
	portItems := strings.Split(port, ",")
	klog.Infof("üîß Split port string into %d items", len(portItems))

	for i, item := range portItems {
		item = strings.TrimSpace(item)
		klog.Infof("üîß Processing item %d: '%s'", i, item)

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
		if item == "" {
			klog.Infof("üîß Skipping empty item %d", i)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –ø–æ—Ä—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: "start-end")
		if strings.Contains(item, "-") && !strings.HasPrefix(item, "-") {
			klog.Infof("üîß Item %d is a port range", i)
			parts := strings.Split(item, "-")
			if len(parts) != 2 {
				return nil, fmt.Errorf("invalid port range format '%s', expected format is 'start-end'", item)
			}

			start, err := strconv.Atoi(parts[0])
			if err != nil {
				return nil, fmt.Errorf("invalid start port '%s': must be a number between 0 and 65535", parts[0])
			}

			end, err := strconv.Atoi(parts[1])
			if err != nil {
				return nil, fmt.Errorf("invalid end port '%s': must be a number between 0 and 65535", parts[1])
			}

			if start < 0 || start > 65535 {
				return nil, fmt.Errorf("start port %d is out of valid range (0-65535)", start)
			}

			if end < 0 || end > 65535 {
				return nil, fmt.Errorf("end port %d is out of valid range (0-65535)", end)
			}

			if start > end {
				return nil, fmt.Errorf("start port %d cannot be greater than end port %d", start, end)
			}

			result = append(result, models.PortRange{Start: start, End: end})
			klog.Infof("üîß Added port range %d-%d", start, end)
		} else {
			// –û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Ä—Ç
			klog.Infof("üîß Item %d is a single port", i)
			p, err := strconv.Atoi(item)
			if err != nil {
				return nil, fmt.Errorf("invalid port '%s': must be a number between 0 and 65535", item)
			}

			if p < 0 || p > 65535 {
				return nil, fmt.Errorf("port %d is out of valid range (0-65535)", p)
			}

			result = append(result, models.PortRange{Start: p, End: p})
			klog.Infof("üîß Added single port %d", p)
		}
	}

	if len(result) == 0 {
		return nil, fmt.Errorf("no valid ports found in list '%s'", port)
	}

	klog.Infof("üîß ParsePortRanges: successfully parsed %d port ranges from '%s'", len(result), port)
	return result, nil
}

// ParsePortRange –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –≤ PortRange
// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
func ParsePortRange(port string) (models.PortRange, error) {
	ranges, err := ParsePortRanges(port)
	if err != nil {
		return models.PortRange{}, err
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
	return ranges[0], nil
}

// DoPortRangesOverlap –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è –ª–∏ –¥–≤–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤
func DoPortRangesOverlap(a, b models.PortRange) bool {
	// –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞—á–∞–ª–æ –æ–¥–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–Ω—Ü—É –¥—Ä—É–≥–æ–≥–æ
	// –∏ –∫–æ–Ω–µ—Ü –æ–¥–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—É –¥—Ä—É–≥–æ–≥–æ
	return a.Start <= b.End && a.End >= b.Start
}

// validatePort –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
func validatePort(port string) error {
	// –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Ä—Ç–∞
	if port == "" {
		return nil
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç–æ–≤/–¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
	portItems := strings.Split(port, ",")
	for _, item := range portItems {
		item = strings.TrimSpace(item)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –ø–æ—Ä—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: "start-end")
		if strings.Contains(item, "-") && !strings.HasPrefix(item, "-") {
			parts := strings.Split(item, "-")
			if len(parts) != 2 {
				return fmt.Errorf("invalid port range format")
			}

			start, err := strconv.Atoi(parts[0])
			if err != nil {
				return fmt.Errorf("invalid start port")
			}

			end, err := strconv.Atoi(parts[1])
			if err != nil {
				return fmt.Errorf("invalid end port")
			}

			if start < 0 || start > 65535 {
				return fmt.Errorf("start port must be between 0 and 65535")
			}

			if end < 0 || end > 65535 {
				return fmt.Errorf("end port must be between 0 and 65535")
			}

			if start > end {
				return fmt.Errorf("start port must be less than or equal to end port")
			}
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º
			p, err := strconv.Atoi(item)
			if err != nil {
				return fmt.Errorf("invalid port")
			}

			if p < 0 || p > 65535 {
				return fmt.Errorf("port must be between 0 and 65535")
			}
		}
	}

	return nil
}
