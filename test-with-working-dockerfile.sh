#!/bin/bash
set -e

NAMESPACE="netguard-test"

echo "üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ê–ë–û–ß–ò–ú DOCKERFILE"
echo "===================================="

# Backup and replace dockerignore
echo "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ .dockerignore..."
mv .dockerignore .dockerignore.original
mv .dockerignore.temp .dockerignore

# Cleanup function
cleanup() {
    echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .dockerignore..."
    mv .dockerignore .dockerignore.temp
    mv .dockerignore.original .dockerignore
}
trap cleanup EXIT

echo ""
echo "üì¶ –®–ê–ì 1: –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è..."
if make build-k8s-apiserver; then
    echo "‚úì –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
else
    echo "‚ùå –û–®–ò–ë–ö–ê: –ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
    exit 1
fi

echo ""
echo "üê≥ –®–ê–ì 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
if make docker-build-k8s-apiserver; then
    echo "‚úì Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
else
    echo "‚ùå –û–®–ò–ë–ö–ê: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
    exit 1
fi

echo ""
echo "üì§ –®–ê–ì 3: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Minikube..."
if minikube image load netguard/k8s-apiserver:latest; then
    echo "‚úì –û–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Minikube"
else
    echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ –≤ Minikube"
    exit 1
fi

echo ""
echo "üîÑ –®–ê–ì 4: –†–µ–¥–µ–ø–ª–æ–π..."
kubectl rollout restart deployment/netguard-apiserver -n "$NAMESPACE"

if kubectl rollout status deployment/netguard-apiserver -n "$NAMESPACE" --timeout=120s; then
    echo "‚úì Deployment –≥–æ—Ç–æ–≤"
else
    echo "‚ùå –û–®–ò–ë–ö–ê: Deployment –Ω–µ –≥–æ—Ç–æ–≤"
    exit 1
fi

echo ""
echo "‚ö° –®–ê–ì 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ WATCH..."

# Test watch operations
echo "–¢–µ—Å—Ç–∏—Ä—É—é watch –æ–ø–µ—Ä–∞—Ü–∏–∏..."
(kubectl get services.v1beta1.netguard.sgroups.io -n "$NAMESPACE" --watch --request-timeout=10s 2>&1 || true) | \
  tee /tmp/final_watch_test

echo ""
echo "=== –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ==="

if grep -q "unable to decode an event from the watch stream" /tmp/final_watch_test; then
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Watch –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ –µ—â–µ —Å–ª–æ–º–∞–Ω—ã!"
    echo "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞:"
    grep "unable to decode" /tmp/final_watch_test
    echo ""
    echo "üîç –õ–æ–≥–∏ API Server:"
    kubectl logs deployment/netguard-apiserver -n "$NAMESPACE" --tail=10
    rm -f /tmp/final_watch_test
    exit 1
elif grep -q "no kind.*ServiceList.*registered" /tmp/final_watch_test; then
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ServiceList –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
    grep "ServiceList" /tmp/final_watch_test
    rm -f /tmp/final_watch_test
    exit 1
else
    echo "‚úÖ –£–°–ü–ï–•: Watch –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!"
    echo "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # Functional test
    echo ""
    echo "üß™ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢..."
    if kubectl apply -f - <<EOF
apiVersion: netguard.sgroups.io/v1beta1
kind: Service
metadata:
  name: final-test-service
  namespace: $NAMESPACE
spec:
  description: "Final test service"
  ingressPorts:
  - protocol: TCP
    port: "80"
EOF
    then
        echo "‚úì Service —Å–æ–∑–¥–∞–Ω"
        kubectl delete services.v1beta1.netguard.sgroups.io final-test-service -n "$NAMESPACE" 2>/dev/null || true
    fi
fi

rm -f /tmp/final_watch_test

echo ""
echo "üéâ –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "============="
echo "‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Minikube"
echo "‚úÖ Deployment –æ–±–Ω–æ–≤–ª–µ–Ω"

if ! grep -q "unable to decode\|ServiceList.*registered" /tmp/final_watch_test 2>/dev/null; then
    echo "‚úÖ Watch –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!"
    echo ""
    echo "üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WATCH –û–ü–ï–†–ê–¶–ò–ô –†–ê–ë–û–¢–ê–ï–¢!"
    echo ""
    echo "–ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤ –ø–ª–∞–Ω–µ:"
    echo "- [‚úÖ] 1.1 –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å watch"  
    echo "- [‚úÖ] 1.2 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PollerWatchInterface"
else
    echo "‚ùå Watch –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ –µ—â–µ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã"
fi 